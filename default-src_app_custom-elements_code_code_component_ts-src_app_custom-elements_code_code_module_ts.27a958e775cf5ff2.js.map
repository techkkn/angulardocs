{"version":3,"mappings":"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","names":["constructor","text","_document","this","textarea","_textarea","createElement","styles","style","position","top","opacity","left","setAttribute","value","body","appendChild","copy","successful","currentFocus","activeElement","select","setSelectionRange","length","execCommand","focus","f","destroy","remove","undefined","Clipboard","document","pendingCopy","beginCopy","PendingCopy","ɵfac","i0","DOCUMENT","ɵprov","factory","ctx_r2","CodeComponent","snackbar","pretty","clipboard","logger","EventEmitter","code","_code","toString","trim","formatDisplayedCode","showMissingCodeMessage","header","_header","ariaLabel","ngOnChanges","linenums","getLinenums","leftAlignedCode","indent","Number","MAX_VALUE","lines","split","forEach","line","lineIndent","search","Math","min","htmlFromStringKnownToSatisfyTypeContract","map","substr","join","leftAlign","setCodeHtml","codeText","getCodeText","skipPrettify","of","prettifyCode","formatCode","language","pipe","tap","formattedCode","warn","subscribe","codeFormatted","emit","src","path","region","msg","el","className","textContent","fromOuterHTML","codeContainer","nativeElement","innerHTML","unwrapHtmlForSink","doCopy","log","open","duration","error","Error","parseInt","isNaN","selectors","CodeModule","PrettyPrinter","imports","CommonModule","MatSnackBarModule","prettyPrintOne","from","getPrettyPrintOne","share","ppo","window","Promise","resolve","d","then","err","message","console","first","attach","host","_attachedHost","detach","isAttached","setAttachedHost","Portal","component","viewContainerRef","injector","componentFactoryResolver","super","template","context","templateRef","origin","elementRef","element","ElementRef","_isDisposed","attachDomPortal","hasAttached","_attachedPortal","portal","ComponentPortal","attachComponentPortal","TemplatePortal","attachTemplatePortal","DomPortal","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","BasePortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","anchorNode","createComment","parentNode","insertBefore","replaceChild","componentFactory","resolveComponentFactory","componentRef","createComponent","create","attachView","hostView","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","rootNode","detectChanges","index","indexOf","CdkPortal","ɵdir","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","_getRootNode","attachedRef","_attachedRef","ngOnInit","ngOnDestroy","ref","clear","nodeType","ELEMENT_NODE","PortalModule","ɵmod","ɵinj","t","scrollBehaviorSupported","supportsScrollBehavior","_viewportRuler","_previousHTMLStyles","_isEnabled","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","coerceCssPixelValue","classList","add","disable","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","abs","updatePosition","unsubscribe","scrollContainers","some","containerBounds","bottom","right","scrollContainerRect","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","isElementScrolledOutsideView","ScrollStrategyOptions","noop","NoopScrollStrategy","close","config","CloseScrollStrategy","block","BlockScrollStrategy","reposition","RepositionScrollStrategy","i1","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","c","__decorate","__param","Optional","__metadata","ConnectionPositionPair","ScrollingVisibility","BaseOverlayDispatcher","_attachedOverlays","push","splice","OverlayKeyboardDispatcher","_keydownListener","event","overlays","i","_keydownEvents","observers","next","_isAttached","addEventListener","removeEventListener","OverlayOutsideClickDispatcher","_platform","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","target","type","slice","_outsidePointerEvents","IOS","_cursorOriginalValue","cursor","i1$1","OverlayContainer","_containerElement","e","getContainerElement","_createContainer","containerClass","isBrowser","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","container","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","_disposeScrollStrategy","_disposeBackdrop","complete","backdropClick","attachments","detachments","keydownEvents","outsidePointerEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","N","setDirection","dir","Mt","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","coerceArray","filter","subscription","takeUntil","merge","children","backdrop","boundingBoxClass","cssUnitPattern","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","y","startX","_isRtl","endX","overlayStartX","overlayStartY","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","s","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","virtualKeyboardOffset","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isElementClippedByScrolling","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","cssClass","Element","destination","source","hasOwnProperty","input","units","parseFloat","clientRect","floor","wrapperClass","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","m","parent","OverlayPositionBuilder","global","GlobalPositionStrategy","flexibleConnectedTo","FlexibleConnectedPositionStrategy","nextUniqueId","Overlay","scrollStrategies","_positionBuilder","_injector","_directionality","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","OverlayConfig","OverlayRef","id","get","ApplicationRef","DomPortalOutlet","i5","i6","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","InjectionToken","deps","useFactory","OverlayModule","BidiModule","ScrollingModule","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","_matchMedia","matchMedia","bind","noopMatchMedia","query","WEBKIT","BLINK","has","head","sheet","insertRule","createEmptyStyleRule","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","isMatched","queries","mediaQuery","_registerQuery","mql","observe","observables","splitQueries","observable","stateObservable","combineLatest","concat","skip","debounceTime","breakpointStates","response","breakpoints","output","Observable","observer","handler","startWith","set","a1","a2","action","MAT_SNACK_BAR_DATA","politeness","announcementMessage","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","_open","dismissedByAction","afterDismissed","afterOpened","_onEnter","SimpleSnackBar","snackBarRef","hasAction","MatSnackBarRef","ɵcmp","directives","i3","i2","matSnackBarAnimations","snackBarState","trigger","state","transition","animate","MatSnackBarContainer","_elementRef","_changeDetectorRef","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","_assertNotAttached","_applySnackBarClasses","_live","r","FIREFOX","_role","onAnimationEnd","fromState","toState","_completeExit","onEnter","enter","_screenReaderAnnounce","_announceTimeoutId","onMicrotaskEmpty","panelClasses","Array","isArray","inertElement","querySelector","liveElement","focusedElement","HTMLElement","removeAttribute","MatSnackBarConfig","decls","i3$1","MatButtonModule","MatCommonModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","MatSnackBar","_overlay","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","_openedSnackBarRef","openFromComponent","_attach","openFromTemplate","_attachSnackBarContainer","Injector","providers","useValue","containerPortal","containerRef","instance","content","userConfig","_createOverlay","TemplateRef","$implicit","_createInjector","contentRef","toggle","announce","_animateSnackBar","isLeft","isRight","i2$1","i3$2"],"sources":["./node_modules/@angular/cdk/fesm2020/clipboard.mjs","./src/app/custom-elements/code/code.component.ts","./src/app/custom-elements/code/code.module.ts","./src/app/custom-elements/code/pretty-printer.service.ts","./node_modules/@angular/cdk/fesm2020/portal.mjs","./node_modules/tslib/tslib.es6.js","./node_modules/@angular/cdk/fesm2020/overlay.mjs","./node_modules/@angular/cdk/fesm2020/layout.mjs","./node_modules/@angular/material/fesm2020/snack-bar.mjs"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = (this._textarea = this._document.createElement('textarea'));\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try {\n            // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            textarea.remove();\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n}\nClipboard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: Clipboard, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nClipboard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: Clipboard, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: Clipboard, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n}\nCdkCopyToClipboard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: CdkCopyToClipboard, deps: [{ token: Clipboard }, { token: i0.NgZone }, { token: CDK_COPY_TO_CLIPBOARD_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCopyToClipboard.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", type: CdkCopyToClipboard, selector: \"[cdkCopyToClipboard]\", inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" }, host: { listeners: { \"click\": \"copy()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: CdkCopyToClipboard, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCopyToClipboard]',\n                    host: {\n                        '(click)': 'copy()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: Clipboard }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_COPY_TO_CLIPBOARD_CONFIG]\n                }] }]; }, propDecorators: { text: [{\n                type: Input,\n                args: ['cdkCopyToClipboard']\n            }], attempts: [{\n                type: Input,\n                args: ['cdkCopyToClipboardAttempts']\n            }], copied: [{\n                type: Output,\n                args: ['cdkCopyToClipboardCopied']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: ClipboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nClipboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: ClipboardModule, declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] });\nClipboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: ClipboardModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: ClipboardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkCopyToClipboard],\n                    exports: [CdkCopyToClipboard],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { unwrapHtmlForSink } from 'safevalues';\nimport { htmlFromStringKnownToSatisfyTypeContract } from 'safevalues/unsafe/reviewed';\nimport { fromOuterHTML } from 'app/shared/security';\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabel = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: TrustedHTML) {\n    this._code = code;\n\n    if (!this._code.toString().trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): TrustedHTML {\n    return this._code;\n  }\n  _code: TrustedHTML;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, dart, typescript). */\n  @Input() language: string | undefined;\n\n  /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n  @Input() linenums: boolean | number | string | undefined;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional header to be displayed above the code. */\n  @Input()\n  set header(header: string | undefined) {\n    this._header = header;\n    this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n  }\n  get header(): string|undefined { return this._header; }\n  private _header: string | undefined;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private clipboard: Clipboard,\n    private logger: Logger) {}\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const linenums = this.getLinenums();\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    const skipPrettify = of(undefined);\n    const prettifyCode = this.pretty\n        .formatCode(leftAlignedCode, this.language, linenums)\n        .pipe(tap(formattedCode => this.setCodeHtml(formattedCode)));\n\n    if (linenums !== false && this.language === 'none') {\n      this.logger.warn(\"Using 'linenums' with 'language: none' is currently not supported.\");\n    }\n\n    ((this.language === 'none' ? skipPrettify : prettifyCode) as Observable<unknown>)\n        .subscribe(() => this.codeFormatted.emit(), () => { /* ignore failure to format */ });\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n    const msg = `The code sample is missing${src ? ` for\\n${src}` : '.'}`;\n    const el = document.createElement('p');\n    el.className = 'code-missing';\n    el.textContent = msg;\n    this.setCodeHtml(fromOuterHTML(el));\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: TrustedHTML) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = unwrapHtmlForSink(formattedCode);\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.clipboard.copy(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n      this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n    }\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums() {\n    const linenums =\n      typeof this.linenums === 'boolean' ? this.linenums :\n      this.linenums === 'true' ? true :\n      this.linenums === 'false' ? false :\n      typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n      this.linenums;\n\n    return (linenums != null) && !isNaN(linenums as number) && linenums;\n  }\n}\n\nfunction leftAlign(text: TrustedHTML): TrustedHTML {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.toString().split('\\n');\n  lines.forEach(line => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return htmlFromStringKnownToSatisfyTypeContract(\n      lines.map(line => line.substr(indent)).join('\\n').trim(),\n      'safe manipulation of existing trusted HTML');\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  entryComponents: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter ]\n})\nexport class CodeModule { }\n","import { Injectable } from '@angular/core';\nimport { htmlFromStringKnownToSatisfyTypeContract } from 'safevalues/unsafe/reviewed';\n\nimport { from, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ntype PrettyPrintOne = (code: TrustedHTML, language?: string, linenums?: number|boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = from(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any).prettyPrintOne;\n    return ppo ? Promise.resolve(ppo) :\n      // `prettyPrintOne` is not on `window`, which means `prettify.js` has not been loaded yet.\n      // Import it; ad a side-effect it will add `prettyPrintOne` on `window`.\n      import('assets/js/prettify.js' as any)\n        .then(\n          () => (window as any).prettyPrintOne,\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML.\n   *\n   * @param code - the code snippet to format; should already be HTML encoded\n   * @param [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: TrustedHTML, language?: string, linenums?: number|boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return htmlFromStringKnownToSatisfyTypeContract(\n              ppo(code, language, linenums), 'prettify.js modifies already trusted HTML inline');\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.toString().substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n","import * as i0 from '@angular/core';\nimport { ElementRef, Directive, EventEmitter, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        this._attachedPortal = portal;\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn(() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        });\n        this._attachedPortal = portal;\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: CdkPortal, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortal.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", type: CdkPortal, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: CdkPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortal]',\n                    exportAs: 'cdkPortal',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; } });\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nTemplatePortalDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", type: TemplatePortalDirective, selector: \"[cdk-portal], [portal]\", providers: [\n        {\n            provide: CdkPortal,\n            useExisting: TemplatePortalDirective,\n        },\n    ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-portal], [portal]',\n                    exportAs: 'cdkPortal',\n                    providers: [\n                        {\n                            provide: CdkPortal,\n                            useExisting: TemplatePortalDirective,\n                        },\n                    ],\n                }]\n        }] });\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\n            ? nativeElement\n            : nativeElement.parentNode);\n    }\n}\nCdkPortalOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: CdkPortalOutlet, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortalOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalOutlet]',\n                    exportAs: 'cdkPortalOutlet',\n                    inputs: ['portal: cdkPortalOutlet'],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { attached: [{\n                type: Output\n            }] } });\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nPortalHostDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", type: PortalHostDirective, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\n        {\n            provide: CdkPortalOutlet,\n            useExisting: PortalHostDirective,\n        },\n    ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: PortalHostDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalHost',\n                    inputs: ['portal: cdkPortalHost'],\n                    providers: [\n                        {\n                            provide: CdkPortalOutlet,\n                            useExisting: PortalHostDirective,\n                        },\n                    ],\n                }]\n        }] });\nclass PortalModule {\n}\nPortalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPortalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: PortalModule, declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] });\nPortalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: PortalModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: PortalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, ElementRef, ApplicationRef, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, _isTestEnvironment } from '@angular/cdk/platform';\nimport { __decorate, __param, __metadata } from 'tslib';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nlet ConnectedOverlayPositionChange = class ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n};\nConnectedOverlayPositionChange = __decorate([\n    __param(1, Optional()),\n    __metadata(\"design:paramtypes\", [ConnectionPositionPair,\n        ScrollingVisibility])\n], ConnectedOverlayPositionChange);\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n        super(document);\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n        super(document);\n        this._platform = _platform;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                overlayRef._outsidePointerEvents.next(event);\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            body.addEventListener('pointerdown', this._pointerDownListener, true);\n            body.addEventListener('click', this._clickListener, true);\n            body.addEventListener('auxclick', this._clickListener, true);\n            body.addEventListener('contextmenu', this._clickListener, true);\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this._containerElement?.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        this._host?.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = { ...this._config, ...sizeConfig };\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = { ...this._config, direction: dir };\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        const finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                this._disposeBackdrop(backdropToDetach);\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer\n            .getContainerElement()\n            .getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: OverlayContainer }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () { return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                }] }, { type: i5.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import * as i0 from '@angular/core';\nimport { NgModule, Injectable } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LayoutModule {\n}\nLayoutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: LayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLayoutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: LayoutModule });\nLayoutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: LayoutModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: LayoutModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia =\n            this._platform.isBrowser && window.matchMedia\n                ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n                    // call it from a different scope.\n                    window.matchMedia.bind(window)\n                : noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT || this._platform.BLINK) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: MediaMatcher, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaMatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: MediaMatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: MediaMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }]; } });\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { },\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: BreakpointObserver, deps: [{ token: MediaMatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nBreakpointObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: BreakpointObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: BreakpointObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MediaMatcher }, { type: i0.NgZone }]; } });\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries\n        .map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.98px)',\n    Small: '(min-width: 600px) and (max-width: 959.98px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n        '(max-width: 959.98px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], components: [{ type: i2.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: MatSnackBarContainer, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], directives: [{ type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: MatSnackBarModule, imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                    entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-next.15\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n"],"sourceRoot":"webpack:///","file":"default-src_app_custom-elements_code_code_component_ts-src_app_custom-elements_code_code_module_ts.27a958e775cf5ff2.js"}