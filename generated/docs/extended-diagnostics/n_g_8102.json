{
  "id": "extended-diagnostics/NG8102",
  "title": "NG8102: Nullish coalescing not nullable",
  "contents": "<div class=\"content\">\n\n  <h1 id=\"ng8102-nullish-coalescing-not-nullable\">NG8102: Nullish coalescing not nullable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#ng8102-nullish-coalescing-not-nullable\"><i class=\"material-icons\">link</i></a></h1>\n\n  <div class=\"diagnostic-description\">\n    <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p>This diagnostic detects a useless nullish coalescing operator (<code>??</code>) characters in Angular templates.\nSpecifically, it looks for operations where the input is not \"nullable\", meaning its type does not include <code>null</code> or <code>undefined</code>.\nFor such values, the right side of the <code>??</code> will never be used.</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  // Template displays `foo` if present, falls back to 'bar' if it is `null`\n  // or `undefined`.\n  template: `<div>{{ foo ?? 'bar' }}</div>`,\n  // …\n})\nclass MyComponent {\n  // `foo` is declared as a `string` which *cannot* be `null` or `undefined`.\n  foo: string = 'test';\n}\n\n</code-example>\n<h2 id=\"whats-wrong-with-that\">What's wrong with that?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#whats-wrong-with-that\"><i class=\"material-icons\">link</i></a></h2>\n<p>Using the nullish coalescing operator with a non-nullable input has no effect and is indicative of a discrepancy between the allowed type of a value and how it is presented in the template.\nA developer might reasonably assume that the right side of the nullish coalescing operator is displayed in some case, but it will never actually be displayed.\nThis can lead to confusion about the expected output of the program.</p>\n<h2 id=\"what-should-i-do-instead\">What should I do instead?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#what-should-i-do-instead\"><i class=\"material-icons\">link</i></a></h2>\n<p>Update the template and declared type to be in sync.\nDouble-check the type of the input and confirm whether it is actually expected to be nullable.</p>\n<p>If the input should be nullable, add <code>null</code> or <code>undefined</code> to its type to indicate this.</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `<div>{{ foo ?? 'bar' }}</div>`,\n  // …\n})\nclass MyComponent {\n  // `foo` is now nullable. If it is ever set to `null`, 'bar' will be displayed.\n  foo: string | null = 'test';\n}\n\n</code-example>\n<p>If the input should <em>not</em> be nullable, delete the <code>??</code> operator and its right operand, since the value is guaranteed by TypeScript to always be non-nullable.</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  // Template always displays `foo`, which is guaranteed to never be `null` or\n  // `undefined`.\n  template: `<div>{{ foo }}</div>`,\n  // …\n})\nclass MyComponent {\n  foo: string = 'test';\n}\n\n</code-example>\n<h2 id=\"configuration-requirements\">Configuration requirements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#configuration-requirements\"><i class=\"material-icons\">link</i></a></h2>\n<p><a href=\"guide/template-typecheck#strict-mode\"><code>strictTemplates</code></a> must be enabled for any extended diagnostic to emit.\n<a href=\"guide/template-typecheck#strict-null-checks\"><code>strictNullChecks</code></a> must also be enabled to emit any <code>nullishCoalescingNotNullable</code> diagnostics.</p>\n<h2 id=\"what-if-i-cant-avoid-this\">What if I can't avoid this?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#what-if-i-cant-avoid-this\"><i class=\"material-icons\">link</i></a></h2>\n<p>This diagnostic can be disabled by editing the project's <code>tsconfig.json</code> file:</p>\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"angularCompilerOptions\": {\n    \"extendedDiagnostics\": {\n      \"checks\": {\n        \"nullishCoalescingNotNullable\": \"suppress\"\n      }\n    }\n  }\n}\n\n</code-example>\n<p>See <a href=\"extended-diagnostics#configuration\">extended diagnostic configuration</a> for more info.</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  </div>\n\n</div>\n\n<!-- links to this doc:\n - extended-diagnostics\n-->\n<!-- links from this doc:\n - api/core/Component\n - extended-diagnostics#configuration\n - extended-diagnostics/NG8102#configuration-requirements\n - extended-diagnostics/NG8102#description\n - extended-diagnostics/NG8102#ng8102-nullish-coalescing-not-nullable\n - extended-diagnostics/NG8102#what-if-i-cant-avoid-this\n - extended-diagnostics/NG8102#what-should-i-do-instead\n - extended-diagnostics/NG8102#whats-wrong-with-that\n - guide/template-typecheck#strict-mode\n - guide/template-typecheck#strict-null-checks\n-->"
}