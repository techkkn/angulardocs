{
  "id": "extended-diagnostics/NG8107",
  "title": "NG8107: Optional chain not nullable",
  "contents": "<div class=\"content\">\n\n  <h1 id=\"ng8107-optional-chain-not-nullable\">NG8107: Optional chain not nullable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8107#ng8107-optional-chain-not-nullable\"><i class=\"material-icons\">link</i></a></h1>\n\n  <div class=\"diagnostic-description\">\n    <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8107#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p>This diagnostic detects when the left side of an optional chain operation (<code>.?</code>) does not include <code>null</code> or <code>undefined</code> in its type in Angular templates.</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `<div>{{ foo?.bar }}</div>`,\n  // …\n})\nclass MyComponent {\n  // `foo` is declared as an object which *cannot* be `null` or `undefined`.\n  foo: { bar: string} = { bar: 'bar'};\n}\n\n</code-example>\n<h2 id=\"what-should-i-do-instead\">What should I do instead?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8107#what-should-i-do-instead\"><i class=\"material-icons\">link</i></a></h2>\n<p>Update the template and declared type to be in sync. Double-check the type of the input and confirm whether it is actually expected to be nullable.</p>\n<p>If the input should be nullable, add <code>null</code> or <code>undefined</code> to its type to indicate this.</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  // If `foo` is nullish, `bar` won't be evaluated and the express will return the nullish value (`null` or `undefined`).  \n  template: `<div>{{ foo?.bar }}</div>`,\n  // …\n})\nclass MyComponent {\n  foo: { bar: string} | null = { bar: 'bar'};\n}\n\n</code-example>\n<p>If the input should not be nullable, delete the <code>?</code> operator.</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  // Template always displays `bar` as `foo` is guaranteed to never be `null` or `undefined`\n  template: `<div>{{ foo.bar }}</div>`,\n  // …\n})\nclass MyComponent {\n  foo: { bar: string} = { bar: 'bar'};\n}\n\n</code-example>\n<h2 id=\"what-if-i-cant-avoid-this\">What if I can't avoid this?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8107#what-if-i-cant-avoid-this\"><i class=\"material-icons\">link</i></a></h2>\n<p>This diagnostic can be disabled by editing the project's <code>tsconfig.json</code> file:</p>\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"angularCompilerOptions\": {\n    \"extendedDiagnostics\": {\n      \"checks\": {\n        \"optionalChainNotNullable\": \"suppress\"\n      }\n    }\n  }\n}\n\n</code-example>\n<p>See <a href=\"extended-diagnostics#configuration\">extended diagnostic configuration</a> for more info.</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  </div>\n\n</div>\n\n<!-- links to this doc:\n - extended-diagnostics\n-->\n<!-- links from this doc:\n - api/core/Component\n - extended-diagnostics#configuration\n - extended-diagnostics/NG8107#description\n - extended-diagnostics/NG8107#ng8107-optional-chain-not-nullable\n - extended-diagnostics/NG8107#what-if-i-cant-avoid-this\n - extended-diagnostics/NG8107#what-should-i-do-instead\n-->"
}