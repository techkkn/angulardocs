{
  "id": "guide/content-projection",
  "title": "Content projection",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"content-projection\">Content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#content-projection\"><i class=\"material-icons\">link</i></a></h1>\n<p>This topic describes how to use content projection to create flexible, reusable components.</p>\n<div class=\"alert is-helpful\">\n<p>To view or download the example code used in this topic, see the <live-example></live-example>.</p>\n</div>\n<p>Content projection is a pattern in which you insert, or <em>project</em>, the content you want to use inside another component.\nFor example, you could have a <code>Card</code> component that accepts content provided by another component.</p>\n<p>The following sections describe common implementations of content projection in Angular, including:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Content projection</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"guide/content-projection#single-slot\">Single-slot content projection</a></td>\n<td align=\"left\">With this type of content projection, a component accepts content from a single source.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/content-projection#multi-slot\">Multi-slot content projection</a></td>\n<td align=\"left\">In this scenario, a component accepts content from multiple sources.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/content-projection#conditional\">Conditional content projection</a></td>\n<td align=\"left\">Components that use conditional content projection render content only when specific conditions are met.</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"single-slot\"></a></p>\n<h2 id=\"single-slot-content-projection\">Single-slot content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#single-slot-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<p>The most basic form of content projection is <em>single-slot content projection</em>.\nSingle-slot content projection refers to creating a component into which you can project one component.</p>\n<p>To create a component that uses single-slot content projection:</p>\n<ol>\n<li><a href=\"guide/component-overview#creating-a-component\">Create a component</a>.</li>\n<li>In the template for your component, add an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element where you want the projected content to appear.</li>\n</ol>\n<p>For example, the following component uses an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element to display a message.</p>\n<code-example header=\"content-projection/src/app/zippy-basic/zippy-basic.component.ts\" path=\"content-projection/src/app/zippy-basic/zippy-basic.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-zippy-basic',\n  template: `\n    &#x3C;h2>Single-slot content projection&#x3C;/h2>\n    &#x3C;ng-content>&#x3C;/ng-content>\n  `\n})\nexport class ZippyBasicComponent {}\n\n\n</code-example>\n<p>With the <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element in place, users of this component can now project their own message into the component.\nFor example:</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"single-slot\">\n&#x3C;app-zippy-basic>\n  &#x3C;p>Is content projection cool?&#x3C;/p>\n&#x3C;/app-zippy-basic>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element is a placeholder that does not create a real DOM element.\nCustom attributes applied to <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> are ignored.</p>\n</div>\n<p><a id=\"multi-slot\"></a></p>\n<h2 id=\"multi-slot-content-projection\">Multi-slot content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#multi-slot-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<p>A component can have multiple slots.\nEach slot can specify a CSS selector that determines which content goes into that slot.\nThis pattern is referred to as <em>multi-slot content projection</em>.\nWith this pattern, you must specify where you want the projected content to appear.\nYou accomplish this task by using the <code>select</code> attribute of <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code>.</p>\n<p>To create a component that uses multi-slot content projection:</p>\n<ol>\n<li>\n<p><a href=\"guide/component-overview#creating-a-component\">Create a component</a>.</p>\n</li>\n<li>\n<p>In the template for your component, add an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element where you want the projected content to appear.</p>\n</li>\n<li>\n<p>Add a <code>select</code> attribute to the <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> elements.\nAngular supports <a href=\"https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\">selectors</a> for any combination of tag name, attribute, CSS class, and the <code>:not</code> pseudo-class.</p>\n<p>For example, the following component uses two  <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> elements.</p>\n<code-example header=\"content-projection/src/app/zippy-multislot/zippy-multislot.component.ts\" path=\"content-projection/src/app/zippy-multislot/zippy-multislot.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-zippy-multislot',\n  template: `\n    &#x3C;h2>Multi-slot content projection&#x3C;/h2>\n\n    Default:\n    &#x3C;ng-content>&#x3C;/ng-content>\n\n    Question:\n    &#x3C;ng-content select=\"[question]\">&#x3C;/ng-content>\n  `\n})\nexport class ZippyMultislotComponent {}\n\n\n</code-example>\n</li>\n</ol>\n<p>Content that uses the <code>question</code> attribute is projected into the <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element with the <code>select=[question]</code> attribute.</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"multi-slot\">\n&#x3C;app-zippy-multislot>\n  &#x3C;p question>\n    Is content projection cool?\n  &#x3C;/p>\n  &#x3C;p>Let's learn about content projection!&#x3C;/p>\n&#x3C;/app-zippy-multislot>\n\n</code-example>\n<div class=\"callout is-helpful\">\n<header>ng-content without a select attribute</header>\n<p>If your component includes an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element without a <code>select</code> attribute, that instance receives all projected components that do not match any of the other <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> elements.</p>\n<p>In the preceding example, only the second <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element defines a <code>select</code> attribute.\nAs a result, the first <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element receives any other content projected into the component.</p>\n</div>\n<p><a id=\"conditional\"></a></p>\n<h2 id=\"conditional-content-projection\">Conditional content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#conditional-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<p>If your component needs to <em>conditionally</em> render content, or render content multiple times, you should configure that component to accept an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element that contains the content you want to conditionally render.</p>\n<p>Using an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element in these cases is not recommended, because when the consumer of a component supplies the content, that content is <em>always</em> initialized, even if the component does not define an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element or if that <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> element is inside of an <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> statement.</p>\n<p>With an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element, you can have your component explicitly render content based on any condition you want, as many times as you want.\nAngular will not initialize the content of an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element until that element is explicitly rendered.</p>\n<p>The following steps demonstrate a typical implementation of conditional content projection using <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code>.</p>\n<ol>\n<li>\n<p><a href=\"guide/component-overview#creating-a-component\">Create a component</a>.</p>\n</li>\n<li>\n<p>In the component that accepts an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element, use an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> element to render that template, such as:</p>\n<code-example header=\"content-projection/src/app/example-zippy.template.html\" path=\"content-projection/src/app/example-zippy.template.html\" region=\"ng-container\">\n&#x3C;ng-container [<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>]=\"content.templateRef\">&#x3C;/ng-container>\n\n</code-example>\n<p>This example uses the <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> directive to render a given <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element, which you will define in a later step.\nYou can apply an <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> directive to any type of element.\nThis example assigns the directive to an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> element because the component does not need to render a real DOM element.</p>\n</li>\n<li>\n<p>Wrap the <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> element in another element, such as a <code>div</code> element, and apply your conditional logic.</p>\n<code-example header=\"content-projection/src/app/example-zippy.template.html\" path=\"content-projection/src/app/example-zippy.template.html\" region=\"ngif\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"expanded\" [id]=\"contentId\">\n    &#x3C;ng-container [<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>]=\"content.templateRef\">&#x3C;/ng-container>\n&#x3C;/div>\n\n</code-example>\n</li>\n<li>\n<p>In the template where you want to project content, wrap the projected content in an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element, such as:</p>\n<code-example header=\"content-projection/src/app/app.component.html\" region=\"ng-template\" path=\"content-projection/src/app/app.component.html\">\n&#x3C;ng-template appExampleZippyContent>\n  It depends on what you do with it.\n&#x3C;/ng-template>\n\n</code-example>\n<p>The <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element defines a block of content that a component can render based on its own logic.\nA component can get a reference to this template content, or <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>, by using either the <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> or <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code> decorators.\nThe preceding example creates a custom directive, <code>appExampleZippyContent</code>, as an API to mark the <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> for the component's content.\nWith the <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>, the component can render the referenced content by using either the <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> directive, or with the <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> method <code>createEmbeddedView()</code>.</p>\n</li>\n<li>\n<p><a href=\"guide/attribute-directives#building-an-attribute-directive\">Create an attribute directive</a> with a selector that matches the custom attribute for your template.\nIn this directive, inject a <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> instance.</p>\n<code-example header=\"content-projection/src/app/example-zippy.component.ts\" path=\"content-projection/src/app/example-zippy.component.ts\" region=\"zippycontentdirective\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appExampleZippyContent]'\n})\nexport class ZippyContentDirective {\n  constructor(public templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;unknown>) {}\n}\n\n</code-example>\n<p>In the previous step, you added an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element with a custom attribute, <code>appExampleZippyContent</code>.\nThis code provides the logic that Angular will use when it encounters that custom attribute.\nIn this case, that logic instructs Angular to instantiate a template reference.</p>\n</li>\n<li>\n<p>In the component you want to project content into, use <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> to get the template of the projected content.</p>\n<code-example header=\"content-projection/src/app/example-zippy.component.ts\" path=\"content-projection/src/app/example-zippy.component.ts\" region=\"contentchild\">\n@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(ZippyContentDirective) content!: ZippyContentDirective;\n\n</code-example>\n<p>Prior to this step, your application has a component that instantiates a template when certain conditions are met.\nYou've also created a directive that provides a reference to that template.\nIn this last step, the <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> decorator instructs Angular to instantiate the template in the designated component.</p>\n<div class=\"alert is-helpful\">\n<p>In the case of multi-slot content projection, use <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code> to get a <code><a href=\"api/core/QueryList\" class=\"code-anchor\">QueryList</a></code> of projected elements.</p>\n</div>\n</li>\n</ol>\n<p><a id=\"ngprojectas \"></a></p>\n<h2 id=\"projecting-content-in-more-complex-environments\">Projecting content in more complex environments<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#projecting-content-in-more-complex-environments\"><i class=\"material-icons\">link</i></a></h2>\n<p>As described in <a href=\"guide/content-projection#multi-slot\">Multi-slot Content Projection</a>, you typically use either an attribute, element, CSS Class, or some combination of all three to identify where to project your content.\nFor example, in the following HTML template, a paragraph tag uses a custom attribute, <code>question</code>, to project content into the <code>app-zippy-multislot</code> component.</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"multi-slot\">\n&#x3C;app-zippy-multislot>\n  &#x3C;p question>\n    Is content projection cool?\n  &#x3C;/p>\n  &#x3C;p>Let's learn about content projection!&#x3C;/p>\n&#x3C;/app-zippy-multislot>\n\n</code-example>\n<p>In some cases, you might want to project content as a different element.\nFor example, the content you want to project might be a child of another element.\nAccomplish this with the <code>ngProjectAs</code> attribute.</p>\n<p>For instance, consider the following HTML snippet:</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"ngprojectas\">\n&#x3C;ng-container ngProjectAs=\"[question]\">\n  &#x3C;p>Is content projection cool?&#x3C;/p>\n&#x3C;/ng-container>\n\n</code-example>\n<p>This example uses an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> attribute to simulate projecting a component into a more complex structure.</p>\n<div class=\"callout is-helpful\">\n<header>Reminder</header>\n<p>The <code>ng-container</code> element is a logical construct that is used to group other DOM elements; however, the <code>ng-container</code> itself is not rendered in the DOM tree.</p>\n</div>\n<p>In this example, the content we want to project resides inside another element.\nTo project this content as intended, the template uses the <code>ngProjectAs</code> attribute.\nWith <code>ngProjectAs</code>, the entire <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> element is projected into a component using the <code>[question]</code> selector.</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Mon Feb 28 2022</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/NgIf\n - api/common/NgTemplateOutlet\n - api/core/Component\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/Directive\n - api/core/QueryList\n - api/core/TemplateRef\n - api/core/ViewContainerRef\n - api/core/ng-container\n - api/core/ng-content\n - api/core/ng-template\n - guide/attribute-directives#building-an-attribute-directive\n - guide/component-overview#creating-a-component\n - guide/content-projection#conditional\n - guide/content-projection#conditional-content-projection\n - guide/content-projection#content-projection\n - guide/content-projection#multi-slot\n - guide/content-projection#multi-slot-content-projection\n - guide/content-projection#projecting-content-in-more-complex-environments\n - guide/content-projection#single-slot\n - guide/content-projection#single-slot-content-projection\n - https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\n-->"
}