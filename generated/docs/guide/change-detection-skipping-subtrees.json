{
  "id": "guide/change-detection-skipping-subtrees",
  "title": "Skipping component subtrees",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"skipping-component-subtrees\">Skipping component subtrees<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-skipping-subtrees#skipping-component-subtrees\"><i class=\"material-icons\">link</i></a></h1>\n<p>JavaScript, by default, uses mutable data structures that you can reference from multiple different components. Angular runs change detection over your entire component tree to make sure that the most up-to-date state of your data structures is reflected in the DOM.</p>\n<p>Change detection is sufficiently fast for most applications. However, when an application has an especially large component tree, running change detection across the whole application can cause performance issues. You can address this by configuring change detection to only run on a subset of the component tree.</p>\n<p>If you are confident that a part of the application is not affected by a state change, you can use <a href=\"/api/core/ChangeDetectionStrategy\">OnPush</a> to skip change detection in an entire component subtree.</p>\n<h2 id=\"using-onpush\">Using <code>OnPush</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-skipping-subtrees#using-onpush\"><i class=\"material-icons\">link</i></a></h2>\n<p>OnPush change detection instructs Angular to run change detection for a component subtree <strong>only</strong> when:</p>\n<ul>\n<li>The root component of the subtree receives new inputs as the result of a template binding. Angular compares the current and past value of the input with <code>==</code></li>\n<li>Angular handles an event <em>(for example using event binding, output binding, or <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> )</em> in the subtree's root component or any of its children whether they are using OnPush change detection or not.</li>\n</ul>\n<p>You can set the change detection strategy of a component to <code>OnPush</code> in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator:</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/core/ChangeDetectionStrategy\" class=\"code-anchor\">ChangeDetectionStrategy</a>, <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  changeDetection: <a href=\"api/core/ChangeDetectionStrategy#OnPush\" class=\"code-anchor\">ChangeDetectionStrategy.OnPush</a>,\n})\nexport class MyComponent {}\n</code-example>\n<h2 id=\"common-change-detection-scenarios\">Common change detection scenarios<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-skipping-subtrees#common-change-detection-scenarios\"><i class=\"material-icons\">link</i></a></h2>\n<p>This section examines several common change detection scenarios to illustrate Angular's behavior.</p>\n<h2 id=\"an-event-is-handled-by-a-component-with-default-change-detection\">An event is handled by a component with default change detection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-skipping-subtrees#an-event-is-handled-by-a-component-with-default-change-detection\"><i class=\"material-icons\">link</i></a></h2>\n<p>If Angular handles an event within a component without <code>OnPush</code> strategy, the framework executes change detection on the entire component tree. Angular will skip descendant component subtrees with roots using <code>OnPush</code>, which have not received new inputs.</p>\n<p>As an example, if we set the change detection strategy of <code>MainComponent</code> to <code>OnPush</code> and the user interacts with a component outside the subtree with root <code>MainComponent</code>, Angular will check all the green components from the diagram below (<code>AppComponent</code>, <code>HeaderComponent</code>, <code>SearchComponent</code>, <code>ButtonComponent</code>) unless <code>MainComponent</code> receives new inputs:</p>\n<div class=\"lightbox\">\n  <img alt=\"Change detection propagation from non-OnPush component\" src=\"generated/images/guide/change-detection/event-trigger.svg\" width=\"741\" height=\"261\">\n</div>\n<h2 id=\"an-event-is-handled-by-a-component-with-onpush\">An event is handled by a component with OnPush<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-skipping-subtrees#an-event-is-handled-by-a-component-with-onpush\"><i class=\"material-icons\">link</i></a></h2>\n<p>If Angular handles an event within a component with OnPush strategy, the framework will execute change detection within the entire component tree. Angular will ignore component subtrees with roots using OnPush, which have not received new inputs and are outside the component which handled the event.</p>\n<p>As an example, if Angular handles an event within <code>MainComponent</code>, the framework will run change detection in the entire component tree. Angular will ignore the subtree with root <code>LoginComponent</code> because it has <code>OnPush</code> and the event happened outside of its scope.</p>\n<div class=\"lightbox\">\n  <img alt=\"Change detection propagation from OnPush component\" src=\"generated/images/guide/change-detection/on-push-trigger.svg\" width=\"611\" height=\"261\">\n</div>\n<h2 id=\"an-event-is-handled-by-a-descendant-of-a-component-with-onpush\">An event is handled by a descendant of a component with OnPush<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-skipping-subtrees#an-event-is-handled-by-a-descendant-of-a-component-with-onpush\"><i class=\"material-icons\">link</i></a></h2>\n<p>If Angular handles an event in a component with OnPush, the framework will execute change detection in the entire component tree, including the component’s ancestors.</p>\n<p>As an example, in the diagram below, Angular handles an event in <code>LoginComponent</code> which uses OnPush. Angular will invoke change detection in the entire component subtree including <code>MainComponent</code> (<code>LoginComponent</code>’s parent), even though <code>MainComponent</code> has <code>OnPush</code> as well. Angular checks <code>MainComponent</code> as well because <code>LoginComponent</code> is part of its view.</p>\n<div class=\"lightbox\">\n  <img alt=\"Change detection propagation from nested OnPush component\" src=\"generated/images/guide/change-detection/leaf-trigger.svg\" width=\"611\" height=\"381\">\n</div>\n<h2 id=\"new-inputs-to-component-with-onpush\">New inputs to component with OnPush<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-skipping-subtrees#new-inputs-to-component-with-onpush\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular will run change detection within a child component with <code>OnPush</code> when setting an input property as result of a template binding.</p>\n<p>For example, in the diagram below, <code>AppComponent</code> passes a new input to <code>MainComponent</code>, which has <code>OnPush</code>. Angular will run change detection in <code>MainComponent</code> but will not run change detection in <code>LoginComponent</code>, which also has <code>OnPush</code>, unless it receives new inputs as well.</p>\n<div class=\"lightbox\">\n  <img alt=\"Change detection propagation with OnPush component that receives new inputs\" src=\"generated/images/guide/change-detection/on-push-input.svg\" width=\"611\" height=\"261\">\n</div>\n<h2 id=\"edge-cases\">Edge cases<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-skipping-subtrees#edge-cases\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li><strong>Modifying input properties in TypeScript code</strong>. When you use an API like <code>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a></code> or <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> to get a reference to a component in TypeScript and manually modify an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> property, Angular will not automatically run change detection for OnPush components. If you need Angular to run change detection, you can inject <code><a href=\"api/core/ChangeDetectorRef\" class=\"code-anchor\">ChangeDetectorRef</a></code> in your component and call <code>changeDetectorRef.markForCheck()</code> to tell Angular to schedule a change detection.</li>\n<li><strong>Modifying object references</strong>. In case an input receives a mutable object as value and you modify the object but preserve the reference, Angular will not invoke change detection. That’s the expected behavior because the previous and the current value of the input point to the same reference.</li>\n</ul>\n\n  <div class=\"reviewed\">Last reviewed on Wed May 04 2022</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /api/core/ChangeDetectionStrategy\n - api/core/ChangeDetectionStrategy\n - api/core/ChangeDetectionStrategy#OnPush\n - api/core/ChangeDetectorRef\n - api/core/Component\n - api/core/ContentChild\n - api/core/HostListener\n - api/core/Input\n - api/core/ViewChild\n - guide/change-detection-skipping-subtrees#an-event-is-handled-by-a-component-with-default-change-detection\n - guide/change-detection-skipping-subtrees#an-event-is-handled-by-a-component-with-onpush\n - guide/change-detection-skipping-subtrees#an-event-is-handled-by-a-descendant-of-a-component-with-onpush\n - guide/change-detection-skipping-subtrees#common-change-detection-scenarios\n - guide/change-detection-skipping-subtrees#edge-cases\n - guide/change-detection-skipping-subtrees#new-inputs-to-component-with-onpush\n - guide/change-detection-skipping-subtrees#skipping-component-subtrees\n - guide/change-detection-skipping-subtrees#using-onpush\n-->"
}