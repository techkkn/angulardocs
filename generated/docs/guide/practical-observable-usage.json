{
  "id": "guide/practical-observable-usage",
  "title": "Practical observable usage",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"practical-observable-usage\">Practical observable usage<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/practical-observable-usage#practical-observable-usage\"><i class=\"material-icons\">link</i></a></h1>\n<p>Here are some examples of domains in which observables are particularly useful.</p>\n<h2 id=\"type-ahead-suggestions\">Type-ahead suggestions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/practical-observable-usage#type-ahead-suggestions\"><i class=\"material-icons\">link</i></a></h2>\n<p>Observables can simplify the implementation of type-ahead suggestions.\nTypically, a type-ahead has to do a series of separate tasks:</p>\n<ul>\n<li>Listen for data from an input</li>\n<li>Trim the value (remove whitespace) and make sure it's a minimum length</li>\n<li>Debounce (so as not to send off API requests for every keystroke, but instead wait for a break in keystrokes)</li>\n<li>Don't send a request if the value stays the same (rapidly hit a character, then backspace, for instance)</li>\n<li>Cancel ongoing AJAX requests if their results will be invalidated by the updated results</li>\n</ul>\n<p>Writing this in full JavaScript can be quite involved.\nWith observables, you can use a simple series of RxJS operators:</p>\n<code-example header=\"Typeahead\" path=\"practical-observable-usage/src/typeahead.ts\">\nimport { fromEvent, Observable } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\nimport { debounceTime, distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\nconst searchBox = document.getElementById('search-box') as HTMLInputElement;\n\nconst typeahead = fromEvent(searchBox, 'input').pipe(\n  map(e => (e.target as HTMLInputElement).value),\n  filter(text => text.length > 2),\n  debounceTime(10),\n  distinctUntilChanged(),\n  switchMap(searchTerm => ajax(`/api/endpoint?search=${searchTerm}`))\n);\n\ntypeahead.subscribe(data => {\n  // Handle the data from the API\n});\n\n\n</code-example>\n<h2 id=\"exponential-backoff\">Exponential backoff<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/practical-observable-usage#exponential-backoff\"><i class=\"material-icons\">link</i></a></h2>\n<p>Exponential backoff is a technique in which you retry an API after failure, making the time in between retries longer after each consecutive failure, with a maximum number of retries after which the request is considered to have failed.\nThis can be quite complex to implement with promises and other methods of tracking AJAX calls.\nWith observables, it is very easy:</p>\n<code-example header=\"Exponential backoff\" path=\"practical-observable-usage/src/backoff.ts\">\nimport { timer } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\nimport { retry } from 'rxjs/operators';\n\nexport function backoff(maxTries: number, initialDelay: number) {\n    return retry({\n        count: maxTries,\n        delay: (error, retryCount) => timer(initialDelay * retryCount ** 2),\n      });\n  }\n\najax('/api/endpoint')\n  .pipe(backoff(3, 250))\n  .subscribe(function handleData(data) { /* ... */ });\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Mon Feb 28 2022</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - guide/practical-observable-usage#exponential-backoff\n - guide/practical-observable-usage#practical-observable-usage\n - guide/practical-observable-usage#type-ahead-suggestions\n-->"
}