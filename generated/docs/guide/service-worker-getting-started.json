{
  "id": "guide/service-worker-getting-started",
  "title": "Getting started with service workers",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"getting-started-with-service-workers\">Getting started with service workers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#getting-started-with-service-workers\"><i class=\"material-icons\">link</i></a></h1>\n<p>This document explains how to enable Angular service worker support in projects that you created with the <a href=\"cli\">Angular CLI</a>.\nIt then uses an example to show you a service worker in action, demonstrating loading and basic caching.</p>\n<h2 id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p>A basic understanding of the information in <a href=\"guide/service-worker-intro\">Introduction to Angular service workers</a>.</p>\n<p><a id=\"cli-command\"></a></p>\n<h2 id=\"adding-a-service-worker-to-your-project\">Adding a service worker to your project<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#adding-a-service-worker-to-your-project\"><i class=\"material-icons\">link</i></a></h2>\n<p>To set up the Angular service worker in your project, run the following CLI command.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng add @angular/pwa\n\n</code-example>\n<p>The CLI configures your application to use service workers with the following actions:</p>\n<ol>\n<li>Adds the <code>@angular/service-worker</code> package to your project.</li>\n<li>Enables service worker build support in the CLI.</li>\n<li>Imports and registers the service worker with the application's root providers.</li>\n<li>Updates the <code>index.html</code> file:\n<ul>\n<li>Includes a link to add the <code>manifest.webmanifest</code> file</li>\n<li>Adds a meta tag for <code>theme-color</code></li>\n</ul>\n</li>\n<li>Installs icon files to support the installed Progressive Web App (PWA).</li>\n<li>Creates the service worker configuration file called <a href=\"guide/service-worker-config\"><code>ngsw-config.json</code></a>,\nwhich specifies the caching behaviors and other settings.</li>\n</ol>\n<p>Now, build the project:</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build\n\n</code-example>\n<p>The CLI project is now set up to use the Angular service worker.</p>\n<h2 id=\"service-worker-in-action-a-tour\">Service worker in action: a tour<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#service-worker-in-action-a-tour\"><i class=\"material-icons\">link</i></a></h2>\n<p>This section demonstrates a service worker in action,\nusing an example application.</p>\n<div class=\"alert is-helpful\">\n<p>To play along,\n<live-example downloadonly=\"\">download the example code</live-example>.</p>\n<p>Unzip the download, change to that directory, and enter the following commands in a terminal window,</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install           # install node packages\nng add @angular/pwa   # setup to use service worker\nng build              # build the app for production; code is in the /dist folder\n\n</code-example>\n<p>To enable service worker support during local development, use the production configuration with the following command:</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng serve --prod\n\n</code-example>\n<p>Alternatively, you can use the <a href=\"https://www.npmjs.com/package/http-server\"><code>http-server package</code></a> from\nnpm, which supports service worker applications. Run it without installation using:</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpx http-server -p 8080 -c-1 dist/&#x3C;project-name>/browser\n\n</code-example>\n<p>This will serve your application with service worker support at http://localhost:8080.</p>\n</div>\n<h3 id=\"initial-load\">Initial load<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#initial-load\"><i class=\"material-icons\">link</i></a></h3>\n<p>With the server running on port <code>8080</code>, point your browser at <code>http://localhost:8080</code>.\nYour application should load normally.</p>\n<div class=\"alert is-helpful\">\n<p><strong>TIP</strong>: <br>\nWhen testing Angular service workers, it's a good idea to use an incognito or private window in your browser to ensure the service worker doesn't end up reading from a previous leftover state, which can cause unexpected behavior.</p>\n</div>\n<div class=\"alert is-helpful\">\n<p><strong>NOTE</strong>: <br>\nIf you are not using HTTPS, the service worker will only be registered when accessing the application on <code>localhost</code>.</p>\n</div>\n<h3 id=\"simulating-a-network-issue\">Simulating a network issue<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#simulating-a-network-issue\"><i class=\"material-icons\">link</i></a></h3>\n<p>To simulate a network issue, disable network interaction for your application.</p>\n<p>In Chrome:</p>\n<ol>\n<li>Select <strong>Tools</strong> > <strong>Developer Tools</strong> (from the Chrome menu located in the top right corner).</li>\n<li>Go to the <strong>Network tab</strong>.</li>\n<li>Select <strong>Offline</strong> in the <strong>Throttling</strong> dropdown menu.</li>\n</ol>\n<div class=\"lightbox\">\n<img alt=\"The offline option in the Network tab is selected\" src=\"generated/images/guide/service-worker/offline-option.png\" width=\"910\" height=\"261\">\n</div>\n<p>Now the application has no access to network interaction.</p>\n<p>For applications that do not use the Angular service worker, refreshing now would display Chrome's Internet disconnected page that says \"There is no Internet connection\".</p>\n<p>With the addition of an Angular service worker, the application behavior changes.\nOn a refresh, the page loads normally.</p>\n<p>Look at the Network tab to verify that the service worker is active.</p>\n<div class=\"lightbox\">\n<img alt=\"Requests are marked as from ServiceWorker\" src=\"generated/images/guide/service-worker/sw-active.png\" width=\"1576\" height=\"170\">\n</div>\n<div class=\"alert is-helpful\">\n<p><strong>NOTE</strong>: <br>\nUnder the \"Size\" column, the requests state is <code>(ServiceWorker)</code>.\nThis means that the resources are not being loaded from the network.\nInstead, they are being loaded from the service worker's cache.</p>\n</div>\n<h3 id=\"whats-being-cached\">What's being cached?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#whats-being-cached\"><i class=\"material-icons\">link</i></a></h3>\n<p>Notice that all of the files the browser needs to render this application are cached.\nThe <code>ngsw-config.json</code> boilerplate configuration is set up to cache the specific resources used by the CLI:</p>\n<ul>\n<li><code>index.html</code></li>\n<li><code>favicon.ico</code></li>\n<li>Build artifacts (JS and CSS bundles)</li>\n<li>Anything under <code>assets</code></li>\n<li>Images and fonts directly under the configured <code>outputPath</code> (by default <code>./dist/&#x3C;project-name>/</code>) or <code>resourcesOutputPath</code>.\nSee <a href=\"cli/build\"><code>ng build</code></a> for more information about these options.</li>\n</ul>\n<div class=\"alert is-important\">\n<p>Pay attention to two key points:</p>\n<ol>\n<li>\n<p>The generated <code>ngsw-config.json</code> includes a limited list of cacheable fonts and images extensions.\nIn some cases, you might want to modify the glob pattern to suit your needs.</p>\n</li>\n<li>\n<p>If <code>resourcesOutputPath</code> or <code>assets</code> paths are modified after the generation of configuration file, you need to change the paths manually in <code>ngsw-config.json</code>.</p>\n</li>\n</ol>\n</div>\n<h3 id=\"making-changes-to-your-application\">Making changes to your application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#making-changes-to-your-application\"><i class=\"material-icons\">link</i></a></h3>\n<p>Now that you've seen how service workers cache your application, the next step is understanding how updates work.\nMake a change to the application, and watch the service worker install the update:</p>\n<ol>\n<li>\n<p>If you're testing in an incognito window, open a second blank tab.\nThis keeps the incognito and the cache state alive during your test.</p>\n</li>\n<li>\n<p>Close the application tab, but not the window.\nThis should also close the Developer Tools.</p>\n</li>\n<li>\n<p>Shut down <code>http-server</code> (Ctrl-c).</p>\n</li>\n<li>\n<p>Open <code>src/app/app.component.html</code> for editing.</p>\n</li>\n<li>\n<p>Change the text <code>Welcome to {{title}}!</code> to <code>Bienvenue Ã  {{title}}!</code>.</p>\n</li>\n<li>\n<p>Build and run the server again:</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build\nnpx http-server -p 8080 -c-1 dist/&#x3C;project-name>/browser\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"updating-your-application-in-the-browser\">Updating your application in the browser<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#updating-your-application-in-the-browser\"><i class=\"material-icons\">link</i></a></h3>\n<p>Now look at how the browser and service worker handle the updated application.</p>\n<ol>\n<li>\n<p>Open <a href=\"http://localhost:8080\">http://localhost:8080</a> again in the same window.\nWhat happens?</p>\n<div class=\"lightbox\">\n<img alt=\"It still says Welcome to Service Workers!\" src=\"generated/images/guide/service-worker/welcome-msg-en.png\" width=\"411\" height=\"248\">\n</div>\n<p>What went wrong?\n<em>Nothing, actually!</em></p>\n<p>The Angular service worker is doing its job and serving the version of the application that it has <strong>installed</strong>, even though there is an update available.\nIn the interest of speed, the service worker doesn't wait to check for updates before it serves the application that it has cached.</p>\n<br>\n<p>Look at the <code>http-server</code> logs to see the service worker requesting <code>/ngsw.json</code>.</p>\n<code-example format=\"shell\" language=\"shell\">\n\n[2023-09-07T00:37:24.372Z]  \"GET /ngsw.json?ngsw-cache-bust=0.9365263935102124\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36\"\n\n</code-example>\n<p>This is how the service worker checks for updates.</p>\n</li>\n<li>\n<p>Refresh the page.</p>\n<div class=\"lightbox\">\n<img alt=\"The text has changed to say Bienvenue Ã  app!\" src=\"generated/images/guide/service-worker/welcome-msg-fr.png\" width=\"393\" height=\"240\">\n</div>\n<p>The service worker installed the updated version of your application <em>in the background</em>, and the next time the page is loaded or reloaded, the service worker switches to the latest version.</p>\n</li>\n</ol>\n<h2 id=\"more-on-angular-service-workers\">More on Angular service workers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#more-on-angular-service-workers\"><i class=\"material-icons\">link</i></a></h2>\n<p>You might also be interested in the following:</p>\n<ul>\n<li><a href=\"guide/service-worker-communications\">Communicating with service workers</a></li>\n<li><a href=\"guide/app-shell\">App Shell</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Wed Sep 06 2023</div>\n</div>\n\n<!-- links to this doc:\n - guide/service-worker-communications\n - guide/service-worker-intro\n - guide/service-worker-notifications\n-->\n<!-- links from this doc:\n - cli\n - cli/build\n - guide/app-shell\n - guide/service-worker-communications\n - guide/service-worker-config\n - guide/service-worker-getting-started#adding-a-service-worker-to-your-project\n - guide/service-worker-getting-started#getting-started-with-service-workers\n - guide/service-worker-getting-started#initial-load\n - guide/service-worker-getting-started#making-changes-to-your-application\n - guide/service-worker-getting-started#more-on-angular-service-workers\n - guide/service-worker-getting-started#prerequisites\n - guide/service-worker-getting-started#service-worker-in-action-a-tour\n - guide/service-worker-getting-started#simulating-a-network-issue\n - guide/service-worker-getting-started#updating-your-application-in-the-browser\n - guide/service-worker-getting-started#whats-being-cached\n - guide/service-worker-intro\n - http://localhost:8080\n - https://www.npmjs.com/package/http-server\n-->"
}