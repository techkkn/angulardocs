{
  "id": "guide/class-binding",
  "title": "Class and style binding",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"class-and-style-binding\">Class and style binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/class-binding#class-and-style-binding\"><i class=\"material-icons\">link</i></a></h1>\n<p>Use class and style bindings to add and remove CSS class names from an element's <code>class</code> attribute and to set styles dynamically.</p>\n<h2 id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/class-binding#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li><a href=\"guide/property-binding\">Property binding</a></li>\n</ul>\n<h2 id=\"binding-to-a-single-css-class\">Binding to a single CSS <code>class</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/class-binding#binding-to-a-single-css-class\"><i class=\"material-icons\">link</i></a></h2>\n<p>To create a single class binding, type the following:</p>\n<p><code>[class.sale]=\"onSale\"</code></p>\n<p>Angular adds the class when the bound expression, <code>onSale</code> is truthy, and it removes the class when the expression is falsy—with the exception of <code>undefined</code>.  See <a href=\"guide/style-precedence#styling-delegation\">styling delegation</a> for more information.</p>\n<h2 id=\"binding-to-multiple-css-classes\">Binding to multiple CSS classes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/class-binding#binding-to-multiple-css-classes\"><i class=\"material-icons\">link</i></a></h2>\n<p>To bind to multiple classes, type the following:</p>\n<p><code>[class]=\"classExpression\"</code></p>\n<p>The expression can be one of:</p>\n<ul>\n<li>A space-delimited string of class names.</li>\n<li>An object with class names as the keys and truthy or falsy expressions as the values.</li>\n<li>An array of class names.</li>\n</ul>\n<p>With the object format, Angular adds a class only if its associated value is truthy.</p>\n<div class=\"alert is-important\">\n<p>With any object-like expression—such as <code>object</code>, <code>Array</code>, <code>Map</code>, or <code>Set</code> —the identity of the object must change for Angular to update the class list.\nUpdating the property without changing object identity has no effect.</p>\n</div>\n<p>If there are multiple bindings to the same class name, Angular uses <a href=\"guide/style-precedence\">styling precedence</a> to determine which binding to use.</p>\n<p>The following table summarizes class binding syntax.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Binding Type</th>\n<th align=\"left\">Syntax</th>\n<th align=\"left\">Input Type</th>\n<th align=\"left\">Example Input Values</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Single class binding</td>\n<td align=\"left\"><code>[class.sale]=\"onSale\"</code></td>\n<td align=\"left\"><code>boolean | undefined | null</code></td>\n<td align=\"left\"><code>true</code>, <code>false</code></td>\n</tr>\n<tr>\n<td align=\"left\">Multi-class binding</td>\n<td align=\"left\"><code>[class]=\"classExpression\"</code></td>\n<td align=\"left\"><code>string</code></td>\n<td align=\"left\"><code>\"my-class-1 my-class-2 my-class-3\"</code></td>\n</tr>\n<tr>\n<td align=\"left\">Multi-class binding</td>\n<td align=\"left\"><code>[class]=\"classExpression\"</code></td>\n<td align=\"left\"><code>Record&#x3C;string, boolean | undefined | null></code></td>\n<td align=\"left\"><code>{foo: true, bar: false}</code></td>\n</tr>\n<tr>\n<td align=\"left\">Multi-class binding</td>\n<td align=\"left\"><code>[class]=\"classExpression\"</code></td>\n<td align=\"left\"><code>Array&#x3C;string></code></td>\n<td align=\"left\"><code>['foo', 'bar']</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"binding-to-a-single-style\">Binding to a single style<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/class-binding#binding-to-a-single-style\"><i class=\"material-icons\">link</i></a></h2>\n<p>To create a single style binding, use the prefix <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> followed by a dot and the name of the CSS style.</p>\n<p>For example, to set the <code>width</code> style, type the following:  <code>[style.width]=\"width\"</code></p>\n<p>Angular sets the property to the value of the bound expression, which is usually a string. Optionally, you can add a unit extension like <code>em</code> or <code>%</code>, which requires a number type.</p>\n<ol>\n<li>\n<p>To write a style in dash-case, type the following:</p>\n<code-example language=\"html\">&#x3C;nav [style.background-color]=\"expression\">&#x3C;/nav></code-example>\n</li>\n<li>\n<p>To write a style in camelCase, type the following:</p>\n<code-example language=\"html\">&#x3C;nav [style.backgroundColor]=\"expression\">&#x3C;/nav></code-example>\n</li>\n</ol>\n<h2 id=\"binding-to-multiple-styles\">Binding to multiple styles<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/class-binding#binding-to-multiple-styles\"><i class=\"material-icons\">link</i></a></h2>\n<p>To toggle multiple styles, bind to the <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> attribute—for example, <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\"</code>.  The <code>styleExpression</code> can be one of:</p>\n<ul>\n<li>A string list of styles such as <code>\"width: 100px; height: 100px; background-color: cornflowerblue;\"</code>.</li>\n<li>An object with style names as the keys and style values as the values, such as <code>{width: '100px', height: '100px', backgroundColor: 'cornflowerblue'}</code>.</li>\n</ul>\n<p>Note that binding an array to <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> is not supported.</p>\n<div class=\"alert is-important\">\n<p>When binding <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> to an object expression, the identity of the object must change for Angular to update the class list.\nUpdating the property without changing object identity has no effect.</p>\n</div>\n<h3 id=\"single-and-multiple-style-binding-example\">Single and multiple-style binding example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/class-binding#single-and-multiple-style-binding-example\"><i class=\"material-icons\">link</i></a></h3>\n<code-example path=\"attribute-binding/src/app/single-and-multiple-style-binding.component.ts\" header=\"nav-bar.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-nav-bar',\n  template: ` &#x3C;nav [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"navStyle\">\n    &#x3C;a [style.text-decoration]=\"activeLinkStyle\">Home Page&#x3C;/a>\n    &#x3C;a [style.text-decoration]=\"linkStyle\">Login&#x3C;/a>\n  &#x3C;/nav>`,\n})\nexport class NavBarComponent {\n  navStyle = 'font-size: 1.2rem; color: cornflowerblue;';\n  linkStyle = 'underline';\n  activeLinkStyle = 'overline';\n  /* . . . */\n}\n\n\n</code-example>\n<p>If there are multiple bindings to the same style attribute, Angular uses <a href=\"guide/style-precedence\">styling precedence</a> to determine which binding to use.</p>\n<p>The following table summarizes style binding syntax.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Binding Type</th>\n<th align=\"left\">Syntax</th>\n<th align=\"left\">Input Type</th>\n<th align=\"left\">Example Input Values</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Single style binding</td>\n<td align=\"left\"><code>[style.width]=\"width\"</code></td>\n<td align=\"left\"><code>string | undefined | null</code></td>\n<td align=\"left\"><code>\"100px\"</code></td>\n</tr>\n<tr>\n<td align=\"left\">Single style binding with units</td>\n<td align=\"left\"><code>[style.width.px]=\"width\"</code></td>\n<td align=\"left\"><code>number | undefined | null</code></td>\n<td align=\"left\"><code>100</code></td>\n</tr>\n<tr>\n<td align=\"left\">Multi-style binding</td>\n<td align=\"left\"><code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\"</code></td>\n<td align=\"left\"><code>string</code></td>\n<td align=\"left\"><code>\"width: 100px; height: 100px\"</code></td>\n</tr>\n<tr>\n<td align=\"left\">Multi-style binding</td>\n<td align=\"left\"><code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\"</code></td>\n<td align=\"left\"><code>Record&#x3C;string, string | undefined | null></code></td>\n<td align=\"left\"><code>{width: '100px', height: '100px'}</code></td>\n</tr>\n</tbody>\n</table>\n<a id=\"styling-precedence\"></a>\n<h2 id=\"styling-precedence\">Styling precedence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/class-binding#styling-precedence\"><i class=\"material-icons\">link</i></a></h2>\n<p>A single HTML element can have its CSS class list and style values bound to multiple sources (for example, host bindings from multiple directives).</p>\n<h2 id=\"whats-next\">What’s next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/class-binding#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li><a href=\"/guide/component-styles\">Component styles</a></li>\n<li><a href=\"/guide/animations\">Introduction to Angular animations</a></li>\n</ul>\n\n  <div class=\"reviewed\">Last reviewed on Mon May 09 2022</div>\n</div>\n\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/attribute-binding\n - guide/built-in-directives\n - guide/glossary\n - guide/property-binding\n - guide/router-tutorial-toh\n - guide/template-overview\n - tutorial/tour-of-heroes/toh-pt2\n-->\n<!-- links from this doc:\n - /guide/animations\n - /guide/component-styles\n - api/animations/style\n - api/core/Component\n - guide/class-binding#binding-to-a-single-css-class\n - guide/class-binding#binding-to-a-single-style\n - guide/class-binding#binding-to-multiple-css-classes\n - guide/class-binding#binding-to-multiple-styles\n - guide/class-binding#class-and-style-binding\n - guide/class-binding#prerequisites\n - guide/class-binding#single-and-multiple-style-binding-example\n - guide/class-binding#styling-precedence\n - guide/class-binding#whats-next\n - guide/property-binding\n - guide/style-precedence\n - guide/style-precedence#styling-delegation\n-->"
}