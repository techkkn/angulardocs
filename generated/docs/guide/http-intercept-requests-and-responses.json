{
  "id": "guide/http-intercept-requests-and-responses",
  "title": "HTTP - Intercept requests and responses",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"http---intercept-requests-and-responses\">HTTP - Intercept requests and responses<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-intercept-requests-and-responses#http---intercept-requests-and-responses\"><i class=\"material-icons\">link</i></a></h1>\n<p>With interception, you declare <em>interceptors</em> that inspect and transform HTTP requests from your application to a server.\nThe same interceptors can also inspect and transform a server's responses on their way back to the application.\nMultiple interceptors form a <em>forward-and-backward</em> chain of request/response handlers.</p>\n<p>Interceptors can perform a variety of  <em>implicit</em> tasks, from authentication to logging, in a routine, standard way, for every HTTP request/response.</p>\n<p>Without interception, developers would have to implement these tasks <em>explicitly</em> for each <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> method call.</p>\n<h2 id=\"write-an-interceptor\">Write an interceptor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-intercept-requests-and-responses#write-an-interceptor\"><i class=\"material-icons\">link</i></a></h2>\n<p>To implement an interceptor, declare a class that implements the <code>intercept()</code> method of the <code><a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a></code> interface.</p>\n<p>Here is a do-nothing <code>noop</code> interceptor that passes the request through without touching it:</p>\n<code-example header=\"app/http-interceptors/noop-interceptor.ts\" path=\"http/src/app/http-interceptors/noop-interceptor.ts\" region=\"noop\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport {\n  <a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>, <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a>, <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>, <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>\n} from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { Observable } from 'rxjs';\n\n/** Pass untouched request through to the next request handler. */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class NoopInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>):\n    Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>> {\n    return next.handle(req);\n  }\n}\n\n</code-example>\n<p>The <code>intercept</code> method transforms a request into an <code>Observable</code> that eventually returns the HTTP response.\nIn this sense, each interceptor is fully capable of handling the request entirely by itself.</p>\n<p>Most interceptors inspect the request on the way in and forward the potentially altered request to the <code>handle()</code> method of the <code>next</code> object which implements the <a href=\"api/common/http/HttpHandler\"><code>HttpHandler</code></a> interface.</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nexport abstract class <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a> {\n  abstract handle(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>): Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>>;\n}\n\n</code-example>\n<p>Like <code>intercept()</code>, the <code>handle()</code> method transforms an HTTP request into an <code>Observable</code> of <a href=\"guide/http-intercept-requests-and-responses#interceptor-events\"><code>HttpEvents</code></a> which ultimately include the server's response.\nThe <code>intercept()</code> method could inspect that observable and alter it before returning it to the caller.</p>\n<p>This <code>no-op</code> interceptor calls <code>next.handle()</code> with the original request and returns the observable without doing a thing.</p>\n<h2 id=\"the-next-object\">The <code>next</code> object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-intercept-requests-and-responses#the-next-object\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>next</code> object represents the next interceptor in the chain of interceptors.\nThe final <code>next</code> in the chain is the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> backend handler that sends the request to the server and receives the server's response.</p>\n<p>Most interceptors call <code>next.handle()</code> so that the request flows through to the next interceptor and, eventually, the backend handler.\nAn interceptor <em>could</em> skip calling <code>next.handle()</code>, short-circuit the chain, and <a href=\"guide/http-interceptor-use-cases#caching\">return its own <code>Observable</code></a> with an artificial server response.</p>\n<p>This is a common middleware pattern found in frameworks such as Express.js.</p>\n<h2 id=\"provide-the-interceptor\">Provide the interceptor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-intercept-requests-and-responses#provide-the-interceptor\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>NoopInterceptor</code> is like a service managed by Angular's <a href=\"guide/dependency-injection\">dependency injection (DI)</a> system.\nAs with other services, you must provide the interceptor class before the app can use it.</p>\n<p>Write a provider for it like this one:\n<code-example path=\"http/src/app/http-interceptors/noop-interceptor.ts\" region=\"noop-provider\">\nimport { <a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a> } from '@angular/core';\n\n// Injection token for the Http Interceptors multi-provider\nimport { <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n/** <a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a> for the Noop Interceptor. */\nexport const noopInterceptorProvider: <a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a> =\n  { provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, useClass: NoopInterceptor, multi: true };\n\n</code-example></p>\n<p>Notice the <code>multi: true</code> option.\nThis required setting tells Angular that <code><a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a></code> is a token for a <em>multiprovider</em> that injects an array of values, rather than a single value.</p>\n<p>Because interceptors are optional dependencies of the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service, you must provide them in the same injector or a parent of the injector that provides <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.\nInterceptors provided <em>after</em> DI creates the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> are ignored.</p>\n<p>This app provides <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> in the app's root injector by adding the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> to the <code>providers</code> array of the <code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> in <code>app.config.ts</code>.\nYou should provide interceptors there as well.</p>\n<code-example header=\"app.config.ts (excerpt)\" path=\"http/src/app/app.config.ts\" region=\"noop-provider\">\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n  providers: [\n    <a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a>(<a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>),\n    noopInterceptorProvider,\n  ]\n};\n\n\n</code-example>\n<h2 id=\"providing-many-interceptors\">Providing many interceptors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-intercept-requests-and-responses#providing-many-interceptors\"><i class=\"material-icons\">link</i></a></h2>\n<p>There's a good chance that you'll create more interceptors.</p>\n<p>You <em>could</em> add each provider to the <code>providers</code> array of the <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>()</code> as you did for the <code>NoopInterceptor</code>.</p>\n<p>That's rather verbose and there's a good chance that you'll make a bookkeeping mistake trying to remember to add each one.</p>\n<p>You must also pay <a href=\"guide/http-intercept-requests-and-responses#interceptor-order\">close attention to the order</a> in which you provide these interceptors.</p>\n<p>Consider creating a \"barrel\" file that gathers <em>all the interceptor providers</em> into a single <code>httpInterceptorProviders</code> array.</p>\n<code-example header=\"app/http-interceptors/index.ts\" path=\"http/src/app/http-interceptors/index.ts\" region=\"interceptor-providers\">\nimport { <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { AuthInterceptor } from './auth-interceptor';\nimport { CachingInterceptor } from './caching-interceptor';\nimport { EnsureHttpsInterceptor } from './ensure-https-interceptor';\nimport { LoggingInterceptor } from './logging-interceptor';\nimport { NoopInterceptor } from './noop-interceptor';\nimport { TrimNameInterceptor } from './trim-name-interceptor';\nimport { UploadInterceptor } from './upload-interceptor';\n\n/** Array of Http interceptor providers in outside-in order */\nexport const httpInterceptorProviders = [\n  { provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, useClass: NoopInterceptor, multi: true },\n  { provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, useClass: EnsureHttpsInterceptor, multi: true },\n  { provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, useClass: TrimNameInterceptor, multi: true },\n  { provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, useClass: AuthInterceptor, multi: true },\n  { provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, useClass: LoggingInterceptor, multi: true },\n  { provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, useClass: UploadInterceptor, multi: true },\n  { provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, useClass: CachingInterceptor, multi: true },\n];\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>These interceptors are defined in the complete sample code.</p>\n</div>\n<p>Then import this array and add it to the <code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> <code>providers</code> in <code>app.config.ts</code> like this:</p>\n<code-example header=\"main.ts (interceptor providers)\" path=\"http/src/app/app.config.ts\" region=\"interceptor-providers\">\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n  providers: [\n    <a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a>(<a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>),\n    httpInterceptorProviders,\n  ]\n};\n\n\n</code-example>\n<p>As you create new interceptors, add them to the <code>httpInterceptorProviders</code> array and you won't have to revisit <code>main.ts</code>.</p>\n<h2 id=\"interceptor-order\">Interceptor order<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-intercept-requests-and-responses#interceptor-order\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular applies interceptors in the order that you provide them.\nFor example, consider a situation in which you want to handle the authentication of your HTTP requests and log them before sending them to a server.\nTo accomplish this task, you could provide an <code>AuthInterceptor</code> service and then a <code>LoggingInterceptor</code> service.\nOutgoing requests would flow from the <code>AuthInterceptor</code> to the <code>LoggingInterceptor</code>.\nResponses from these requests would flow in the other direction, from <code>LoggingInterceptor</code> back to <code>AuthInterceptor</code>.\nThe following is a visual representation of the process:</p>\n<div class=\"lightbox\">\n<img alt=\"Interceptor in order of HttpClient, AuthInterceptor, AuthInterceptor, HttpBackend, Server, and back in opposite order to show the two-way flow\" src=\"generated/images/guide/http/interceptor-order.svg\" width=\"300\" height=\"522\">\n</div>\n<div class=\"alert is-helpful\">\n<p>The last interceptor in the process is always the <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code> that handles communication with the server.</p>\n</div>\n<p>You cannot change the order or remove interceptors later.\nIf you need to enable and disable an interceptor dynamically, you'll have to build that capability into the interceptor itself.</p>\n<p><a id=\"interceptor-events\"></a></p>\n<h2 id=\"handle-interceptor-events\">Handle interceptor events<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-intercept-requests-and-responses#handle-interceptor-events\"><i class=\"material-icons\">link</i></a></h2>\n<p>Most <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods return observables of <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>&#x3C;any></code>.\nThe <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> class itself is actually an event, whose type is <code><a href=\"api/common/http/HttpEventType#Response\" class=\"code-anchor\">HttpEventType.Response</a></code>.\nA single HTTP request can, however, generate multiple events of other types, including upload and download progress events.\nThe methods <code>HttpInterceptor.intercept()</code> and <code>HttpHandler.handle()</code> return observables of <code><a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any></code>.</p>\n<p>Many interceptors are only concerned with the outgoing request and return the event stream from <code>next.handle()</code> without modifying it.\nSome interceptors, however, need to examine and modify the response from <code>next.handle()</code>; these operations can see all of these events in the stream.</p>\n<p><a id=\"immutability\"></a></p>\n<p>Although interceptors are capable of modifying requests and responses, the <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> and <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> instance properties are <code>readonly</code>, rendering them largely immutable.\nThey are immutable for a good reason:\nAn app might retry a request several times before it succeeds, which means that the interceptor chain can re-process the same request multiple times.\nIf an interceptor could modify the original request object, the re-tried operation would start from the modified request rather than the original.\nImmutability ensures that interceptors see the same request for each try.</p>\n<div class=\"alert is-helpful\">\n<p>Your interceptor should return every event without modification unless it has a compelling reason to do otherwise.</p>\n</div>\n<p>TypeScript prevents you from setting <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> read-only properties.</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\n// Typescript disallows the following assignment because req.url is readonly\nreq.url = req.url.replace('<a href=\"api/common/http\" class=\"code-anchor\">http</a>://', 'https://');\n\n</code-example>\n<p>If you must alter a request, clone it first and modify the clone before passing it to <code>next.handle()</code>.\nYou can clone and modify the request in a single step, as shown in the following example.</p>\n<code-example header=\"app/http-interceptors/ensure-https-interceptor.ts (excerpt)\" path=\"http/src/app/http-interceptors/ensure-https-interceptor.ts\" region=\"excerpt\">\n// clone request and replace '<a href=\"api/common/http\" class=\"code-anchor\">http</a>://' with 'https://' at the same time\nconst secureReq = req.clone({\n  url: req.url.replace('<a href=\"api/common/http\" class=\"code-anchor\">http</a>://', 'https://')\n});\n// send the cloned, \"secure\" request to the next handler.\nreturn next.handle(secureReq);\n\n</code-example>\n<p>The <code>clone()</code> method's hash argument lets you mutate specific properties of the request while copying the others.</p>\n<h3 id=\"modify-a-request-body\">Modify a request body<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-intercept-requests-and-responses#modify-a-request-body\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>readonly</code> assignment guard can't prevent deep updates and, in particular, it can't prevent you from modifying a property of a request body object.</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nreq.body.name = req.body.name.trim(); // bad idea!\n\n</code-example>\n<p>If you must modify the request body, follow these steps.</p>\n<ol>\n<li>Copy the body and make your change in the copy.</li>\n<li>Clone the request object, using its <code>clone()</code> method.</li>\n<li>Replace the clone's body with the modified copy.</li>\n</ol>\n<code-example header=\"app/http-interceptors/trim-name-interceptor.ts (excerpt)\" path=\"http/src/app/http-interceptors/trim-name-interceptor.ts\" region=\"excerpt\">\n// copy the body and trim whitespace from the name property\nconst newBody = { ...body, name: body.name.trim() };\n// clone request and set its body\nconst newReq = req.clone({ body: newBody });\n// send the cloned request to the next handler.\nreturn next.handle(newReq);\n\n</code-example>\n<h3 id=\"clear-the-request-body-in-a-clone\">Clear the request body in a clone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-intercept-requests-and-responses#clear-the-request-body-in-a-clone\"><i class=\"material-icons\">link</i></a></h3>\n<p>Sometimes you need to clear the request body rather than replace it.\nTo do this, set the cloned request body to <code>null</code>.</p>\n<div class=\"alert is-helpful\">\n<p><strong>TIP</strong>: <br>\nIf you set the cloned request body to <code>undefined</code>, Angular assumes you intend to leave the body as is.</p>\n</div>\n<code-example format=\"javascript\" language=\"javascript\">\n\nnewReq = req.clone({ … }); // body not mentioned => preserve original body\nnewReq = req.clone({ body: undefined }); // preserve original body\nnewReq = req.clone({ body: null }); // clear the body\n\n</code-example>\n\n  <div class=\"reviewed\">Last reviewed on Wed Aug 16 2023</div>\n</div>\n\n<!-- links to this doc:\n - api/common/http/HttpHandlerFn\n - api/common/http/HttpInterceptor\n - api/common/http/HttpInterceptorFn\n - guide/http-track-show-request-progress\n - guide/understanding-communicating-with-http\n-->\n<!-- links from this doc:\n - api/common/http\n - api/common/http/HTTP_INTERCEPTORS\n - api/common/http/HttpBackend\n - api/common/http/HttpClient\n - api/common/http/HttpClientModule\n - api/common/http/HttpEvent\n - api/common/http/HttpEventType#Response\n - api/common/http/HttpHandler\n - api/common/http/HttpInterceptor\n - api/common/http/HttpRequest\n - api/common/http/HttpResponse\n - api/core/ApplicationConfig\n - api/core/Injectable\n - api/core/Provider\n - api/core/importProvidersFrom\n - api/platform-browser/bootstrapApplication\n - guide/dependency-injection\n - guide/http-intercept-requests-and-responses#clear-the-request-body-in-a-clone\n - guide/http-intercept-requests-and-responses#handle-interceptor-events\n - guide/http-intercept-requests-and-responses#http---intercept-requests-and-responses\n - guide/http-intercept-requests-and-responses#interceptor-events\n - guide/http-intercept-requests-and-responses#interceptor-order\n - guide/http-intercept-requests-and-responses#modify-a-request-body\n - guide/http-intercept-requests-and-responses#provide-the-interceptor\n - guide/http-intercept-requests-and-responses#providing-many-interceptors\n - guide/http-intercept-requests-and-responses#the-next-object\n - guide/http-intercept-requests-and-responses#write-an-interceptor\n - guide/http-interceptor-use-cases#caching\n-->"
}