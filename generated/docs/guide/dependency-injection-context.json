{
  "id": "guide/dependency-injection-context",
  "title": "Injection context",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"injection-context\">Injection context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#injection-context\"><i class=\"material-icons\">link</i></a></h1>\n<p>The dependency injection (DI) system relies internally on a runtime context where the current injector is available.\nThis means that injectors can only work when code is executed in this context. </p>\n<p>The injection context is available in these situations: </p>\n<ul>\n<li>Construction (via the <code>constructor</code>) of a class being instantiated by the DI system, such as an <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> or <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>.</li>\n<li>In the initializer for fields of such classes.</li>\n<li>In the factory function specified for <code>useFactory</code> of a <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> or an <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code>.</li>\n<li>In the <code>factory</code> function specified for an <code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code>.</li>\n<li>Within a stack frame that is run in an injection context.</li>\n</ul>\n<p>Knowing when your are in an injection context, will allow you to use the <a href=\"api/core/inject\"><code>inject</code></a> function to inject instances.</p>\n<h2 id=\"class-constructors\">Class constructors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#class-constructors\"><i class=\"material-icons\">link</i></a></h2>\n<p>Everytime the DI system instantiates a class, this is done in an injection context. This is being handled by the framework itself. The constructor of the class is executed in that runtime context thus allowing to inject a token using the <a href=\"api/core/inject\"><code>inject</code></a> function. </p>\n<code-example language=\"typescript\">\nclass MyComponent  {\n  private service1: Service1;\n  private service2: Service2 = inject(Service2); // In context\n\n  constructor() {\n    this.service1 = inject(HeroService) // In context\n  }\n}\n</code-example>\n<h2 id=\"stack-frame-in-context\">Stack frame in context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#stack-frame-in-context\"><i class=\"material-icons\">link</i></a></h2>\n<p>Some APIs are designed to be run in an injection context. This is the case, for example, of the router guards. It allows the use of <a href=\"api/core/inject\"><code>inject</code></a> to access a service within the guard function. </p>\n<p>Here is an example for <code><a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a></code>\n<code-example format=\"typescript\" language=\"typescript\">\nconst canActivateTeam: <a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a> =\n(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>) => {\nreturn inject(PermissionsService).canActivate(inject(UserToken), route.params.id);\n};\n</code-example></p>\n<h2 id=\"run-within-an-injection-context\">Run within an injection context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#run-within-an-injection-context\"><i class=\"material-icons\">link</i></a></h2>\n<p>When you want to run a given function in an injection context without being in one, you can do it with <code><a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a></code>.\nThis requires to have access to a given injector like the <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> for example.  </p>\n<code-example path=\"dependency-injection/src/app/heroes/hero.service.5.ts\" region=\"run-in-context\" header=\"src/app/heroes/hero.service.ts\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n  private environmentInjector = inject(<a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a>);\n\n  someMethod() {\n    <a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a>(this.environmentInjector, () => {\n      inject(SomeService); // Do what you need with the injected service\n    });\n  }\n}\n\n</code-example>\n<p>Note that <code>inject</code> will return an instance only if the injector can resolve the required token. </p>\n<h2 id=\"asserts-the-context\">Asserts the context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#asserts-the-context\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular provides <code><a href=\"api/core/assertInInjectionContext\" class=\"code-anchor\">assertInInjectionContext</a></code> helper function to assert that the current context is an injection context.</p>\n<h2 id=\"using-di-outside-of-a-context\">Using DI outside of a context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#using-di-outside-of-a-context\"><i class=\"material-icons\">link</i></a></h2>\n<p>Calling <a href=\"api/core/inject\"><code>inject</code></a> or calling <code><a href=\"api/core/assertInInjectionContext\" class=\"code-anchor\">assertInInjectionContext</a></code> outside of an injection context will throw <a href=\"/errors/NG0203\">error NG0203</a>.</p>\n\n  <div class=\"reviewed\">Last reviewed on Tue Apr 11 2023</div>\n</div>\n\n<!-- links to this doc:\n - api/core\n - api/core/CreateEffectOptions\n - api/core/TemplateRef\n - api/core/assertInInjectionContext\n - api/core/runInInjectionContext\n - api/core/rxjs-interop/ToObservableOptions\n - api/core/rxjs-interop/takeUntilDestroyed\n - api/router/withNavigationErrorHandler\n - errors/NG0203\n - guide/dependency-injection-overview\n-->\n<!-- links from this doc:\n - /errors/NG0203\n - api/core/Component\n - api/core/EnvironmentInjector\n - api/core/Injectable\n - api/core/InjectionToken\n - api/core/Provider\n - api/core/assertInInjectionContext\n - api/core/inject\n - api/core/runInInjectionContext\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivateFn\n - api/router/RouterStateSnapshot\n - guide/dependency-injection-context#asserts-the-context\n - guide/dependency-injection-context#class-constructors\n - guide/dependency-injection-context#injection-context\n - guide/dependency-injection-context#run-within-an-injection-context\n - guide/dependency-injection-context#stack-frame-in-context\n - guide/dependency-injection-context#using-di-outside-of-a-context\n-->"
}