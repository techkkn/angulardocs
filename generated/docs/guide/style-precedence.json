{
  "id": "guide/style-precedence",
  "title": "Style Precedence",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"style-precedence\">Style Precedence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#style-precedence\"><i class=\"material-icons\">link</i></a></h1>\n<p>When there are multiple bindings to the same class name or style attribute, Angular uses a set of precedence rules to determine which classes or styles to apply to the element.\nThese rules specify an order for which style and class related bindings have priority.\nThis styling precedence is as follows, from the most specific with the highest priority to least specific with the lowest priority:</p>\n<ol>\n<li>\n<p>Template bindings are the most specific because they apply to the element directly and exclusively, so they have the highest precedence.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Binding type</th>\n<th align=\"left\">Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Property binding</td>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [class.foo]=\"hasFoo\"> </code-example> <code-example format=\"html\" hidecopy=\"\" language=\"html\">&#x3C;div [style.color]=\"color\"> </code-example></td>\n</tr>\n<tr>\n<td align=\"left\">Map binding</td>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [class]=\"classExpression\"> </code-example> <code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\"> </code-example></td>\n</tr>\n<tr>\n<td align=\"left\">Static value</td>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div class=\"foo\"> </code-example> <code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\"> </code-example></td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>Directive host bindings are less specific because you can use directives in multiple locations, so they have a lower precedence than template bindings.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Binding type</th>\n<th align=\"left\">Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Property binding</td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'[class.foo]': 'hasFoo'} </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'[style.color]': 'color'} </code-example></td>\n</tr>\n<tr>\n<td align=\"left\">Map binding</td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'[class]': 'classExpr'} </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]': 'styleExpr'} </code-example></td>\n</tr>\n<tr>\n<td align=\"left\">Static value</td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'class': 'foo'} </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'<a href=\"api/animations/style\" class=\"code-anchor\">style</a>': 'color: blue'} </code-example></td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>Component host bindings have the lowest precedence.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Binding type</th>\n<th align=\"left\">Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Property binding</td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'[class.foo]': 'hasFoo'} </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\">host: {'[style.color]': 'color'} </code-example></td>\n</tr>\n<tr>\n<td align=\"left\">Map binding</td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'[class]': 'classExpression'} </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]': 'styleExpression'} </code-example></td>\n</tr>\n<tr>\n<td align=\"left\">Static value</td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'class': 'foo'} </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'<a href=\"api/animations/style\" class=\"code-anchor\">style</a>': 'color: blue'} </code-example></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<h2 id=\"precedence-and-specificity\">Precedence and specificity<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#precedence-and-specificity\"><i class=\"material-icons\">link</i></a></h2>\n<p>In the following example, binding to a specific class, as in <code>[class.special]</code>, takes precedence over a generic <code>[class]</code> binding.\nSimilarly, binding to a specific style, as in <code>[style.color]</code>, takes precedence over a generic <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> binding.</p>\n<code-example header=\"src/app/app.component.html\" path=\"attribute-binding/src/app/app.component.html\" region=\"basic-specificity\">\n&#x3C;h3>Basic specificity&#x3C;/h3>\n\n&#x3C;!-- The `class.special` binding overrides any value for the `special` class in `classExpression`.  -->\n&#x3C;div [class.special]=\"isSpecial\" [class]=\"classExpression\">Some text.&#x3C;/div>\n\n&#x3C;!-- The `style.border` binding overrides any value for the `border` property in `styleExpression`.  -->\n&#x3C;div [style.border]=\"border\" [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\">Some text.&#x3C;/div>\n\n</code-example>\n<h2 id=\"precedence-and-bindings-from-different-sources\">Precedence and bindings from different sources<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#precedence-and-bindings-from-different-sources\"><i class=\"material-icons\">link</i></a></h2>\n<p>Specificity rules also apply to bindings even when they originate from different sources.\nAn element can have bindings that originate from its own template, from host bindings on matched directives, and from host bindings on matched components.</p>\n<code-example header=\"src/app/app.component.html\" path=\"attribute-binding/src/app/app.component.html\" region=\"source-specificity\">\n&#x3C;h3>Source specificity&#x3C;/h3>\n\n&#x3C;!-- The `class.special` template binding overrides any host binding to the `special` class set by `dirWithClassBinding` or `comp-with-host-binding`.-->\n\n&#x3C;comp-with-host-binding [class.special]=\"isSpecial\" dirWithClassBinding>&#x3C;/comp-with-host-binding>\n\n\n&#x3C;!-- The `style.color` template binding overrides any host binding to the `color` property set by `dirWithStyleBinding` or `comp-with-host-binding`. -->\n&#x3C;div>\n  &#x3C;comp-with-host-binding [style.color]=\"color\" dirWithStyleBinding>&#x3C;/comp-with-host-binding>\n&#x3C;/div>\n\n&#x3C;h3>Dynamic vs <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>&#x3C;/h3>\n\n&#x3C;!-- If `[class.special]` equals false, this value overrides the `class=\"special\"` below -->\n&#x3C;div class=\"special\" [class.special]=\"false\">Some text.&#x3C;/div>\n\n&#x3C;!-- If `styleExpression` has a value for the `border` property, this value overrides the `<a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"border: dotted darkblue 3px\"` below -->\n&#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"border: dotted darkblue 3px\" [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\">Some text.&#x3C;/div>\n\n\n&#x3C;div class=\"readability\">\n  &#x3C;comp-with-host-binding dirWithHostBinding>&#x3C;/comp-with-host-binding>\n&#x3C;/div>\n\n&#x3C;app-my-input-with-attribute-decorator type=\"number\">&#x3C;/app-my-input-with-attribute-decorator>\n\n\n</code-example>\n<h2 id=\"precedence-of-bindings-and-static-attributes\">Precedence of bindings and static attributes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#precedence-of-bindings-and-static-attributes\"><i class=\"material-icons\">link</i></a></h2>\n<p>Bindings take precedence over static attributes because they are dynamic.\nIn the following case, <code>class</code> and <code>[class]</code> have similar specificity, but the <code>[class]</code> binding takes precedence.</p>\n<code-example header=\"src/app/app.component.html\" path=\"attribute-binding/src/app/app.component.html\" region=\"dynamic-priority\">\n&#x3C;h3>Dynamic vs <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>&#x3C;/h3>\n\n&#x3C;!-- If `[class.special]` equals false, this value overrides the `class=\"special\"` below -->\n&#x3C;div class=\"special\" [class.special]=\"false\">Some text.&#x3C;/div>\n\n&#x3C;!-- If `styleExpression` has a value for the `border` property, this value overrides the `<a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"border: dotted darkblue 3px\"` below -->\n&#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"border: dotted darkblue 3px\" [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\">Some text.&#x3C;/div>\n\n\n</code-example>\n<p><a id=\"styling-delegation\"></a></p>\n<h2 id=\"delegating-to-styles-with-lower-precedence\">Delegating to styles with lower precedence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#delegating-to-styles-with-lower-precedence\"><i class=\"material-icons\">link</i></a></h2>\n<p>Higher precedence styles can defer to lower precedence styles using <code>undefined</code> values.\nFor example, consider the following template:</p>\n<code-example header=\"src/app/app.component.html\" path=\"attribute-binding/src/app/app.component.html\" region=\"style-delegation\">\n&#x3C;comp-with-host-binding dirWithHostBinding>&#x3C;/comp-with-host-binding>\n\n</code-example>\n<p>Imagine that the <code>dirWithHostBinding</code> directive and the <code>comp-with-host-binding</code> component both have a <code>[style.width]</code> host binding.</p>\n<code-example header=\"src/app/comp-with-host-binding.component.ts and dirWithHostBinding.directive.ts\" path=\"attribute-binding/src/app/comp-with-host-binding.component.ts\" region=\"hostbinding\">\n@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.width')\nwidth = '200px';\n\n</code-example>\n<p>If <code>dirWithHostBinding</code> sets its binding to <code>undefined</code>, the <code>width</code> property falls back to the value of the <code>comp-with-host-binding</code> host binding.</p>\n<code-example format=\"typescript\" header=\"dirWithHostBinding directive\" language=\"typescript\">\n\n@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.width')\nwidth = ''; // undefined\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>If <code>dirWithHostBinding</code> sets its binding to <code>null</code>, Angular removes the <code>width</code> property entirely.</p>\n<code-example format=\"typescript\" header=\"dirWithHostBinding\" language=\"typescript\">\n\n@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.width')\nwidth = null;\n\n</code-example>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Mon Feb 28 2022</div>\n</div>\n\n<!-- links to this doc:\n - guide/class-binding\n-->\n<!-- links from this doc:\n - api/animations/style\n - api/core/HostBinding\n - api/upgrade/static\n - guide/style-precedence#delegating-to-styles-with-lower-precedence\n - guide/style-precedence#precedence-and-bindings-from-different-sources\n - guide/style-precedence#precedence-and-specificity\n - guide/style-precedence#precedence-of-bindings-and-static-attributes\n - guide/style-precedence#style-precedence\n-->"
}