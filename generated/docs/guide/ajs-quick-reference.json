{
  "id": "guide/ajs-quick-reference",
  "title": "AngularJS to Angular concepts: Quick reference",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"angularjs-to-angular-concepts-quick-reference\">AngularJS to Angular concepts: Quick reference<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#angularjs-to-angular-concepts-quick-reference\"><i class=\"material-icons\">link</i></a></h1>\n<p><em>Angular</em> is the name for the Angular of today and tomorrow.</p>\n<p><em>AngularJS</em> is the name for all v1.x versions of Angular.</p>\n<p>This guide helps you transition from AngularJS to Angular\nby mapping AngularJS syntax to the corresponding Angular syntax.</p>\n<p><strong>See the Angular syntax in this <live-example name=\"ajs-quick-reference\"></live-example></strong>.</p>\n<h2 id=\"template-basics\">Template basics<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#template-basics\"><i class=\"material-icons\">link</i></a></h2>\n<p>Templates are the user-facing part of an Angular application and are written in HTML.\nThe following table lists some of the key AngularJS template features with their corresponding Angular template syntax.</p>\n<h3 id=\"bindings--interpolation--bindings--interpolation\">Bindings / interpolation → bindings / interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bindings--interpolation--bindings--interpolation\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>Bindings/interpolation</header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> Your favorite hero is: {{vm.favoriteHero}} </code-example> In AngularJS, an expression in curly braces denotes one-way binding. This binds the value of the element to a property in the controller associated with this template. <br> When using the <code>controller as</code> syntax, the binding is prefixed with the controller alias <code>vm</code> or <code>$ctrl</code> because you have to be specific about the source.</td>\n<td align=\"left\"><header>Bindings/interpolation</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"interpolation\">\nYour favorite hero is: {{favoriteHero}}\n\n</code-example> In Angular, a template expression in curly braces still denotes one-way binding. This binds the value of the element to a property of the component. The context of the binding is implied and is always the associated component, so it needs no reference variable. <br> For more information, see the <a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">Interpolation</a> guide.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"filters--pipes\">Filters → pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filters--pipes\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>Filters</header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} \n &#x3C;/td> </code-example> To filter output in AngularJS templates, use the pipe <code>|</code> character and one or more filters. <br> This example filters the <code>title</code> property to uppercase.</td>\n<td align=\"left\"><header>Pipes</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"uppercase\">\n&#x3C;td>{{movie.title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}&#x3C;/td>\n\n</code-example> In Angular you use similar syntax with the pipe <code>|</code> character to filter output, but now you call them <strong>pipes</strong>. Many, but not all, of the built-in filters from AngularJS are built-in pipes in Angular. <br> For more information, see <a href=\"guide/ajs-quick-reference#filters--pipes\" title=\"Filters/pipes - AngularJS to Angular concepts: Quick reference | Angular\">Filters/pipes</a>.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"local-variables--input-variables\">Local variables → input variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#local-variables--input-variables\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>Local variables</header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in vm.movies\"> \n  &#x3C;td> \n    {{movie.title}} \n  &#x3C;/td> \n&#x3C;/tr> </code-example> Here, <code>movie</code> is a user-defined local variable.</td>\n<td align=\"left\"><header>Input variables</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"local\">\n&#x3C;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies\">\n  &#x3C;td>{{movie.title}}&#x3C;/td>\n&#x3C;/tr>\n\n</code-example> Angular has true template input variables that are explicitly defined using the <code>let</code> keyword. <br> For more information, see the <a href=\"guide/structural-directives#structural-directive-shorthand\" title=\"Structural directive shorthand - Writing structural directives | Angular\">Structural directive shorthand</a> section of <a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">Structural Directives</a>.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"template-directives\">Template directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#template-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p>AngularJS provides more than seventy built-in directives for templates.\nMany of them are not needed in Angular because of its more capable and expressive binding system.\nThe following are some of the key AngularJS built-in directives and their equivalents in Angular.</p>\n<h3 id=\"ng-app--bootstrapping\"><code>ng-app</code> → bootstrapping<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-app--bootstrapping\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-app</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;body ng-app=\"movieHunter\"> </code-example> The application startup process is called <strong>bootstrapping</strong>. <br> Although you can bootstrap an AngularJS application in code, many applications bootstrap declaratively with the <code>ng-app</code> directive, giving it the name of the module (<code>movieHunter</code>) of the application.</td>\n<td align=\"left\"><header>Bootstrapping</header> <code-example header=\"main.ts\" format=\"typescript\" hidecopy=\"\" language=\"typescript\" path=\"ajs-quick-reference/src/main.ts\">Angular does not have a bootstrap directive. To launch the application in code, explicitly bootstrap the application's root component (<code>AppComponent</code>) in <code>main.ts</code>.</code-example></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-class--ngclass\"><code>ng-class</code> → <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-class--ngclass\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-class</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;div ng-class=\"{active: isActive}\"> \n &#x3C;div ng-class=\"{active: isActive, shazam: isImportant}\"> </code-example> In AngularJS, the <code>ng-class</code> directive includes/excludes CSS classes based on an expression. The expression is often a key-value object, with key defined as a CSS class name, and value as a template expression that evaluates to a Boolean. <br> In the first example, the <code>active</code> class is applied to the element if <code>isActive</code> is true. <br> You can specify multiple classes, as shown in the second example.</td>\n<td align=\"left\"><header><code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"ngClass\">\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive}\">\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive,\n                 'shazam': isImportant}\">\n&#x3C;div [class.active]=\"isActive\">\n\n</code-example> In Angular, the <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> directive works similarly. It includes/excludes CSS classes based on an expression. <br> In the first example, the <code>active</code> class is applied to the element if <code>isActive</code> is true. <br> You can specify multiple classes, as shown in the second example. <br> Angular also has <strong>class binding</strong>, which is a good way to add or remove a single class, as shown in the third example. <br> For more information see <a href=\"guide/attribute-binding\" title=\"Attribute, class, and style bindings | Angular\">Attribute, class, and style bindings</a> page.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-click--bind-to-the-click-event\"><code>ng-click</code> → Bind to the <code>click</code> event<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-click--bind-to-the-click-event\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-click</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;button ng-click=\"vm.toggleImage()\"> \n &#x3C;button ng-click=\"vm.toggleImage($event)\"> </code-example> In AngularJS, the <code>ng-click</code> directive allows you to specify custom behavior when an element is clicked. <br> In the first example, when the user clicks the button, the <code>toggleImage()</code> method in the controller referenced by the <code>vm</code> <code>controller as</code> alias is executed. <br> The second example demonstrates passing in the <code>$event</code> object, which provides details about the event to the controller.</td>\n<td align=\"left\"><header>Bind to the <code>click</code> event</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"event-binding\">\n&#x3C;button type=\"button\" (click)=\"toggleImage()\">\n&#x3C;button type=\"button\" (click)=\"toggleImage($event)\">\n\n</code-example> AngularJS event-based directives do not exist in Angular. Rather, define one-way binding from the template view to the component using <strong>event binding</strong>. <br> For event binding, define the name of the target event within parenthesis and specify a template statement, in quotes, to the right of the equals. Angular then sets up an event handler for the target event. When the event is raised, the handler executes the template statement. <br> In the first example, when a user clicks the button, the <code>toggleImage()</code> method in the associated component is executed. <br> The second example demonstrates passing in the <code>$event</code> object, which provides details about the event to the component. <br> For a list of DOM events, see <a href=\"https://developer.mozilla.org/docs/Web/Events\" title=\"Event reference | MDN\">Event reference</a>. <br> For more information, see the <a href=\"guide/event-binding\" title=\"Event binding | Angular\">Event binding</a> page.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-controller--component-decorator\"><code>ng-controller</code> → component decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-controller--component-decorator\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-controller</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;div ng-controller=\"MovieListCtrl as vm\"> </code-example> In AngularJS, the <code>ng-controller</code> directive attaches a controller to the view. Using the <code>ng-controller</code>, or defining the controller as part of the routing, ties the view to the controller code associated with that view.</td>\n<td align=\"left\"><header>Component decorator</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  imports: [\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>, <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>, <a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a>, <a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a>, <a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a>,\n    <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">CurrencyPipe</a>, <a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a>, <a href=\"api/common/DecimalPipe\" class=\"code-anchor\">DecimalPipe</a>, <a href=\"api/common/PercentPipe\" class=\"code-anchor\">PercentPipe</a>, <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>\n  ],\n  styleUrls: [ './movie-list.component.css' ],\n})\n\n</code-example> In Angular, the template no longer specifies its associated controller. Rather, the component specifies its associated template as part of the component class decorator. <br> For more information, see <a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">Architecture Overview</a>.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-hide--bind-to-the-hidden-property\"><code>ng-hide</code> → Bind to the <code>hidden</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-hide--bind-to-the-hidden-property\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-hide</code></header> In AngularJS, the <code>ng-hide</code> directive shows or hides the associated HTML element based on an expression. For more information, see <a href=\"guide/ajs-quick-reference#template-directives\" title=\"Template directives - AngularJS to Angular concepts: Quick reference | Angular\">ng-show</a>.</td>\n<td align=\"left\"><header>Bind to the <code>hidden</code> property</header> In Angular, you use property binding. Angular does not have a built-in <em>hide</em> directive. For more information, see <a href=\"guide/ajs-quick-reference#template-directives\" title=\"Template directives - AngularJS to Angular concepts: Quick reference | Angular\">ng-show</a>.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-href--bind-to-the-href-property\"><code>ng-href</code> → Bind to the <code>href</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-href--bind-to-the-href-property\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-href</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;a ng-href=\"{{ angularDocsUrl }}\"> \n   Angular Docs \n &#x3C;/a> </code-example> The <code>ng-href</code> directive allows AngularJS to preprocess the <code>href</code> property. <code>ng-href</code> can replace the binding expression with the appropriate URL before the browser fetches from that URL. <br> In AngularJS, the <code>ng-href</code> is often used to activate a route as part of navigation. <br> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;a ng-href=\"#{{ moviesHash }}\"> \n  Movies \n&#x3C;/a> </code-example> Routing is handled differently in Angular.</td>\n<td align=\"left\"><header>Bind to the <code>href</code> property</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"href\">\n&#x3C;a [href]=\"angularDocsUrl\">Angular Docs&#x3C;/a>\n\n</code-example> Angular uses property binding. Angular does not have a built-in <em>href</em> directive. Place the <code>href</code> property of the element in square brackets and set it to a quoted template expression. For more information see the <a href=\"guide/property-binding\" title=\"Property binding | Angular\">Property binding</a> page. In Angular, <code>href</code> is no longer used for routing. Routing uses <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>, as shown in the following example. <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"router-link\">\n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/movies']\">Movies&#x3C;/a>\n\n</code-example> For more information on routing, see <a href=\"guide/router#defining-a-basic-route\" title=\"Defining a basic route - Common Routing Tasks | Angular\">Defining a basic route</a> in the <a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">Routing &#x26; Navigation</a> page.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-if--ngif\"><code>ng-if</code> → <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-if--ngif\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-if</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;table ng-if=\"movies.length\"> </code-example> In AngularJS, the <code>ng-if</code> directive removes or recreates a section of the DOM, based on an expression. If the expression is false, the element is removed from the DOM. <br> In this example, the <code>&#x3C;table></code> element is removed from the DOM unless the <code>movies</code> array has a length greater than zero.</td>\n<td align=\"left\"><header><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngIf\">\n&#x3C;table *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"movies.length\">\n\n</code-example> The <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive in Angular works the same as the <code>ng-if</code> directive in AngularJS. It removes or recreates a section of the DOM based on an expression. <br> In this example, the <code>&#x3C;table></code> element is removed from the DOM unless the <code>movies</code> array has a length. <br> The (<code>*</code>) before <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> is required in this example. For more information, see <a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">Structural Directives</a>.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-model--ngmodel\"><code>ng-model</code> → <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-model--ngmodel\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-model</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;input ng-model=\"vm.favoriteHero\" /> </code-example> In AngularJS, the <code>ng-model</code> directive binds a form control to a property in the controller associated with the template. This provides <strong>two-way binding</strong> whereby changes result in the value in the view and the model being synchronized.</td>\n<td align=\"left\"><header><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngModel\">\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"favoriteHero\" />\n\n</code-example> In Angular, <strong>two-way binding</strong> is indicated by <code>[()]</code>, descriptively referred to as a \"banana in a box.\" This syntax is a shortcut for defining both:<ul><li>property binding, from the component to the view</li><li>event binding, from the view to the component</li></ul> thereby providing two-way binding. <br> For more information on two-way binding with <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>, see the <a href=\"guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\" title=\"Displaying and updating properties with ngModel - Built-in directives | Angular\">Displaying and updating properties with <code>ngModel</code></a> section of <a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">Built-in directives</a>.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-repeat--ngfor\"><code>ng-repeat</code> → <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-repeat--ngfor\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-repeat</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in vm.movies\"> </code-example> In AngularJS, the <code>ng-repeat</code> directive repeats the associated DOM element for each item in the specified collection. <br> In this example, the table row (<code>&#x3C;tr></code>) element repeats for each movie object in the collection of movies.</td>\n<td align=\"left\"><header><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngFor\">\n&#x3C;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies\">\n\n</code-example> The <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> directive in Angular is like the <code>ng-repeat</code> directive in AngularJS. It repeats the associated DOM element for each item in the specified collection. More accurately, it turns the defined element (<code>&#x3C;tr></code> in this example) and its contents into a template and uses that template to instantiate a view for each item in the list. <br> Notice the other syntax differences: <ul><li>The (<code>*</code>) before <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> is required</li><li>The <code>let</code> keyword identifies <code>movie</code> as an input variable</li><li>The list preposition is <code>of</code>, not <code>in</code></li></ul>For more information, see <a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">Structural Directives</a>.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-show--bind-to-the-hidden-property\"><code>ng-show</code> → Bind to the <code>hidden</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-show--bind-to-the-hidden-property\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-show</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;h3 ng-show=\"vm.favoriteHero\"> \n   Your favorite hero is: {{vm.favoriteHero}} \n &#x3C;/h3> </code-example> In AngularJS, the <code>ng-show</code> directive shows or hides the associated DOM element, based on an expression. <br> In this example, the <code>&#x3C;div></code> element is shown if the <code>favoriteHero</code> variable is truthy.</td>\n<td align=\"left\"><header>Bind to the <code>hidden</code> property</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"hidden\">\n&#x3C;h3 [hidden]=\"!favoriteHero\">\n  Your favorite hero is: {{favoriteHero}}\n&#x3C;/h3>\n\n</code-example> Angular uses property binding. Angular has no built-in <em>show</em> directive. For hiding and showing elements, bind to the HTML <code>hidden</code> property. <br> To conditionally display an element the <code>hidden</code> property of the element can be used. Place the <code>hidden</code> property in square brackets and set it to a quoted template expression that evaluates to the <em>opposite</em> of <em>show</em>. <br> In this example, the <code>&#x3C;div></code> element is hidden if the <code>favoriteHero</code> variable is not truthy. <br> For more information on property binding, see the <a href=\"guide/property-binding\" title=\"Property binding | Angular\">Property binding</a> page.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-src--bind-to-the-src-property\"><code>ng-src</code> → Bind to the <code>src</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-src--bind-to-the-src-property\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-src</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> ng-src=\"{{movie.imageurl}}\"> </code-example> The <code>ng-src</code> directive allows AngularJS to preprocess the <code>src</code> property. This replaces the binding expression with the appropriate URL before the browser fetches from that URL.</td>\n<td align=\"left\"><header>Bind to the <code>src</code> property</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"src\">\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> [src]=\"movie.imageurl\" [alt]=\"movie.title\">\n\n</code-example> Angular uses property binding. Angular has no built-in <em>src</em> directive. Place the <code>src</code> property in square brackets and set it to a quoted template expression. <br> For more information on property binding, see the <a href=\"guide/property-binding\" title=\"Property binding | Angular\">Property binding</a> page.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-style--ngstyle\"><code>ng-style</code> → <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-style--ngstyle\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-style</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;div ng-style=\"{color: colorPreference}\"> </code-example> In AngularJS, the <code>ng-style</code> directive sets a CSS style on an HTML element based on an expression. That expression is often a key-value control object with: <ul><li> each key of the object defined as a CSS property</li><li>each value defined as an expression that evaluates to a value appropriate for the style</li></ul> In the example, the <code>color</code> style is set to the current value of the <code>colorPreference</code> variable.</td>\n<td align=\"left\"><header><code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"ngStyle\">\n&#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"{'color': colorPreference}\">\n&#x3C;div [style.color]=\"colorPreference\">\n\n</code-example> In Angular, the <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> directive works similarly. It sets a CSS style on an HTML element based on an expression. <br> In the first example, the <code>color</code> style is set to the current value of the <code>colorPreference</code> variable. <br> Angular also has <strong>style binding</strong>, which is good way to set a single style. This is shown in the second example. <br> For more information on style binding, see the <a href=\"guide/class-binding\" title=\"Class and style binding | Angular\">Style binding</a> section of the <a href=\"guide/attribute-binding\" title=\"Attribute, class, and style bindings | Angular\">Attribute binding</a> page. <br> For more information on the <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> directive, see the <a href=\"guide/built-in-directives#setting-inline-styles-with-ngstyle\" title=\"Setting inline styles with NgStyle - Built-in directives | Angular\">NgStyle</a> section of the <a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">Built-in directives</a> page.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ng-switch--ngswitch\"><code>ng-switch</code> → <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-switch--ngswitch\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>ng-switch</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;div ng-switch=\"vm.favoriteHero &#x26;&#x26; vm.checkMovieHero(vm.favoriteHero)\"> \n   &#x3C;div ng-switch-when=\"true\"> \n     Excellent choice. \n   &#x3C;/div> \n   &#x3C;div ng-switch-when=\"false\"> \n     No movie, sorry. \n   &#x3C;/div> \n   &#x3C;div ng-switch-default> \n     Please enter your favorite hero. \n   &#x3C;/div> \n &#x3C;/div> </code-example> In AngularJS, the <code>ng-switch</code> directive swaps the contents of an element by selecting one of the templates based on the current value of an expression. <br> In this example, if <code>favoriteHero</code> is not set, the template displays \"Please enter …\" If <code>favoriteHero</code> is set, it checks the movie hero by calling a controller method. If that method returns <code>true</code>, the template displays \"Excellent choice!\" If that methods returns <code>false</code>, the template displays \"No movie, sorry!\"</td>\n<td align=\"left\"><header><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngSwitch\">\n&#x3C;span [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"favoriteHero &#x26;&#x26;\n               checkMovieHero(favoriteHero)\">\n  &#x3C;p *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"true\">\n    Excellent choice!\n  &#x3C;/p>\n  &#x3C;p *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"false\">\n    No movie, sorry!\n  &#x3C;/p>\n  &#x3C;p *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>>\n    Please enter your favorite hero.\n  &#x3C;/p>\n&#x3C;/span>\n\n</code-example> In Angular, the <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> directive works similarly. It displays an element whose <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> matches the current <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> expression value. <br> In this example, if <code>favoriteHero</code> is not set, the <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> value is <code>null</code> and <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> displays, \"Please enter your favorite hero.\" If <code>favoriteHero</code> is set, the application checks the movie hero by calling a component method. If that method returns <code>true</code>, the application selects <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"true\"</code> and displays: \"Excellent choice.\" If that methods returns <code>false</code>, the application selects <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"false\"</code> and displays: \"No movie, sorry.\" <br> The (<code>*</code>) before <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> is required in this example. <br> For more information, see <a href=\"guide/built-in-directives#switching-cases-with-ngswitch\" title=\"Switching cases with NgSwitch - Built-in directives | Angular\">The NgSwitch directives</a> section of the <a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">Built-in directives</a> page.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"filters--pipes-1\">Filters / pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filters--pipes-1\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular <strong>pipes</strong> provide formatting and transformation for data in the template, like AngularJS <strong>filters</strong>.\nMany of the built-in filters in AngularJS have corresponding pipes in Angular.\nFor more information on pipes, see <a href=\"guide/pipes\" title=\"Transforming Data Using Pipes | Angular\">Pipes</a>.</p>\n<h3 id=\"currency--currency\"><code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code> → <code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#currency--currency\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>}} \n &#x3C;/td> </code-example> Formats a number as currency.</td>\n<td align=\"left\"><header><code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"currency\">\n&#x3C;td>{{movie.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'USD':true}}&#x3C;/td>\n\n</code-example> The Angular <code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code> pipe is similar although some of the parameters have changed.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"date--date\"><code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> → <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#date--date\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.releaseDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}} \n &#x3C;/td> </code-example> Formats a date to a string based on the requested format.</td>\n<td align=\"left\"><header><code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"date\">\n&#x3C;td>{{movie.releaseDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}}&#x3C;/td>\n\n</code-example> The Angular <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> pipe is similar.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"filter--none\"><code>filter</code> → none<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filter--none\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>filter</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in movieList | filter: {title:listFilter}\"> </code-example> Selects a subset of items from the defined collection, based on the filter criteria.</td>\n<td align=\"left\"><header>none</header> For performance reasons, no comparable pipe exists in Angular. Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"json--json\"><code>json</code> → <code>json</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#json--json\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>json</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;pre> \n   {{movie | json}} \n &#x3C;/pre> </code-example> Converts a JavaScript object into a JSON string. This is useful for debugging.</td>\n<td align=\"left\"><header><code>json</code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"json\">\n&#x3C;pre>{{movie | json}}&#x3C;/pre>\n\n</code-example> The Angular <a href=\"api/common/JsonPipe\" title=\"JsonPipe | @angular/common - API | Angular\"><code>json</code></a> pipe does the same thing.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"limitto--slice\"><code>limitTo</code> → <code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#limitto--slice\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>limitTo</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in movieList | limitTo:2:0\"> </code-example> Selects up to the first parameter <code>2</code> number of items from the collection starting optionally at the beginning index <code>0</code>.</td>\n<td align=\"left\"><header><code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"slice\">\n&#x3C;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies | <a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a>:0:2\">\n\n</code-example> The <code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">SlicePipe</a></code> does the same thing but the <em>order of the parameters is reversed</em>, in keeping with the JavaScript <code>Slice</code> method. The first parameter is the starting index and the second is the limit. As in AngularJS, coding this operation within the component instead could improve performance.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"lowercase--lowercase\"><code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code> → <code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#lowercase--lowercase\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.title | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}} \n &#x3C;/td> </code-example> Converts the string to lowercase.</td>\n<td align=\"left\"><header><code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"lowercase\">\n&#x3C;td>{{movie.title | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}}&#x3C;/td>\n\n</code-example> The Angular <code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code> pipe does the same thing.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"number--number\"><code>number</code> → <code>number</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#number--number\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>number</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;td> \n   {{movie.starRating | number}} \n &#x3C;/td> </code-example> Formats a number as text.</td>\n<td align=\"left\"><header><code>number</code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"number\">\n&#x3C;td>{{movie.starRating | number}}&#x3C;/td>\n&#x3C;td>{{movie.starRating | number:'1.1-2'}}&#x3C;/td>\n&#x3C;td>{{movie.approvalRating | <a href=\"api/common/PercentPipe\" class=\"code-anchor\">percent</a>: '1.0-2'}}&#x3C;/td>\n\n</code-example> The Angular <a href=\"api/common/DecimalPipe\" title=\"DecimalPipe | @angular/common - API | Angular\"><code>number</code></a> pipe is similar. It provides more capabilities when defining the decimal places, as shown in the preceding second example. <br> Angular also has a <code><a href=\"api/common/PercentPipe\" class=\"code-anchor\">percent</a></code> pipe, which formats a number as a local percentage as shown in the third example.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"orderby--none\"><code>orderBy</code> → none<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#orderby--none\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>orderBy</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;tr ng-repeat=\"movie in movieList | orderBy : 'title'\"> </code-example> Displays the collection in the order specified by the expression. In this example, the movie title orders the <code>movieList</code>.</td>\n<td align=\"left\"><header>none</header> For performance reasons, no comparable pipe exists in Angular. Instead, use component code to order or sort results. If you need the same ordering or sorting code in several templates, consider building a custom pipe.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"controllers-and-components\">Controllers and Components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#controllers-and-components\"><i class=\"material-icons\">link</i></a></h2>\n<p>In AngularJS, you write the code that provides the model and the methods for the view in a <strong>controller</strong>.</p>\n<p>In Angular, you build a <strong>component</strong> which typically acquires its model from an <strong>injected service</strong>.</p>\n<p>Because much AngularJS code is in JavaScript, JavaScript code is shown in the AngularJS column.\nThe Angular code is shown using TypeScript.</p>\n<h3 id=\"immediately-invoked-function-expression-iife--none\">Immediately invoked function expression (IIFE) → none<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#immediately-invoked-function-expression-iife--none\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>IIFE</header> <code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> ( \n  function () { \n    … \n  }() \n); </code-example> In AngularJS, an IIFE around controller code keeps it out of the global namespace.</td>\n<td align=\"left\"><header>none</header> This is a nonissue in Angular because ES 2015 modules handle the namespace for you.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"controller-registration--component-decorator\">Controller registration → component decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#controller-registration--component-decorator\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>Controller registration</header> <code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> angular .module( \n  \"movieHunter\" \n) .controller( \n  \"MovieListCtrl\", \n  [ \n    \"movieService\", \n    MovieListCtrl \n  ] \n); </code-example> AngularJS has code in each controller that looks up an appropriate AngularJS module and registers the controller with that module. <br> The first argument is the controller name. The second argument defines the string names of all dependencies injected into this controller, and a reference to the controller function.</td>\n<td align=\"left\"><header>Component decorator</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  imports: [\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>, <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>, <a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a>, <a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a>, <a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a>,\n    <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">CurrencyPipe</a>, <a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a>, <a href=\"api/common/DecimalPipe\" class=\"code-anchor\">DecimalPipe</a>, <a href=\"api/common/PercentPipe\" class=\"code-anchor\">PercentPipe</a>, <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>\n  ],\n  styleUrls: [ './movie-list.component.css' ],\n})\n\n</code-example> Angular adds a decorator to the component class to provide any required metadata. The <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator declares that the class is a component and provides metadata about that component such as its selector, or tag, and its template. <br> This is how you associate a template with logic, which is defined in the component class. <br> For more information, see the <a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">Components</a> section of the <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">Architecture Overview</a> page.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"controller-function--component-class\">Controller function → component class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#controller-function--component-class\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>Controller function</header> <code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> function MovieListCtrl(movieService) { \n } </code-example> In AngularJS, you write the code for the model and methods in a controller function.</td>\n<td align=\"left\"><header>Component class</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"class\">\nexport class MovieListComponent {\n}\n\n</code-example> In Angular, you create a component class to contain the data model and control methods. Use the TypeScript <code>export</code> keyword to export the class so that the component can be imported into other classes. <br> For more information, see the <a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">Components</a> section of the <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">Architecture Overview</a> page.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"dependency-injection--dependency-injection\">Dependency injection → dependency injection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#dependency-injection--dependency-injection\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header>Dependency injection</header> <code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> MovieListCtrl.$inject = [ \n  'MovieService' \n]; \nfunction MovieListCtrl(movieService) { \n} </code-example> In AngularJS, you pass in any dependencies as controller function arguments. This example injects a <code>MovieService</code>. <br> To guard against minification problems, tell Angular explicitly that it should inject an instance of the <code>MovieService</code> in the first parameter.</td>\n<td align=\"left\"><header>Dependency injection</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"di\">\nconstructor(movieService: MovieService) {\n}\n\n</code-example> In Angular, you pass in dependencies as arguments to the component class constructor. This example injects a <code>MovieService</code>. The TypeScript type of the first parameter tells Angular what to inject, even after minification. <br> For more information, see the <a href=\"guide/architecture#services-and-dependency-injection\" title=\"Services and dependency injection - Introduction to Angular concepts | Angular\">Dependency injection</a> section of the <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">Architecture Overview</a>.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"style-sheets\">Style sheets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#style-sheets\"><i class=\"material-icons\">link</i></a></h2>\n<p>Style sheets give your application a nice look.\nIn AngularJS, you specify the style sheets for your entire application.\nAs the application grows over time, the styles for the many parts of the application merge, which can cause unexpected results.\nIn Angular, you can still define style sheets for your entire application.\nNow you can also encapsulate a style sheet within a specific component.</p>\n<h3 id=\"link-tag--styles-configuration-or-styleurls\"><code>Link</code> tag → <code>styles</code> configuration or <code>styleUrls</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#link-tag--styles-configuration-or-styleurls\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><header><code>Link</code> tag</header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &#x3C;link href=\"styles.css\" \n      rel=\"stylesheet\" /> </code-example> AngularJS, uses a <code>link</code> tag in the head section of the <code>index.html</code> file to define the styles for the application.</td>\n<td align=\"left\"><header><code>styles</code> configuration</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/.angular-cli.1.json\" region=\"styles\">\n\"styles\": [\n  \"styles.css\"\n],\n\n</code-example> With the Angular CLI, you can configure your global styles in the <code>angular.json</code> file. You can rename the extension to <code>.scss</code> to use sass. <br><br> <header><code>styleUrls</code></header> In Angular, you can use the <code>styles</code> or <code>styleUrls</code> property of the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata to define a style sheet for a particular component. <br> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"style-url\">\nstyleUrls: [ './movie-list.component.css' ],\n\n</code-example> This allows you to set appropriate styles for individual components that do not leak into other parts of the application.</td>\n</tr>\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Mon Sep 25 2023</div>\n</div>\n\n<!-- links to this doc:\n - guide/example-apps-list\n-->\n<!-- links from this doc:\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/DecimalPipe\n - api/common/JsonPipe\n - api/common/LowerCasePipe\n - api/common/NgClass\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgOptimizedImage\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/common/PercentPipe\n - api/common/SlicePipe\n - api/common/UpperCasePipe\n - api/core/Component\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/router/RouterLink\n - guide/ajs-quick-reference#angularjs-to-angular-concepts-quick-reference\n - guide/ajs-quick-reference#bindings--interpolation--bindings--interpolation\n - guide/ajs-quick-reference#controller-function--component-class\n - guide/ajs-quick-reference#controller-registration--component-decorator\n - guide/ajs-quick-reference#controllers-and-components\n - guide/ajs-quick-reference#currency--currency\n - guide/ajs-quick-reference#date--date\n - guide/ajs-quick-reference#dependency-injection--dependency-injection\n - guide/ajs-quick-reference#filter--none\n - guide/ajs-quick-reference#filters--pipes\n - guide/ajs-quick-reference#filters--pipes-1\n - guide/ajs-quick-reference#immediately-invoked-function-expression-iife--none\n - guide/ajs-quick-reference#json--json\n - guide/ajs-quick-reference#limitto--slice\n - guide/ajs-quick-reference#link-tag--styles-configuration-or-styleurls\n - guide/ajs-quick-reference#local-variables--input-variables\n - guide/ajs-quick-reference#lowercase--lowercase\n - guide/ajs-quick-reference#ng-app--bootstrapping\n - guide/ajs-quick-reference#ng-class--ngclass\n - guide/ajs-quick-reference#ng-click--bind-to-the-click-event\n - guide/ajs-quick-reference#ng-controller--component-decorator\n - guide/ajs-quick-reference#ng-hide--bind-to-the-hidden-property\n - guide/ajs-quick-reference#ng-href--bind-to-the-href-property\n - guide/ajs-quick-reference#ng-if--ngif\n - guide/ajs-quick-reference#ng-model--ngmodel\n - guide/ajs-quick-reference#ng-repeat--ngfor\n - guide/ajs-quick-reference#ng-show--bind-to-the-hidden-property\n - guide/ajs-quick-reference#ng-src--bind-to-the-src-property\n - guide/ajs-quick-reference#ng-style--ngstyle\n - guide/ajs-quick-reference#ng-switch--ngswitch\n - guide/ajs-quick-reference#number--number\n - guide/ajs-quick-reference#orderby--none\n - guide/ajs-quick-reference#style-sheets\n - guide/ajs-quick-reference#template-basics\n - guide/ajs-quick-reference#template-directives\n - guide/architecture\n - guide/architecture#components\n - guide/architecture#services-and-dependency-injection\n - guide/attribute-binding\n - guide/built-in-directives\n - guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\n - guide/built-in-directives#setting-inline-styles-with-ngstyle\n - guide/built-in-directives#switching-cases-with-ngswitch\n - guide/class-binding\n - guide/event-binding\n - guide/interpolation\n - guide/pipes\n - guide/property-binding\n - guide/router\n - guide/router#defining-a-basic-route\n - guide/structural-directives\n - guide/structural-directives#structural-directive-shorthand\n - https://developer.mozilla.org/docs/Web/Events\n-->"
}