{
  "id": "guide/two-way-binding",
  "title": "Two-way binding",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"two-way-binding\">Two-way binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#two-way-binding\"><i class=\"material-icons\">link</i></a></h1>\n<p>Two-way binding gives components in your application a way to share data.\nUse two-way binding to listen for events and update values simultaneously between parent and child components.</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n</div>\n<h2 id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p>To get the most out of two-way binding, you should have a basic understanding of the following concepts:</p>\n<ul>\n<li><a href=\"guide/property-binding\">Property binding</a></li>\n<li><a href=\"guide/event-binding\">Event binding</a></li>\n<li><a href=\"guide/inputs-outputs\">Inputs and Outputs</a></li>\n</ul>\n<p>Two-way binding combines property binding with event binding:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Bindings</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"guide/property-binding\">Property binding</a></td>\n<td align=\"left\">Sets a specific element property.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/event-binding\">Event binding</a></td>\n<td align=\"left\">Listens for an element change event.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"adding-two-way-data-binding\">Adding two-way data binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#adding-two-way-data-binding\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular's two-way binding syntax is a combination of square brackets and parentheses, <code>[()]</code>.\nThe <code>[()]</code> syntax combines the brackets of property binding, <code>[]</code>, with the parentheses of event binding, <code>()</code>, as follows.</p>\n<code-example header=\"src/app/app.component.html\" path=\"two-way-binding/src/app/app.component.html\" region=\"two-way-syntax\">\n&#x3C;app-sizer [(size)]=\"fontSizePx\">&#x3C;/app-sizer>\n\n</code-example>\n<h2 id=\"how-two-way-binding-works\">How two-way binding works<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#how-two-way-binding-works\"><i class=\"material-icons\">link</i></a></h2>\n<p>For two-way data binding to work, the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> property must use the pattern, <code>inputChange</code>, where <code>input</code> is the name of the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property.\nFor example, if the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property is <code>size</code>, the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> property must be <code>sizeChange</code>.</p>\n<p>The following <code>sizerComponent</code> has a <code>size</code> value property and a <code>sizeChange</code> event.\nThe <code>size</code> property is an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, so data can flow into the <code>sizerComponent</code>.\nThe <code>sizeChange</code> event is an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, which lets data flow out of the <code>sizerComponent</code> to the parent component.</p>\n<p>Next, there are two methods, <code>dec()</code> to decrease the font size and <code>inc()</code> to increase the font size.\nThese two methods use <code>resize()</code> to change the value of the <code>size</code> property within min/max value constraints, and to emit an event that conveys the new <code>size</code> value.</p>\n<code-example header=\"src/app/sizer.component.ts\" path=\"two-way-binding/src/app/sizer/sizer.component.ts\" region=\"sizer-component\">\nexport class SizerComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() size!: number | string;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() sizeChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;number>();\n\n  dec() {\n    this.resize(-1);\n  }\n  inc() {\n    this.resize(+1);\n  }\n\n  resize(delta: number) {\n    this.size = Math.min(40, Math.max(8, +this.size + delta));\n    this.sizeChange.emit(this.size);\n  }\n}\n\n</code-example>\n<p>The <code>sizerComponent</code> template has two buttons that each bind the click event to the <code>inc()</code> and <code>dec()</code> methods.\nWhen the user clicks one of the buttons, the <code>sizerComponent</code> calls the corresponding method.\nBoth methods, <code>inc()</code> and <code>dec()</code>, call the <code>resize()</code> method with a <code>+1</code> or <code>-1</code>, which in turn raises the <code>sizeChange</code> event with the new size value.</p>\n<code-example header=\"src/app/sizer.component.html\" path=\"two-way-binding/src/app/sizer/sizer.component.html\">\n&#x3C;div>\n  &#x3C;button type=\"button\" (click)=\"dec()\" title=\"smaller\">-&#x3C;/button>\n  &#x3C;button type=\"button\" (click)=\"inc()\" title=\"bigger\">+&#x3C;/button>\n  &#x3C;span [style.font-size.px]=\"size\">FontSize: {{size}}px&#x3C;/span>\n&#x3C;/div>\n\n\n</code-example>\n<p>In the <code>AppComponent</code> template, <code>fontSizePx</code> is two-way bound to the <code>SizerComponent</code>.</p>\n<code-example header=\"src/app/app.component.html\" path=\"two-way-binding/src/app/app.component.html\" region=\"two-way-1\">\n&#x3C;app-sizer [(size)]=\"fontSizePx\">&#x3C;/app-sizer>\n&#x3C;div [style.font-size.px]=\"fontSizePx\">Resizable Text&#x3C;/div>\n\n</code-example>\n<p>In the <code>AppComponent</code>, <code>fontSizePx</code> establishes the initial <code>SizerComponent.size</code> value by setting the value to <code>16</code>.</p>\n<code-example header=\"src/app/app.component.ts\" path=\"two-way-binding/src/app/app.component.ts\" region=\"font-size\">\nfontSizePx = 16;\n\n</code-example>\n<p>Clicking the buttons updates the <code>AppComponent.fontSizePx</code>.\nThe revised <code>AppComponent.fontSizePx</code> value updates the style binding, which makes the displayed text bigger or smaller.</p>\n<p>The two-way binding syntax is shorthand for a combination of property binding and event binding.\nThe <code>SizerComponent</code> binding as separate property binding and event binding is as follows.</p>\n<code-example header=\"src/app/app.component.html (expanded)\" path=\"two-way-binding/src/app/app.component.html\" region=\"two-way-2\">\n&#x3C;app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\">&#x3C;/app-sizer>\n\n</code-example>\n<p>The <code>$event</code> variable contains the data of the <code>SizerComponent.sizeChange</code> event.\nAngular assigns the <code>$event</code> value to the <code>AppComponent.fontSizePx</code> when the user clicks the buttons.</p>\n<div class=\"callout is-helpful\">\n<header>Two-way binding in forms</header>\n<p>Because no built-in HTML element follows the <code>x</code> value and <code>xChange</code> event pattern, two-way binding with form elements requires <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code>.\nFor more information on how to use two-way binding in forms, see Angular <a href=\"guide/built-in-directives#ngModel\">NgModel</a>.</p>\n</div>\n<h2 id=\"two-way-binding-to-signals\">Two-way binding to signals<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#two-way-binding-to-signals\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular supports binding both plain values and signals to two-way bindings. If you pass a writable signal to a two-way binding, Angular will automatically keep it in sync with the underlying input and output.</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: '&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"name\">',\n  imports: [<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>]\n})\nexport class MyComp {\n  name = <a href=\"api/core/signal\" class=\"code-anchor\">signal</a>('Bob');\n}\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Mon Feb 28 2022</div>\n</div>\n\n<!-- links to this doc:\n - extended-diagnostics/NG8101\n - guide/built-in-directives\n - guide/event-binding\n - guide/example-apps-list\n - guide/inputs-outputs\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/EventEmitter\n - api/core/Input\n - api/core/Output\n - api/core/signal\n - api/forms/FormsModule\n - api/forms/NgModel\n - guide/built-in-directives#ngModel\n - guide/event-binding\n - guide/inputs-outputs\n - guide/property-binding\n - guide/two-way-binding#adding-two-way-data-binding\n - guide/two-way-binding#how-two-way-binding-works\n - guide/two-way-binding#prerequisites\n - guide/two-way-binding#two-way-binding\n - guide/two-way-binding#two-way-binding-to-signals\n-->"
}