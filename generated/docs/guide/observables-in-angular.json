{
  "id": "guide/observables-in-angular",
  "title": "Observables in Angular",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"observables-in-angular\">Observables in Angular<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables-in-angular#observables-in-angular\"><i class=\"material-icons\">link</i></a></h1>\n<p>Angular makes use of observables as an interface to handle a variety of common asynchronous operations.\nFor example:</p>\n<!--todo: Have Alex review this -->\n<!-- *   You can define [custom events](guide/event-binding#custom-events-with-eventemitter) that send observable output data from a child to a parent component -->\n<ul>\n<li>The HTTP module uses observables to handle AJAX requests and responses</li>\n<li>The Router and Forms modules use observables to listen for and respond to user-input events</li>\n</ul>\n<h2 id=\"transmitting-data-between-components\">Transmitting data between components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables-in-angular#transmitting-data-between-components\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular provides an <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> class that is used when publishing values from a component through the <a href=\"guide/inputs-outputs#output\"><code>@Output()</code> decorator</a>.\n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> extends <a href=\"https://rxjs.dev/api/index/class/Subject\">RxJS <code>Subject</code></a>, adding an <code>emit()</code> method so it can send arbitrary values.\nWhen you call <code>emit()</code>, it passes the emitted value to the <code>next()</code> method of any subscribed observer.</p>\n<p>A good example of usage can be found in the <a href=\"api/core/EventEmitter\">EventEmitter</a> documentation.\nHere is the example component that listens for open and close events:</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n&#x3C;app-zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\">&#x3C;/app-zippy>\n\n</code-example>\n<p>Here is the component definition:</p>\n<code-example header=\"EventEmitter\" path=\"observables-in-angular/src/main.ts\" region=\"eventemitter\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-zippy',\n  template: `\n    &#x3C;div class=\"zippy\">\n      &#x3C;button type=\"button\" (click)=\"toggle()\">Toggle&#x3C;/button>\n      &#x3C;div [hidden]=\"!visible\">\n        &#x3C;ng-content>&#x3C;/ng-content>\n      &#x3C;/div>\n    &#x3C;/div>\n  `,\n})\nexport class ZippyComponent {\n  visible = true;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() open = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;any>();\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() close = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;any>();\n\n  toggle() {\n    this.visible = !this.visible;\n    if (this.visible) {\n      this.open.emit(null);\n    } else {\n      this.close.emit(null);\n    }\n  }\n}\n\n\n</code-example>\n<h2 id=\"http\">HTTP<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables-in-angular#http\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> returns observables from HTTP method calls.\nFor instance, <code>http.get('/api')</code> returns an observable.\nThis provides several advantages over promise-based HTTP APIs:</p>\n<ul>\n<li>\n<p>Observables do not mutate the server response (as can occur through chained <code>.then()</code> calls on promises).\nInstead, you can use a series of operators to transform values as needed.</p>\n</li>\n<li>\n<p>HTTP requests are cancellable through the <code>unsubscribe()</code> method</p>\n</li>\n<li>\n<p>Requests can be configured to get progress event updates</p>\n</li>\n<li>\n<p>Failed requests can be retried easily</p>\n</li>\n</ul>\n<h2 id=\"async-pipe\">Async pipe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables-in-angular#async-pipe\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <a href=\"api/common/AsyncPipe\">AsyncPipe</a> subscribes to an observable or promise and returns the latest value it has emitted.\nWhen a new value is emitted, the pipe marks the component to be checked for changes.</p>\n<p>The following example binds the <code>time</code> observable to the component's view.\nThe observable continuously updates the view with the current time.</p>\n<code-example header=\"Using async pipe\" path=\"observables-in-angular/src/main.ts\" region=\"pipe\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'async-observable-pipe',\n  template: `&#x3C;div>&#x3C;code>observable|async&#x3C;/code>:\n       <a href=\"api/common/Time\" class=\"code-anchor\">Time</a>: {{ time | async }}&#x3C;/div>`,\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>]\n})\nexport class AsyncObservablePipeComponent {\n  time = new Observable&#x3C;string>(observer => {\n    setInterval(() => observer.next(new Date().toString()), 1000);\n  });\n}\n\n\n</code-example>\n<h2 id=\"router\">Router<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables-in-angular#router\"><i class=\"material-icons\">link</i></a></h2>\n<p><a href=\"api/router/Router#events\"><code>Router.events</code></a> provides events as observables.\nYou can use the <code>filter()</code> operator from RxJS to look for events of interest, and subscribe to them in order to make decisions based on the sequence of events in the navigation process.\nHere's an example:</p>\n<code-example header=\"Router events\" path=\"observables-in-angular/src/main.ts\" region=\"router\">\n\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/NavigationStart\" class=\"code-anchor\">NavigationStart</a> } from '@angular/router';\nimport { filter } from 'rxjs';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-routable',\n  template: 'Routable1Component template'\n})\nexport class Routable1Component implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  navStart: Observable&#x3C;<a href=\"api/router/NavigationStart\" class=\"code-anchor\">NavigationStart</a>>;\n\n  constructor(router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n    // Create a new Observable that publishes only the <a href=\"api/router/NavigationStart\" class=\"code-anchor\">NavigationStart</a> event\n    this.navStart = router.events.pipe(\n      filter(evt => evt instanceof <a href=\"api/router/NavigationStart\" class=\"code-anchor\">NavigationStart</a>)\n    ) as Observable&#x3C;<a href=\"api/router/NavigationStart\" class=\"code-anchor\">NavigationStart</a>>;\n  }\n\n  ngOnInit() {\n    this.navStart.subscribe(() => console.log('<a href=\"api/router/Navigation\" class=\"code-anchor\">Navigation</a> Started!'));\n  }\n}\n\n\n</code-example>\n<p>The <a href=\"api/router/ActivatedRoute\">ActivatedRoute</a> is an injected router service that makes use of observables to get information about a route path and parameters.\nFor example, <code><a href=\"api/router/ActivatedRoute#url\" class=\"code-anchor\">ActivatedRoute.url</a></code> contains an observable that reports the route path or paths.\nHere's an example:</p>\n<code-example header=\"ActivatedRoute\" path=\"observables-in-angular/src/main.ts\" region=\"activated_route\">\n\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-routable',\n  template: 'Routable2Component template'\n})\nexport class Routable2Component implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private activatedRoute: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) { }\n\n  ngOnInit() {\n    this.activatedRoute.url\n      .subscribe(url => console.log('The URL changed to: ' + url));\n  }\n}\n\n\n</code-example>\n<h2 id=\"reactive-forms\">Reactive forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables-in-angular#reactive-forms\"><i class=\"material-icons\">link</i></a></h2>\n<p>Reactive forms have properties that use observables to monitor form control values.\nThe <a href=\"api/forms/FormControl\"><code>FormControl</code></a> properties <code>valueChanges</code> and <code>statusChanges</code> contain observables that raise change events.\nSubscribing to an observable form-control property is a way of triggering application logic within the component class.\nFor example:</p>\n<code-example header=\"Reactive forms\" path=\"observables-in-angular/src/main.ts\" region=\"forms\">\n\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> } from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-hero-form',\n  template: 'Hero <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> Template'\n})\nexport class HeroFormComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  nameChangeLog: string[] = [];\n  heroForm!: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n\n  ngOnInit() {\n    this.logNameChange();\n  }\n  logNameChange() {\n    const nameControl = this.heroForm.get('name');\n    nameControl?.valueChanges.forEach(\n      (value: string) => this.nameChangeLog.push(value)\n    );\n  }\n}\n\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Mon Feb 28 2022</div>\n</div>\n\n<!-- links to this doc:\n - api/core/EventEmitter\n - guide/http-request-data-from-server\n - guide/router-reference\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/Time\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/EventEmitter\n - api/core/OnInit\n - api/core/Output\n - api/forms/Form\n - api/forms/FormControl\n - api/forms/FormGroup\n - api/router/ActivatedRoute\n - api/router/ActivatedRoute#url\n - api/router/Navigation\n - api/router/NavigationStart\n - api/router/Router\n - api/router/Router#events\n - guide/inputs-outputs#output\n - guide/observables-in-angular#async-pipe\n - guide/observables-in-angular#http\n - guide/observables-in-angular#observables-in-angular\n - guide/observables-in-angular#reactive-forms\n - guide/observables-in-angular#router\n - guide/observables-in-angular#transmitting-data-between-components\n - https://rxjs.dev/api/index/class/Subject\n-->"
}