{
  "id": "guide/understanding-template-expr-overview",
  "title": "Understanding template expressions",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <!-- Archived and no longer in the left nav. Still accessible to 3rd parties who linked to it. -->\n<h1 id=\"understanding-template-expressions\">Understanding template expressions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#understanding-template-expressions\"><i class=\"material-icons\">link</i></a></h1>\n<p>This topic explores some aspects of Angular text interpolation.</p>\n<h2 id=\"syntax\">Syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#syntax\"><i class=\"material-icons\">link</i></a></h2>\n<p>Template expressions are similar to JavaScript.\nMany JavaScript expressions are legal template expressions, with the following exceptions.</p>\n<p>You can't use JavaScript expressions that have or promote side effects, including:</p>\n<ul>\n<li>Assignments (<code>=</code>, <code>+=</code>, <code>-=</code>, <code>...</code>)</li>\n<li>Operators such as <code>new</code>, <code>typeof</code>, or <code>instanceof</code></li>\n<li>Chaining expressions with <code>;</code> or <code>,</code></li>\n<li>The increment and decrement operators <code>++</code> and <code>--</code></li>\n<li>Some of the ES2015+ operators</li>\n</ul>\n<p>Other notable differences from JavaScript syntax include:</p>\n<ul>\n<li>No support for the bitwise operators such as <code>|</code> and <code>&#x26;</code></li>\n<li>New <a href=\"guide/template-expression-operators\">template expression operators</a>, such as <code>|</code>, <code>?.</code> and <code>!</code></li>\n</ul>\n<h2 id=\"expression-context\">Expression context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#expression-context\"><i class=\"material-icons\">link</i></a></h2>\n<p>Interpolated expressions have a context—a particular part of the application to which the expression belongs.\nTypically, this context is the component instance.</p>\n<p>In the following snippet, the expression <code>recommended</code> and the expression <code>itemImageUrl2</code> refer to properties of the <code>AppComponent</code>.</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-context\" header=\"src/app/app.component.html\">\n&#x3C;h4>{{recommended}}&#x3C;/h4>\n&#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> alt=\"item 2\" [src]=\"itemImageUrl2\">\n\n</code-example>\n<p>An expression can also refer to properties of the <em>template's</em> context such as a <a href=\"guide/structural-directives#shorthand\">template input variable</a> or a <a href=\"guide/template-reference-variables\">template reference variable</a>.</p>\n<p>The following example uses a template input variable of <code>customer</code>.</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-input-variable\" header=\"src/app/app.component.html (template input variable)\">\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\">{{customer.name}}&#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p>This next example features a template reference variable, <code>#customerInput</code>.</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-reference-variable\" header=\"src/app/app.component.html (template reference variable)\">\n&#x3C;label for=\"customer-input\"><a href=\"api/core/Type\" class=\"code-anchor\">Type</a> something:\n  &#x3C;input id=\"customer-input\" #customerInput>{{customerInput.value}}\n&#x3C;/label>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Template expressions cannot refer to anything in the global namespace, except <code>undefined</code>.\nThey can't refer to <code>window</code> or <code>document</code>.\nAdditionally, they can't call <code>console.log()</code> or <code>Math.max()</code> and they are restricted to referencing members of the expression context.</p>\n</div>\n<h3 id=\"preventing-name-collisions\">Preventing name collisions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#preventing-name-collisions\"><i class=\"material-icons\">link</i></a></h3>\n<p>The context against which an expression evaluates is the union of the template variables, the directive's context object—if it has one—and the component's members.\nIf you reference a name that belongs to more than one of these namespaces, Angular applies the following logic to determine the context:</p>\n<ol>\n<li>The template variable name.</li>\n<li>A name in the directive's context.</li>\n<li>The component's member names.</li>\n</ol>\n<p>To avoid variables shadowing variables in another context, keep variable names unique.\nIn the following example, the <code>AppComponent</code> template greets the <code>customer</code>, Padma.</p>\n<p>An <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> then lists each <code>customer</code> in the <code>customers</code> array.</p>\n<code-example path=\"interpolation/src/app/app.component.1.ts\" region=\"var-collision\" header=\"src/app/app.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  template: `\n    &#x3C;div>\n      &#x3C;!-- Hello, Padma -->\n      &#x3C;h1>Hello, {{customer}}&#x3C;/h1>\n      &#x3C;ul>\n        &#x3C;!-- Ebony and Chiho in a list-->\n        &#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\">{{ customer.value }}&#x3C;/li>\n      &#x3C;/ul>\n    &#x3C;/div>\n  `,\n  imports: [<a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>]\n})\nexport class AppComponent {\n  customers = [{value: 'Ebony'}, {value: 'Chiho'}];\n  customer = 'Padma';\n}\n\n</code-example>\n<p>The <code>customer</code> within the <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> is in the context of an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> and so refers to the <code>customer</code> in the <code>customers</code> array, in this case Ebony and Chiho.\nThis list does not feature Padma because <code>customer</code> outside of the <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> is in a different context.\nConversely, <code>customer</code> in the <code>&#x3C;h1></code> doesn't include Ebony or Chiho because the context for this <code>customer</code> is the class and the class value for <code>customer</code> is Padma.</p>\n<h2 id=\"expression-best-practices\">Expression best practices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#expression-best-practices\"><i class=\"material-icons\">link</i></a></h2>\n<p>When using template expressions, follow these best practices:</p>\n<ul>\n<li>\n<p><strong>Use short expressions</strong></p>\n<p>Use property names or method calls whenever possible.\nKeep application and business logic in the component, where it is accessible to develop and test.</p>\n</li>\n<li>\n<p><strong>Quick execution</strong></p>\n<p>Angular executes template expressions after every <a href=\"guide/glossary#change-detection\">change detection</a> cycle.\nMany asynchronous activities trigger change detection cycles, such as promise resolutions, HTTP results, timer events, key presses, and mouse moves.</p>\n<p>Expressions should finish quickly to keep the user experience as efficient as possible, especially on slower devices.\nConsider caching values when their computation requires greater resources.</p>\n</li>\n<li>\n<p><strong>No visible side effects</strong></p>\n<p>According to Angular's <a href=\"guide/glossary#unidirectional-data-flow\">unidirectional data flow model</a>, a template expression should not change any application state other than the value of the target property.\nReading a component value should not change some other displayed value.\nThe view should be stable throughout a single rendering pass.</p>\n<div class=\"callout is-important\">\n  <header>Idempotent expressions reduce side effects</header>\n<p>  An <a href=\"https://en.wikipedia.org/wiki/Idempotence\">idempotent</a> expression is free of side effects and improves Angular's change detection performance.\nIn Angular terms, an idempotent expression always returns <em>exactly the same thing</em> until one of its dependent values changes.</p>\n<p>  Dependent values should not change during a single turn of the event loop.\nIf an idempotent expression returns a string or a number, it returns the same string or number if you call it twice consecutively.\nIf the expression returns an object, including an <code>array</code>, it returns the same object <em>reference</em> if you call it twice consecutively.</p>\n</div>\n<div class=\"alert is-important\">\n<p>There is one exception to this behavior that applies to <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>.\n<code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> has <code>trackBy</code> functionality that can deal with changing values in objects when iterating over them.\nSee <a href=\"guide/built-in-directives#ngfor-with-trackby\">*ngFor with <code>trackBy</code></a> for details.</p>\n</div>\n</li>\n</ul>\n<h2 id=\"whats-next\">What's next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>Property bindings</li>\n</ul>\n\n  <div class=\"reviewed\">Last reviewed on Fri Sep 01 2023</div>\n</div>\n\n<!-- links to this doc:\n - guide/what-is-angular\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgOptimizedImage\n - api/core/Component\n - api/core/Type\n - api/core/ng-template\n - guide/built-in-directives#ngfor-with-trackby\n - guide/glossary#change-detection\n - guide/glossary#unidirectional-data-flow\n - guide/structural-directives#shorthand\n - guide/template-expression-operators\n - guide/template-reference-variables\n - guide/understanding-template-expr-overview#expression-best-practices\n - guide/understanding-template-expr-overview#expression-context\n - guide/understanding-template-expr-overview#preventing-name-collisions\n - guide/understanding-template-expr-overview#syntax\n - guide/understanding-template-expr-overview#understanding-template-expressions\n - guide/understanding-template-expr-overview#whats-next\n - https://en.wikipedia.org/wiki/Idempotence\n-->"
}