{
  "id": "guide/http-handle-request-errors",
  "title": "HTTP client - Handle request errors",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"http-client---handle-request-errors\">HTTP client - Handle request errors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#http-client---handle-request-errors\"><i class=\"material-icons\">link</i></a></h1>\n<p>If the request fails on the server, <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> returns an <em>error</em> object instead of a successful response.</p>\n<p>The same service that performs your server transactions should also perform error inspection, interpretation, and resolution.</p>\n<p>When an error occurs, you can obtain details of what failed to inform your user.\nIn some cases, you might also automatically <a href=\"guide/http-handle-request-errors#retry\">retry the request</a>.</p>\n<p><a id=\"error-details\"></a></p>\n<h2 id=\"getting-error-details\">Getting error details<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#getting-error-details\"><i class=\"material-icons\">link</i></a></h2>\n<p>An app should give the user useful feedback when data access fails.\nA raw error object is not particularly useful as feedback.\nIn addition to detecting that an error has occurred, you need to get error details and use those details to compose a user-friendly response.</p>\n<p>Two types of errors can occur.</p>\n<ul>\n<li>\n<p>The server backend might reject the request, returning an HTTP response with a status code such as 404 or 500.\nThese are error <em>responses</em>.</p>\n</li>\n<li>\n<p>Something could go wrong on the client-side such as a network error that prevents the request from completing successfully or an exception thrown in an RxJS operator.\nThese errors have <code>status</code> set to <code>0</code> and the <code>error</code> property contains a <code>ProgressEvent</code> object, whose <code>type</code> might provide further information.</p>\n</li>\n</ul>\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> captures both kinds of errors in its <code><a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a></code>.\nInspect that response to identify the error's cause.</p>\n<p>The following example defines an error handler in the previously defined ConfigService.</p>\n<code-example header=\"app/config/config.service.ts (handleError)\" path=\"http/src/app/config/config.service.ts\" region=\"handleError\">\nprivate handleError(error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) {\n  if (error.status === 0) {\n    // A client-side or network error occurred. Handle it accordingly.\n    console.error('An error occurred:', error.error);\n  } else {\n    // The backend returned an unsuccessful response code.\n    // The response body may contain clues as to what went wrong.\n    console.error(\n      `Backend returned code ${error.status}, body was: `, error.error);\n  }\n  // Return an observable with a user-facing error message.\n  return throwError(() => new Error('Something bad happened; please try again later.'));\n}\n\n</code-example>\n<p>The handler returns an RxJS <code>ErrorObservable</code> with a user-friendly error message.\nThe following code updates the <code>getConfig()</code> method, using a <a href=\"guide/rx-library#operators\" title=\"RxJS Operators\">pipe</a> to send all observables returned by the <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> call to the error handler.</p>\n<code-example header=\"app/config/config.service.ts (getConfig v.3 with error handler)\" path=\"http/src/app/config/config.service.ts\" region=\"getConfig_3\">\ngetConfig() {\n  return this.http.get&#x3C;Config>(this.configUrl)\n    .pipe(\n      catchError(this.handleError)\n    );\n}\n\n</code-example>\n<p><a id=\"retry\"></a></p>\n<h2 id=\"retrying-a-failed-request\">Retrying a failed request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#retrying-a-failed-request\"><i class=\"material-icons\">link</i></a></h2>\n<p>Sometimes the error is transient and goes away automatically if you try again.\nFor example, network interruptions are common in mobile scenarios, and trying again can produce a successful result.</p>\n<p>The <a href=\"guide/rx-library\">RxJS library</a> offers several <em>retry</em> operators.\nFor example, the <code>retry()</code> operator automatically re-subscribes to a failed <code>Observable</code> a specified number of times.\n<em>Re-subscribing</em> to the result of an <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> method call has the effect of reissuing the HTTP request.</p>\n<p>The following example shows how to pipe a failed request to the <code>retry()</code> operator before passing it to the error handler.</p>\n<code-example header=\"app/config/config.service.ts (getConfig with retry)\" path=\"http/src/app/config/config.service.ts\" region=\"getConfig\">\ngetConfig() {\n  return this.http.get&#x3C;Config>(this.configUrl)\n    .pipe(\n      retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError) // then handle the error\n    );\n}\n\n</code-example>\n\n  <div class=\"reviewed\">Last reviewed on Tue Aug 29 2023</div>\n</div>\n\n<!-- links to this doc:\n - guide/http-request-data-from-server\n - guide/http-send-data-to-server\n - guide/understanding-communicating-with-http\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/common/http/HttpErrorResponse\n - guide/http-handle-request-errors#getting-error-details\n - guide/http-handle-request-errors#http-client---handle-request-errors\n - guide/http-handle-request-errors#retry\n - guide/http-handle-request-errors#retrying-a-failed-request\n - guide/rx-library\n - guide/rx-library#operators\n-->"
}