{
  "id": "guide/signal-queries",
  "title": "Signal queries",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"signal-queries\">Signal queries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#signal-queries\"><i class=\"material-icons\">link</i></a></h1>\n<p>A component or directive can define queries that find child elements and read values from their injectors.</p>\n<p>Developers most commonly use queries to retrieve references to components, directives, DOM elements, and more.</p>\n<p>There are two categories of query: view queries and content queries.</p>\n<p>Signal queries supply query results as a reactive signal primitive. You can use query results in <code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code> and <code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code>, composing these results with other signals.</p>\n<div class=\"alert is-helpful\">\n<p>Signal queries are in <a href=\"/guide/releases#developer-preview\">developer preview</a>.\nAPIs may change based on feedback without going through Angular's deprecation cycle.</p>\n</div>\n<p>If you're already familiar with Angular queries, you can jump straight to <a href=\"guide/signal-queries#comparing-signal-based-queries-to-decorator-based-queries\">Comparing signal-based queries to decorator-based queries</a></p>\n<h2 id=\"view-queries\">View queries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#view-queries\"><i class=\"material-icons\">link</i></a></h2>\n<p>View queries retrieve results from the elements in the component's own template (view). </p>\n<h3 id=\"viewchild\"><code><a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#viewchild\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can declare a query targeting a single result with the <code><a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a></code> function. </p>\n<code-example language=\"ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n    template: `\n        &#x3C;div #el>&#x3C;/div>\n        &#x3C;my-component />\n    `\n})\nexport class TestComponent {\n    // <a href=\"api/animations/query\" class=\"code-anchor\">query</a> for a single result by a string predicate  \n    divEl = <a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a>&#x3C;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>>('el');       // <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&#x3C;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>|undefined>\n    // <a href=\"api/animations/query\" class=\"code-anchor\">query</a> for a single result by a type predicate\n    cmp = <a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a>(MyComponent);              // <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&#x3C;MyComponent|undefined>\n}\n</code-example>\n<h3 id=\"viewchildren\"><code><a href=\"api/core/viewChildren\" class=\"code-anchor\">viewChildren</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#viewchildren\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can also query for multiple results with the <code><a href=\"api/core/viewChildren\" class=\"code-anchor\">viewChildren</a></code> function. </p>\n<code-example language=\"ts\">\n @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n    template: `\n        &#x3C;div #el>&#x3C;/div>\n        @if (show) {\n            &#x3C;div #el>&#x3C;/div>\n        }\n    `\n})\nexport class TestComponent {\n    show = true;\n\n    // <a href=\"api/animations/query\" class=\"code-anchor\">query</a> for <a href=\"api/forms/SelectMultipleControlValueAccessor\" class=\"code-anchor\">multiple</a> results\n    divEls = <a href=\"api/core/viewChildren\" class=\"code-anchor\">viewChildren</a>&#x3C;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>>('el');        // <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&#x3C;ReadonlyArray&#x3C;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>>>\n}\n</code-example>\n<h3 id=\"view-query-options\">View query options<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#view-query-options\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a></code> and the <code><a href=\"api/core/viewChildren\" class=\"code-anchor\">viewChildren</a></code> query declaration functions have a similar signature accepting two arguments:</p>\n<ul>\n<li>a <strong>locator</strong> to specify the query target - it can be either a <code>string</code> or any injectable token</li>\n<li>a set of <strong>options</strong>  to adjust behavior of a given query.</li>\n</ul>\n<p>Signal-based view queries accept only one option: <code>read</code>. The <code>read</code> option indicates the type of result to inject from the matched nodes and return in the final results. </p>\n<code-example language=\"ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n    template: `&#x3C;my-component/>`\n})\nexport class TestComponent {\n    // <a href=\"api/animations/query\" class=\"code-anchor\">query</a> for a single result with options\n    cmp = <a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a>(MyComponent, {read: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>});   // <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&#x3C;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>|undefined>\n}\n</code-example>\n<h2 id=\"content-queries\">Content queries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#content-queries\"><i class=\"material-icons\">link</i></a></h2>\n<p>Content queries retrieve results from the elements in the component's content â€” the elements nested inside the component tag in the template where it's used. </p>\n<h3 id=\"contentchild\"><code><a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#contentchild\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can query for a single result with the <code><a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a></code> function. </p>\n<code-example language=\"ts\">\n @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({...})\n export class TestComponent {\n    // <a href=\"api/animations/query\" class=\"code-anchor\">query</a> by a string predicate  \n    headerEl = <a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a>&#x3C;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>>('h');                    // <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&#x3C;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>|undefined>\n\n    // <a href=\"api/animations/query\" class=\"code-anchor\">query</a> by a type predicate\n    header = <a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a>(MyHeader);                             // <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&#x3C;MyHeader|undefined>\n }\n</code-example>\n<h3 id=\"contentchildren\"><code><a href=\"api/core/contentChildren\" class=\"code-anchor\">contentChildren</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#contentchildren\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can also query for multiple results with the <code><a href=\"api/core/contentChildren\" class=\"code-anchor\">contentChildren</a></code> function. </p>\n<code-example language=\"ts\">\n @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({...})\n export class TestComponent {\n    // <a href=\"api/animations/query\" class=\"code-anchor\">query</a> for <a href=\"api/forms/SelectMultipleControlValueAccessor\" class=\"code-anchor\">multiple</a> results\n    divEls = <a href=\"api/core/contentChildren\" class=\"code-anchor\">contentChildren</a>&#x3C;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>>('h');                  // <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&#x3C;ReadonlyArray&#x3C;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>>>\n }\n</code-example>\n<h3 id=\"content-query-options\">Content query options<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#content-query-options\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a></code> and the <code><a href=\"api/core/contentChildren\" class=\"code-anchor\">contentChildren</a></code> query declaration functions have a similar signature accepting two arguments:</p>\n<ul>\n<li>a <strong>locator</strong> to specify the query target - it can be either a <code>string</code> or any injectable token</li>\n<li>a set of <strong>options</strong>  to adjust behavior of a given query.</li>\n</ul>\n<p>Content queries accept the following options:</p>\n<ul>\n<li><code>descendants</code> By default, content queries find only direct children of the component and do not traverse into descendants. If this option is changed to <code>true</code>, query results will include all descendants of the element. Even when <code>true</code>, however, queries <em>never</em> descend into components.</li>\n<li><code>read</code> indicates the type of result to retrieve from the matched nodes and return in the final results.</li>\n</ul>\n<h3 id=\"required-child-queries\">Required child queries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#required-child-queries\"><i class=\"material-icons\">link</i></a></h3>\n<p>If a child query (<code><a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a></code> or <code><a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a></code>) does not find a result, its value is <code>undefined</code>. This may occur if the target element is hidden by a control flow statement like <code><a href=\"api/core/if\" class=\"code-anchor\">@if</a></code> or <code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code>.</p>\n<p>Because of this, the child queries return a signal that potentially have the <code>undefined</code> value. Most of the time, and especially for the view child queries, developers author their code such that:</p>\n<ul>\n<li>there is at least one matching result;</li>\n<li>results are accessed when the template was processed and query results are available.</li>\n</ul>\n<p>For such cases, you can mark child queries as <code>required</code> to enforce presence of at least one matching result. This eliminates <code>undefined</code> from the result type signature. If a <code>required</code> query does not find any results, Angular throws an error.</p>\n<code-example language=\"ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  standalone: true,\n  template: `\n    &#x3C;div #requiredEl>&#x3C;/div>\n  `,\n})\nexport class App {\n  existingEl = viewChild.required('requiredEl');     // required and existing result\n  missingEl = viewChild.required('notInATemplate'); // required but NOT existing result\n  \n  ngAfterViewInit() {\n    console.log(this.existingEl()); // OK :-)\n    console.log(this.missingEl());  // Runtime error: result marked as required but not available!\n  }\n}\n</code-example>\n<h2 id=\"results-availability-timing\">Results availability timing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#results-availability-timing\"><i class=\"material-icons\">link</i></a></h2>\n<p>A signal query authoring functions will be executed as part of the directive instance construction. This happens before we could create a query instance and execute the templateâ€™s creation mode to collect any matches. As a consequence, there is a period of time where the signal instance was created (and can be read) but no query results could have been collected. By default Angular will return <code>undefined</code> (for child queries) or an empty array (for children queries) before results are available. Required queries will throw if accessed at this point.</p>\n<p>Angular computes signal-based query results lazily, on demand. This means that query results are not collected unless there is a code path that reads the signal. </p>\n<p>Query results can change over time due to the view manipulation - either through the Angular's control flow (<code><a href=\"api/core/if\" class=\"code-anchor\">@if</a></code>, <code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> etc.) or by the direct calls to the <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> API. When you read the value from the query result signal, you can receive different values over time. </p>\n<p>Note: to avoid returning incomplete query results while a template is rendered, Angular delays query resolution until it finishes rendering a given template.</p>\n<h2 id=\"query-declarations-functions-and-the-associated-rules\">Query declarations functions and the associated rules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#query-declarations-functions-and-the-associated-rules\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a></code>, <code><a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a></code>, <code><a href=\"api/core/viewChildren\" class=\"code-anchor\">viewChildren</a></code> and <code><a href=\"api/core/contentChildren\" class=\"code-anchor\">contentChildren</a></code> functions are special function recognized by the Angular compiler. You can use those functions to declare queries by initializing a component or a directive property. You can never call these functions outside of component and directive property initializers.</p>\n<code-example language=\"ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  standalone: true,\n  template: `\n    &#x3C;div #el>&#x3C;/div>\n  `,\n})\nexport class App {\n  el = <a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a>('el'); // all good!\n\n  constructor() {\n    const myConst = <a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a>('el'); // NOT SUPPORTED\n  }\n}\n</code-example>\n<h2 id=\"comparing-signal-based-queries-to-decorator-based-queries\">Comparing signal-based queries to decorator-based queries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#comparing-signal-based-queries-to-decorator-based-queries\"><i class=\"material-icons\">link</i></a></h2>\n<p>Signal queries are an alternative approach to the queries declared using the <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code>, <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code>, <code>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a></code> or <code>@<a href=\"api/core/ViewChildren\" class=\"code-anchor\">ViewChildren</a></code> decorators. The new approach exposes query results as signals which means that query results can be composed with other signals (using <code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code> or <code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code>) and drive change detection. Additionally, the signal-based query system offers other benefits:</p>\n<ul>\n<li><strong>More predictable timing.</strong> You can access query results as soon as they're available.</li>\n<li><strong>Simpler API surface.</strong> All queries return a signal, and queries with more than one result let you work with a standard array.</li>\n<li><strong>Improved type safety.</strong>  Fewer query use cases include <code>undefined</code> in the possible results.</li>\n<li><strong>More accurate type inference.</strong> TypeScript can infer more accurate types when you use a type predicate or when you specify an explicit <code>read</code> option.</li>\n<li><strong>Lazier updates.</strong> - Angular updates signal-based query results lazily; the framework does no work unless your code explicitly reads the query results.</li>\n</ul>\n<p>The underlying query mechanism doesn't change much - conceptually Angular still creates singular \"child\" or plural \"children\" queries that target elements in a template (view) or content. The difference is in type of results and the exact timing of the results availability. The authoring format for declaring signal-based queries changed as well: the <code><a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a></code>, <code><a href=\"api/core/viewChildren\" class=\"code-anchor\">viewChildren</a></code>, <code><a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a></code> and <code><a href=\"api/core/contentChildren\" class=\"code-anchor\">contentChildren</a></code> functions used as initializer of class members are automatically recognized by Angular. </p>\n\n  \n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /guide/releases#developer-preview\n - api/animations/query\n - api/core/Component\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/ElementRef\n - api/core/Signal\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/core/ViewContainerRef\n - api/core/computed\n - api/core/contentChild\n - api/core/contentChildren\n - api/core/effect\n - api/core/for\n - api/core/if\n - api/core/viewChild\n - api/core/viewChildren\n - api/forms/SelectMultipleControlValueAccessor\n - guide/signal-queries#comparing-signal-based-queries-to-decorator-based-queries\n - guide/signal-queries#content-queries\n - guide/signal-queries#content-query-options\n - guide/signal-queries#contentchild\n - guide/signal-queries#contentchildren\n - guide/signal-queries#query-declarations-functions-and-the-associated-rules\n - guide/signal-queries#required-child-queries\n - guide/signal-queries#results-availability-timing\n - guide/signal-queries#signal-queries\n - guide/signal-queries#view-queries\n - guide/signal-queries#view-query-options\n - guide/signal-queries#viewchild\n - guide/signal-queries#viewchildren\n-->"
}