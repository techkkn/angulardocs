{
  "id": "guide/lazy-loading-ngmodules",
  "title": "Lazy-loading feature modules",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"lazy-loading-feature-modules\">Lazy-loading feature modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#lazy-loading-feature-modules\"><i class=\"material-icons\">link</i></a></h1>\n<p>By default, NgModules are eagerly loaded. This means that as soon as the application loads, so do all the NgModules, whether they are immediately necessary or not.\nFor large applications with lots of routes, consider lazy loading â€”a design pattern that loads NgModules as needed.\nLazy loading helps keep initial bundle sizes smaller, which in turn helps decrease load times.</p>\n<div class=\"alert is-helpful\">\n<p>For the final sample application with two lazy-loaded modules that this page describes, see the <live-example></live-example>.</p>\n</div>\n<p><a id=\"lazy-loading\"></a></p>\n<h2 id=\"lazy-loading-basics\">Lazy loading basics<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#lazy-loading-basics\"><i class=\"material-icons\">link</i></a></h2>\n<p>This section introduces the basic procedure for configuring a lazy-loaded route.\nFor a step-by-step example, see the <a href=\"guide/lazy-loading-ngmodules#step-by-step\">step-by-step setup</a> section on this page.</p>\n<p>To lazy load Angular modules, use <code>loadChildren</code> (instead of <code>component</code>) in your <code>AppRoutingModule</code> <code>routes</code> configuration as follows.</p>\n<code-example header=\"AppRoutingModule (excerpt)\">\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'items',\n    loadChildren: () => import('./items/items.module').then(m => m.ItemsModule)\n  }\n];\n\n</code-example>\n<p>In the lazy-loaded module's routing module, add a route for the component.</p>\n<code-example header=\"Routing module for lazy loaded module (excerpt)\">\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: ItemsComponent\n  }\n];\n\n</code-example>\n<p>Also be sure to remove the <code>ItemsModule</code> from the <code>AppModule</code>.\nFor step-by-step instructions on lazy loading modules, continue with the following sections of this page.</p>\n<p><a id=\"step-by-step\"></a></p>\n<h2 id=\"step-by-step-setup\">Step-by-step setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#step-by-step-setup\"><i class=\"material-icons\">link</i></a></h2>\n<p>Setting up a lazy-loaded feature module requires two main steps:</p>\n<ol>\n<li>Create the feature module with the Angular CLI, using the <code>--route</code> flag.</li>\n<li>Configure the routes.</li>\n</ol>\n<h3 id=\"set-up-an-application\">Set up an application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-an-application\"><i class=\"material-icons\">link</i></a></h3>\n<p>If you don't already have an application, follow the following steps to create one with the Angular CLI.\nIf you already have an application, skip to <a href=\"guide/lazy-loading-ngmodules#config-routes\">Configure the routes</a>.</p>\n<!-- vale Angular.Google_WordListWarnings = NO -->\n<p>Enter the following command where <code>customer-app</code> is the name of your app:</p>\n<!-- vale Angular.Google_WordListWarnings = YES -->\n<code-example format=\"shell\" language=\"shell\">\n\nng new customer-app --no-standalone\n\n</code-example>\n<p>This creates an application called <code>customer-app</code> with a file called <code>app-routing.module.ts</code>. This is one of the files you need for setting up lazy loading for your feature module.\nNavigate into the project by issuing the command <code>cd customer-app</code>.</p>\n<h3 id=\"create-a-feature-module-with-routing\">Create a feature module with routing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\"><i class=\"material-icons\">link</i></a></h3>\n<p>Next, you need a feature module with a component to route to.\nTo make one, enter the following command in the command line tool, where <code>customers</code> is the name of the feature module.\nThe path for loading the <code>customers</code> feature modules is also <code>customers</code> because it is specified with the <code>--route</code> option:</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module customers --route customers --module app.module\n\n</code-example>\n<p>This creates a <code>customers</code> directory having the new lazy-loadable feature module <code>CustomersModule</code> defined in the <code>customers.module.ts</code> file and the routing module <code>CustomersRoutingModule</code> defined in the <code>customers-routing.module.ts</code> file.\nThe command automatically declares the <code>CustomersComponent</code> and imports <code>CustomersRoutingModule</code> inside the new feature module.</p>\n<p>Because the new module is meant to be lazy-loaded, the command does <strong>not</strong> add a reference to it in the application's root module file, <code>app.module.ts</code>.\nInstead, it adds the declared route, <code>customers</code> to the <code>routes</code> array declared in the module provided as the <code>--module</code> option.</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" region=\"routes-customers\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: () => import('./customers/customers.module').then(m => m.CustomersModule)\n  }\n];\n\n</code-example>\n<p>Notice that the lazy-loading syntax uses <code>loadChildren</code> followed by a function that uses the browser's built-in <code>import('...')</code> syntax for dynamic imports.\nThe import path is the relative path to the module.</p>\n<div class=\"callout is-helpful\">\n<header>String-based lazy loading</header>\n<p>In Angular version 8, the string syntax for the <code>loadChildren</code> route specification <a href=\"guide/deprecations#loadChildren\">was deprecated</a> in favor of the <code>import()</code> syntax.\nYou can opt into using string-based lazy loading (<code>loadChildren: './path/to/module#Module'</code>) by including the lazy-loaded routes in your <code>tsconfig</code> file, which includes the lazy-loaded files in the compilation.</p>\n<p>By default the Angular CLI generates projects with stricter file inclusions intended to be used with the <code>import()</code> syntax.</p>\n</div>\n<h3 id=\"add-another-feature-module\">Add another feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#add-another-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n<p>Use the same command to create a second lazy-loaded feature module with routing, along with its stub component.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module orders --route orders --module app.module\n\n</code-example>\n<p>This creates a new directory called <code>orders</code> containing the <code>OrdersModule</code> and <code>OrdersRoutingModule</code>, along with the new <code>OrdersComponent</code> source files.\nThe <code>orders</code> route, specified with the <code>--route</code> option, is added to the <code>routes</code> array inside the <code>app-routing.module.ts</code> file, using the lazy-loading syntax.</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" region=\"routes-customers-orders\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: () => import('./customers/customers.module').then(m => m.CustomersModule)\n  },\n  {\n    path: 'orders',\n    loadChildren: () => import('./orders/orders.module').then(m => m.OrdersModule)\n  }\n];\n\n</code-example>\n<h3 id=\"set-up-the-ui\">Set up the UI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-the-ui\"><i class=\"material-icons\">link</i></a></h3>\n<p>Though you can type the URL into the address bar, a navigation UI is straightforward for the user and more common.\nReplace the default placeholder markup in <code>app.component.html</code> with a custom nav, so you can navigate to your modules in the browser:</p>\n<code-example header=\"src/app/app.component.html\" path=\"lazy-loading-ngmodules/src/app/app.component.html\" region=\"app-component-template\">\n&#x3C;h1>\n  {{title}}\n&#x3C;/h1>\n\n&#x3C;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/customers\">Customers&#x3C;/button>\n&#x3C;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/orders\">Orders&#x3C;/button>\n&#x3C;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"\">Home&#x3C;/button>\n\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n\n</code-example>\n<p>To see your application in the browser so far, enter the following command in the command line tool window:</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng serve\n\n</code-example>\n<!-- vale Angular.Google_WordListWarnings = NO -->\n<p>Then go to <code>localhost:4200</code> where you should see \"customer-app\" and three buttons.</p>\n<!-- vale Angular.Google_WordListWarnings = YES -->\n<div class=\"lightbox\">\n<img alt=\"three buttons in the browser\" src=\"generated/images/guide/lazy-loading-ngmodules/three-buttons.png\" width=\"300\">\n</div>\n<p>These buttons work, because the Angular CLI automatically added the routes to the feature modules to the <code>routes</code> array in <code>app-routing.module.ts</code>.</p>\n<p><a id=\"config-routes\"></a></p>\n<h3 id=\"imports-and-route-configuration\">Imports and route configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#imports-and-route-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<p>The Angular CLI automatically added each feature module to the routes map at the application level.\nFinish this off by adding the default route.\nIn the <code>app-routing.module.ts</code> file, update the <code>routes</code> array with the following:</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" id=\"app-routing.module.ts\" region=\"const-routes\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: () => import('./customers/customers.module').then(m => m.CustomersModule)\n  },\n  {\n    path: 'orders',\n    loadChildren: () => import('./orders/orders.module').then(m => m.OrdersModule)\n  },\n  {\n    path: '',\n    redirectTo: '',\n    pathMatch: 'full'\n  }\n];\n\n</code-example>\n<p>The first two paths are the routes to the <code>CustomersModule</code> and the <code>OrdersModule</code>.\nThe final entry defines a default route.\nThe empty path matches everything that doesn't match an earlier path.</p>\n<h3 id=\"inside-the-feature-module\">Inside the feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#inside-the-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n<p>Next, take a look at the <code>customers.module.ts</code> file.\nIf you're using the Angular CLI and following the steps outlined in this page, you don't have to do anything here.</p>\n<code-example header=\"src/app/customers/customers.module.ts\" path=\"lazy-loading-ngmodules/src/app/customers/customers.module.ts\" id=\"customers.module.ts\" region=\"customers-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { CustomersRoutingModule } from './customers-routing.module';\nimport { CustomersComponent } from './customers.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    CustomersRoutingModule\n  ],\n  declarations: [CustomersComponent]\n})\nexport class CustomersModule { }\n\n</code-example>\n<p>The <code>customers.module.ts</code> file imports the <code>customers-routing.module.ts</code> and <code>customers.component.ts</code> files.\n<code>CustomersRoutingModule</code> is listed in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> <code>imports</code> array giving <code>CustomersModule</code> access to its own routing module.\n<code>CustomersComponent</code> is in the <code>declarations</code> array, which means <code>CustomersComponent</code> belongs to the <code>CustomersModule</code>.</p>\n<p>The <code>app-routing.module.ts</code> then imports the feature module, <code>customers.module.ts</code> using JavaScript's dynamic import.</p>\n<p>The feature-specific route definition file <code>customers-routing.module.ts</code> imports its own feature component defined in the <code>customers.component.ts</code> file, along with the other JavaScript import statements.\nIt then maps the empty path to the <code>CustomersComponent</code>.</p>\n<code-example header=\"src/app/customers/customers-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/customers/customers-routing.module.ts\" id=\"customers-routing.module.ts\" region=\"customers-routing-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { CustomersComponent } from './customers.component';\n\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: CustomersComponent\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [RouterModule.forChild(routes)],\n  exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]\n})\nexport class CustomersRoutingModule { }\n\n</code-example>\n<p>The <code>path</code> here is set to an empty string because the path in <code>AppRoutingModule</code> is already set to <code>customers</code>, so this route in the <code>CustomersRoutingModule</code>, is already within the <code>customers</code> context.\nEvery route in this routing module is a child route.</p>\n<p>The other feature module's routing module is configured similarly.</p>\n<code-example header=\"src/app/orders/orders-routing.module.ts (excerpt)\" path=\"lazy-loading-ngmodules/src/app/orders/orders-routing.module.ts\" id=\"orders-routing.module.ts\" region=\"orders-routing-module-detail\">\nimport { OrdersComponent } from './orders.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: OrdersComponent\n  }\n];\n\n</code-example>\n<h3 id=\"verify-lazy-loading\">Verify lazy loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#verify-lazy-loading\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can verify that a module is indeed being lazy loaded with the Chrome developer tools.\nIn Chrome, open the developer tools by pressing <code>Cmd+Option+i</code> on a Mac or <code>Ctrl+Shift+j</code> on a PC and go to the Network Tab.</p>\n<div class=\"lightbox\">\n<img alt=\"lazy loaded modules diagram\" src=\"generated/images/guide/lazy-loading-ngmodules/network-tab.png\" width=\"600\">\n</div>\n<p>Click on the Orders or Customers button.\nIf you see a chunk appear, everything is wired up properly and the feature module is being lazy loaded.\nA chunk should appear for Orders and for Customers but only appears once for each.</p>\n<div class=\"lightbox\">\n<img alt=\"lazy loaded modules diagram\" src=\"generated/images/guide/lazy-loading-ngmodules/chunk-arrow.png\" width=\"600\">\n</div>\n<p>To see it again, or to test after making changes, click the circle with a line through it in the upper left of the Network Tab:</p>\n<div class=\"lightbox\">\n<img alt=\"lazy loaded modules diagram\" src=\"generated/images/guide/lazy-loading-ngmodules/clear.gif\" width=\"200\">\n</div>\n<p>Then reload with <code>Cmd+r</code> or <code>Ctrl+r</code>, depending on your platform.</p>\n<h2 id=\"forroot-and-forchild\"><code>forRoot()</code> and <code>forChild()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#forroot-and-forchild\"><i class=\"material-icons\">link</i></a></h2>\n<p>You might have noticed that the Angular CLI adds <code>RouterModule.forRoot(routes)</code> to the <code>AppRoutingModule</code> <code>imports</code> array.\nThis lets Angular know that the <code>AppRoutingModule</code> is a routing module and <code>forRoot()</code> specifies that this is the root routing module.\nIt configures all the routes you pass to it, gives you access to the router directives, and registers the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> service.\nUse <code>forRoot()</code> only once in the application, inside the <code>AppRoutingModule</code>.</p>\n<p>The Angular CLI also adds <code>RouterModule.forChild(routes)</code> to feature routing modules.\nThis way, Angular knows that the route list is only responsible for providing extra routes and is intended for feature modules.\nYou can use <code>forChild()</code> in multiple modules.</p>\n<p>The <code>forRoot()</code> method takes care of the <em>global</em> injector configuration for the Router.\nThe <code>forChild()</code> method has no injector configuration.\nIt uses directives such as <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> and <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>.\nFor more information, see the <a href=\"guide/singleton-services#forRoot\"><code>forRoot()</code> pattern</a> section of the <a href=\"guide/singleton-services\">Singleton Services</a> guide.</p>\n<p><a id=\"preloading\"></a></p>\n<h2 id=\"preloading\">Preloading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading\"><i class=\"material-icons\">link</i></a></h2>\n<p>Preloading improves UX by loading parts of your application in the background.\nYou can preload modules, standalone components or component data.</p>\n<h3 id=\"preloading-modules-and-standalone-components\">Preloading modules and standalone components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading-modules-and-standalone-components\"><i class=\"material-icons\">link</i></a></h3>\n<p>Preloading modules and standalone components improves UX by loading parts of your application in the background. By doing this, users don't have to wait for the elements to download when they activate a route.</p>\n<p>To enable preloading of all lazy loaded modules and standalone components, import the <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> token from the Angular <code>router</code>.</p>\n<h3 id=\"module-based-application\">Module based application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#module-based-application\"><i class=\"material-icons\">link</i></a></h3>\n<code-example header=\"AppRoutingModule (excerpt)\">\n\nimport { <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a> } from '@angular/router';\n\n</code-example>\n<p>Still in the <code>AppRoutingModule</code>, specify your preloading strategy in <code>forRoot()</code>.</p>\n<code-example header=\"AppRoutingModule (excerpt)\">\n\nRouterModule.forRoot(\n  appRoutes,\n  {\n    preloadingStrategy: <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>\n  }\n)\n\n</code-example>\n<h3 id=\"standalone-application\">Standalone application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#standalone-application\"><i class=\"material-icons\">link</i></a></h3>\n<p>For standalone applications configure preloading strategies by adding <code><a href=\"api/router/withPreloading\" class=\"code-anchor\">withPreloading</a></code> to  <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code>s RouterFeatures in <code>app.config.ts</code></p>\n<code-example header=\"&#x60;app.config.ts&#x60;\">\n\nimport { <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> } from '@angular/core';\nimport {\n  <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>,\n  <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>\n  <a href=\"api/router/withPreloading\" class=\"code-anchor\">withPreloading</a>,\n} from '@angular/router';\n\nimport { routes } from './app.routes';\n\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n  providers: [\n    <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>(\n      routes,\n      <a href=\"api/router/withPreloading\" class=\"code-anchor\">withPreloading</a>(<a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>)\n    ),\n  ],\n};\n\n</code-example>\n<h3 id=\"preloading-component-data\">Preloading component data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading-component-data\"><i class=\"material-icons\">link</i></a></h3>\n<p>To preload component data, use a <code>resolver</code>.\nResolvers improve UX by blocking the page load until all necessary data is available to fully display the page.</p>\n<h4 id=\"resolvers\">Resolvers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#resolvers\"><i class=\"material-icons\">link</i></a></h4>\n<p>Create a resolver service.\nWith the Angular CLI, the command to create a service is as follows:</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service &#x3C;service-name>\n\n</code-example>\n<p>In the newly created service, implement the <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> interface provided by the <code>@angular/router</code> package:</p>\n<code-example header=\"Resolver service (excerpt)\">\n\nimport { <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a> } from '@angular/router';\n\nâ€¦\n\n/* An interface that represents your data <a href=\"api/core/model\" class=\"code-anchor\">model</a> */\nexport interface Crisis {\n  id: number;\n  name: string;\n}\n\nexport class CrisisDetailResolverService implements <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>&#x3C;Crisis> {\n  resolve(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): Observable&#x3C;Crisis> {\n    // your logic goes here\n  }\n}\n\n</code-example>\n<p>Import this resolver into your module's routing module.</p>\n<code-example header=\"Feature module&#x27;s routing module (excerpt)\">\n\nimport { CrisisDetailResolverService } from './crisis-detail-resolver.service';\n\n</code-example>\n<p>Add a <code>resolve</code> object to the component's <code>route</code> configuration.</p>\n<code-example header=\"Feature module&#x27;s routing module (excerpt)\">\n\n{\n  path: '/your-path',\n  component: YourComponent,\n  resolve: {\n    crisis: CrisisDetailResolverService\n  }\n}\n\n</code-example>\n<p>In the component's constructor, inject an instance of the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> class that represents the current route.</p>\n<code-example header=\"Component&#x27;s constructor (excerpt)\">\n\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ â€¦ })\nclass YourComponent {\n  constructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n}\n\n</code-example>\n<p>Use the injected instance of the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> class to access <code>data</code> associated with a given route.</p>\n<code-example header=\"Component&#x27;s ngOnInit lifecycle hook (excerpt)\">\n\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ â€¦ })\nclass YourComponent {\n  constructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n\n  ngOnInit() {\n    this.route.data\n      .subscribe(data => {\n        const crisis: Crisis = data.crisis;\n        // â€¦\n      });\n  }\n}\n\n</code-example>\n<p>For more information with a working example, see the <a href=\"guide/router-tutorial-toh#preloading-background-loading-of-feature-areas\">routing tutorial section on preloading</a>.</p>\n<h2 id=\"troubleshooting-lazy-loading-modules\">Troubleshooting lazy-loading modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#troubleshooting-lazy-loading-modules\"><i class=\"material-icons\">link</i></a></h2>\n<p>A common error when lazy-loading modules is importing common modules in multiple places within an application.\nTest for this condition by first generating the module using the Angular CLI and including the <code>--route route-name</code> parameter, where <code>route-name</code> is the name of your module.\nNext, create the module without the <code>--route</code> parameter.\nIf <code>ng generate module</code> with the <code>--route</code> parameter returns an error, but runs correctly without it, you might have imported the same module in multiple places.</p>\n<p>Remember, many common Angular modules should be imported at the base of your application.</p>\n<p>For more information on Angular Modules, see <a href=\"guide/ngmodules\">NgModules</a>.</p>\n<h2 id=\"more-on-ngmodules-and-routing\">More on NgModules and routing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\"><i class=\"material-icons\">link</i></a></h2>\n<p>You might also be interested in the following:</p>\n<ul>\n<li><a href=\"guide/router\">Routing and Navigation</a></li>\n<li><a href=\"guide/providers\">Providers</a></li>\n<li><a href=\"guide/module-types\">Types of Feature Modules</a></li>\n<li><a href=\"https://web.dev/route-level-code-splitting-in-angular\">Route-level code-splitting in Angular</a></li>\n<li><a href=\"https://web.dev/route-preloading-in-angular\">Route preloading strategies in Angular</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Tue Oct 24 2023</div>\n</div>\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/feature-modules\n - guide/module-types\n - guide/providers\n - guide/router\n - guide/singleton-services\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/core/ApplicationConfig\n - api/core/Component\n - api/core/NgModule\n - api/core/model\n - api/router/ActivatedRoute\n - api/router/ActivatedRouteSnapshot\n - api/router/PreloadAllModules\n - api/router/Resolve\n - api/router/Router\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/RouterStateSnapshot\n - api/router/Routes\n - api/router/provideRouter\n - api/router/withPreloading\n - guide/deprecations#loadChildren\n - guide/lazy-loading-ngmodules#add-another-feature-module\n - guide/lazy-loading-ngmodules#config-routes\n - guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\n - guide/lazy-loading-ngmodules#forroot-and-forchild\n - guide/lazy-loading-ngmodules#imports-and-route-configuration\n - guide/lazy-loading-ngmodules#inside-the-feature-module\n - guide/lazy-loading-ngmodules#lazy-loading-basics\n - guide/lazy-loading-ngmodules#lazy-loading-feature-modules\n - guide/lazy-loading-ngmodules#module-based-application\n - guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\n - guide/lazy-loading-ngmodules#preloading\n - guide/lazy-loading-ngmodules#preloading-component-data\n - guide/lazy-loading-ngmodules#preloading-modules-and-standalone-components\n - guide/lazy-loading-ngmodules#resolvers\n - guide/lazy-loading-ngmodules#set-up-an-application\n - guide/lazy-loading-ngmodules#set-up-the-ui\n - guide/lazy-loading-ngmodules#standalone-application\n - guide/lazy-loading-ngmodules#step-by-step\n - guide/lazy-loading-ngmodules#step-by-step-setup\n - guide/lazy-loading-ngmodules#troubleshooting-lazy-loading-modules\n - guide/lazy-loading-ngmodules#verify-lazy-loading\n - guide/module-types\n - guide/ngmodules\n - guide/providers\n - guide/router\n - guide/router-tutorial-toh#preloading-background-loading-of-feature-areas\n - guide/singleton-services\n - guide/singleton-services#forRoot\n - https://web.dev/route-level-code-splitting-in-angular\n - https://web.dev/route-preloading-in-angular\n-->"
}