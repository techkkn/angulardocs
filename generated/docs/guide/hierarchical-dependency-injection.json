{
  "id": "guide/hierarchical-dependency-injection",
  "title": "Hierarchical injectors",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"hierarchical-injectors\">Hierarchical injectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#hierarchical-injectors\"><i class=\"material-icons\">link</i></a></h1>\n<p>Injectors in Angular have rules that you can leverage to achieve the desired visibility of injectables in your applications.\nBy understanding these rules, you can determine whether to declare a provider at the application level, in a Component, or in a Directive.</p>\n<div class=\"alert is-helpful\">\n<p>This topic uses the following pictographs.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">html entities</th>\n<th align=\"left\">pictographs</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>üå∫</code></td>\n<td align=\"left\">red hibiscus (<code>üå∫</code>)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>üåª</code></td>\n<td align=\"left\">sunflower (<code>üåª</code>)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>üå∑</code></td>\n<td align=\"left\">tulip (<code>üå∑</code>)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>üåø</code></td>\n<td align=\"left\">fern (<code>üåø</code>)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>üçÅ</code></td>\n<td align=\"left\">maple leaf (<code>üçÅ</code>)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>üê≥</code></td>\n<td align=\"left\">whale (<code>üê≥</code>)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>üê∂</code></td>\n<td align=\"left\">dog (<code>üê∂</code>)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ü¶î</code></td>\n<td align=\"left\">hedgehog (<code>ü¶î</code>)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>The applications you build with Angular can become quite large, and one way to manage this complexity is to split up the application into a well-defined tree of components.</p>\n<p>There can be sections of your page that works in a completely independent way than the rest of the application, with its own local copies of the services and other dependencies that it needs. Some of the services that these sections of the application use might be shared with other parts of the application, or with parent components that are further up in the component tree, while other dependencies are meant to be private.</p>\n<p>With hierarchical dependency injection, you can isolate sections of the application and give them their own private dependencies not shared with the rest of the application, or have parent components share certain dependencies with its child components only but not with the rest of the component tree, and so on. Hierarchical dependency injection enables you to share dependencies between different parts of the application only when and if you need to.</p>\n<h2 id=\"types-of-injector-hierarchies\">Types of injector hierarchies<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#types-of-injector-hierarchies\"><i class=\"material-icons\">link</i></a></h2>\n<p>Injectors in Angular have rules that you can leverage to\nachieve the desired visibility of injectables in your applications.\nBy understanding these rules, you can determine whether to declare a provider at the application level, in a Component, or in a Directive.</p>\n<p>Angular has two injector hierarchies:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Injector hierarchies</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> hierarchy</td>\n<td align=\"left\">Configure an <code>ElementInjector</code> in this hierarchy using <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> or <code>providers</code> array in <code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ElementInjector</code> hierarchy</td>\n<td align=\"left\">Created implicitly at each DOM element. An <code>ElementInjector</code> is empty by default unless you configure it in the <code>providers</code> property on <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> or <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code>.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"callout is-helpful\">\n<header>NgModule Based Applications</header>\n<p>For <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> based applications, you can provide dependencies with the <code>ModuleInjector</code> hierarchy using an <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> or <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> annotation.</p>\n</div>\n<p><a id=\"register-providers-injectable\"></a></p>\n<h3 id=\"environmentinjector\"><code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#environmentinjector\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> can be configured in one of two ways by using:</p>\n<ul>\n<li>The <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> <code>providedIn</code> property to refer to <code>root</code> or <code>platform</code></li>\n<li>The <code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> <code>providers</code> array</li>\n</ul>\n<div class=\"callout is-helpful\">\n<header>Tree-shaking and @Injectable()</header>\n<p>Using the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> <code>providedIn</code> property is preferable to using the <code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> <code>providers</code> array. With <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> <code>providedIn</code>, optimization tools can perform tree-shaking, which removes services that your application isn't using. This results in smaller bundle sizes.</p>\n<p>Tree-shaking is especially useful for a library because the application which uses the library may not have a need to inject it.\nRead more about <a href=\"guide/architecture-services#providing-services\">tree-shakable providers</a> in <a href=\"guide/architecture-services\">Introduction to services and dependency injection</a>.</p>\n</div>\n<p><code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> is configured by the <code><a href=\"api/core/ApplicationConfig#providers\" class=\"code-anchor\">ApplicationConfig.providers</a></code>.</p>\n<p>Provide services with the <code>providedIn</code> property of <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> as follows:</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'  // &#x3C;--provides this service in the root ElementInjector\n})\nexport class ItemService {\n  name = 'telephone';\n}\n\n</code-example>\n<p>The <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator identifies a service class.\nThe <code>providedIn</code> property configures a specific <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>, here <code>root</code>, which makes the service available in the <code>root</code> <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>.</p>\n<h3 id=\"moduleinjector\">ModuleInjector<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#moduleinjector\"><i class=\"material-icons\">link</i></a></h3>\n<p>In the case of <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> based applications, the ModuleInjector can be configured in one of two ways by using:</p>\n<ul>\n<li>The <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> <code>providedIn</code> property to refer to <code>root</code> or <code>platform</code></li>\n<li>The <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> <code>providers</code> array</li>\n</ul>\n<p><code>ModuleInjector</code> is configured by the <code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> and <code><a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code> property. <code>ModuleInjector</code> is a flattening of all the providers arrays that can be reached by following the <code><a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code> recursively.</p>\n<p>Child <code>ModuleInjector</code> hierarchies are created when lazy loading other <code>@NgModules</code>.</p>\n<h3 id=\"platform-injector\">Platform injector<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#platform-injector\"><i class=\"material-icons\">link</i></a></h3>\n<p>There are two more injectors above <code>root</code>, an additional <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> and <code>NullInjector()</code>.</p>\n<p>Consider how Angular bootstraps the application with the following in <code>main.ts</code>:</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\n<a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>(AppComponent, appConfig);\n\n</code-example>\n<p>The <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>()</code> method creates a child injector of the platform injector which is configured by the <code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> instance.\nThis is the <code>root</code> <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>.</p>\n<p>The <code><a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>()</code> method creates an injector configured by a <code>PlatformModule</code>, which contains platform-specific dependencies.\nThis allows multiple applications to share a platform configuration.\nFor example, a browser has only one URL bar, no matter how many applications you have running.\nYou can configure additional platform-specific providers at the platform level by supplying <code>extraProviders</code> using the <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a>()</code> function.</p>\n<p>The next parent injector in the hierarchy is the <code>NullInjector()</code>, which is the top of the tree.\nIf you've gone so far up the tree that you are looking for a service in the <code>NullInjector()</code>, you'll get an error unless you've used <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> because ultimately, everything ends at the <code>NullInjector()</code> and it returns an error or, in the case of <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>, <code>null</code>.\nFor more information on <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>, see the <a href=\"guide/hierarchical-dependency-injection#optional\"><code>@Optional()</code> section</a> of this guide.</p>\n<p>The following diagram represents the relationship between the <code>root</code> <code>ModuleInjector</code> and its parent injectors as the previous paragraphs describe.</p>\n<div class=\"lightbox\">\n<img alt=\"NullInjector, ModuleInjector, root injector\" src=\"generated/images/guide/dependency-injection/injectors.svg\" width=\"483\" height=\"377\">\n</div>\n<p>While the name <code>root</code> is a special alias, other <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> hierarchies don't have aliases.\nYou have the option to create <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> hierarchies whenever a dynamically loaded component is created, such as with the Router, which will create child <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> hierarchies.</p>\n<p>All requests forward up to the root injector, whether you configured it with the <code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> instance passed to the <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>()</code> method, or registered all providers with <code>root</code> in their own services.</p>\n<div class=\"callout is-helpful\">\n<header>@Injectable() vs. ApplicationConfig</header>\n<p>If you configure an app-wide provider in the <code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> of <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code>, it overrides one configured for <code>root</code> in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> metadata.\nYou can do this to configure a non-default provider of a service that is shared with multiple applications.</p>\n<p>Here is an example of the case where the component router configuration includes a non-default <a href=\"guide/router#location-strategy\">location strategy</a> by listing its provider in the <code>providers</code> list of the <code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>.</p>\n<code-example>\n providers: [\n  { provide: <a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a>, useClass: <a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a> }\n]\n</code-example>\n<p>For <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> based applications, configure app-wide providers in the <code>AppModule</code>.</p>\n</div>\n<h3 id=\"elementinjector\"><code>ElementInjector</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#elementinjector\"><i class=\"material-icons\">link</i></a></h3>\n<p>Angular creates <code>ElementInjector</code> hierarchies implicitly for each DOM element.</p>\n<p>Providing a service in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator using its <code>providers</code> or <code>viewProviders</code> property configures an <code>ElementInjector</code>.\nFor example, the following <code>TestComponent</code> configures the <code>ElementInjector</code> by providing the service as follows:</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  ‚Ä¶\n  providers: [{ provide: ItemService, useValue: { name: 'lamp' } }]\n})\nexport class TestComponent\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>See the <a href=\"guide/hierarchical-dependency-injection#resolution-rules\">resolution rules</a> section to understand the relationship between the <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> tree, the <code>ModuleInjector</code> tree, and the <code>ElementInjector</code> tree.</p>\n</div>\n<p>When you provide services in a component, that service is available by way of the <code>ElementInjector</code> at that component instance.\nIt may also be visible at child component/directives based on visibility rules described in the <a href=\"guide/hierarchical-dependency-injection#resolution-rules\">resolution rules</a> section.</p>\n<p>When the component instance is destroyed, so is that service instance.</p>\n<h4 id=\"directive-and-component\"><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> and <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#directive-and-component\"><i class=\"material-icons\">link</i></a></h4>\n<p>A component is a special type of directive, which means that just as <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> has a <code>providers</code> property, <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> does too.\nThis means that directives as well as components can configure providers, using the <code>providers</code> property.\nWhen you configure a provider for a component or directive using the <code>providers</code> property, that provider belongs to the <code>ElementInjector</code> of that component or directive.\nComponents and directives on the same element share an injector.</p>\n<p><a id=\"resolution-rules\"></a></p>\n<h2 id=\"resolution-rules\">Resolution rules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#resolution-rules\"><i class=\"material-icons\">link</i></a></h2>\n<p>When resolving a token for a component/directive, Angular resolves it in two phases:</p>\n<ol>\n<li>Against its parents in the <code>ElementInjector</code> hierarchy.</li>\n<li>Against its parents in the <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> hierarchy.</li>\n</ol>\n<p>When a component declares a dependency, Angular tries to satisfy that dependency with its own <code>ElementInjector</code>.\nIf the component's injector lacks the provider, it passes the request up to its parent component's <code>ElementInjector</code>.</p>\n<p>The requests keep forwarding up until Angular finds an injector that can handle the request or runs out of ancestor <code>ElementInjector</code> hierarchies.</p>\n<p>If Angular doesn't find the provider in any <code>ElementInjector</code> hierarchies, it goes back to the element where the request originated and looks in the <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> hierarchy.\nIf Angular still doesn't find the provider, it throws an error.</p>\n<p>If you have registered a provider for the same DI token at different levels, the first one Angular encounters is the one it uses to resolve the dependency.\nIf, for example, a provider is registered locally in the component that needs a service,\nAngular doesn't look for another provider of the same service.</p>\n<div class=\"alert is-helpful\">\n<p>For <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> based applications, Angular will search the <code>ModuleInjector</code> hierarchy if it cannot find a provider in the <code>ElementInjector</code> hierarchies.</p>\n</div>\n<h2 id=\"resolution-modifiers\">Resolution modifiers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#resolution-modifiers\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular's resolution behavior can be modified with <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>, <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code>, <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> and <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>.\nImport each of them from <code>@angular/core</code> and use each in the component class constructor or in the <code>inject</code> configuration when you inject your service.</p>\n<p>For a working application showcasing the resolution modifiers that this section covers, see the <live-example name=\"resolution-modifiers\">resolution modifiers example</live-example>.</p>\n<h3 id=\"types-of-modifiers\">Types of modifiers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#types-of-modifiers\"><i class=\"material-icons\">link</i></a></h3>\n<p>Resolution modifiers fall into three categories:</p>\n<ul>\n<li>What to do if Angular doesn't find what you're looking for, that is <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code></li>\n<li>Where to start looking, that is <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code></li>\n<li>Where to stop looking, <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> and <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code></li>\n</ul>\n<p>By default, Angular always starts at the current <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> and keeps searching all the way up.\nModifiers allow you to change the starting, or <em>self</em>, location and the ending location.</p>\n<p>Additionally, you can combine all of the modifiers except:</p>\n<ul>\n<li><code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> and <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code></li>\n<li><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> and <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code>.</li>\n</ul>\n<p><a id=\"optional\"></a></p>\n<h3 id=\"optional\"><code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#optional\"><i class=\"material-icons\">link</i></a></h3>\n<p><code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> allows Angular to consider a service you inject to be optional.\nThis way, if it can't be resolved at runtime, Angular resolves the service as <code>null</code>, rather than throwing an error.\nIn the following example, the service, <code>OptionalService</code>, isn't provided in the service, <code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>, <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code>, or component class, so it isn't available anywhere in the app.</p>\n<code-example header=\"src/app/optional/optional.component.ts\" path=\"resolution-modifiers/src/app/optional/optional.component.ts\" region=\"optional-component\">\nexport class OptionalComponent {\n  constructor(@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() public optional?: OptionalService) {}\n}\n\n</code-example>\n<h3 id=\"self\"><code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#self\"><i class=\"material-icons\">link</i></a></h3>\n<p>Use <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> so that Angular will only look at the <code>ElementInjector</code> for the current component or directive.</p>\n<p>A good use case for <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> is to inject a service but only if it is available on the current host element.\nTo avoid errors in this situation, combine <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> with <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>.</p>\n<p>For example, in the following <code>SelfComponent</code>, notice the injected <code>LeafService</code> in the constructor.</p>\n<code-example header=\"src/app/self-no-data/self-no-data.component.ts\" path=\"resolution-modifiers/src/app/self-no-data/self-no-data.component.ts\" region=\"self-no-data-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-self-no-data',\n  templateUrl: './self-no-data.component.html',\n  styleUrls: ['./self-no-data.component.css']\n})\nexport class SelfNoDataComponent {\n  constructor(@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>() @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() public leaf?: LeafService) { }\n}\n\n\n</code-example>\n<p>In this example, there is a parent provider and injecting the service will return the value, however, injecting the service with <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> and <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> will return <code>null</code> because <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> tells the injector to only search in the current host element.</p>\n<p>Another example shows the component class with a provider for <code>FlowerService</code>.\nIn this case, the injector looks no further than the current <code>ElementInjector</code> because it finds the <code>FlowerService</code> and returns the tulip <code>üå∑</code>.</p>\n<code-example header=\"src/app/self/self.component.ts\" path=\"resolution-modifiers/src/app/self/self.component.ts\" region=\"self-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-self',\n  templateUrl: './self.component.html',\n  styleUrls: ['./self.component.css'],\n  providers: [{ provide: FlowerService, useValue: { emoji: 'üå∑' } }]\n})\nexport class SelfComponent {\n  constructor(@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>() public flower: FlowerService) {}\n}\n\n</code-example>\n<h3 id=\"skipself\"><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#skipself\"><i class=\"material-icons\">link</i></a></h3>\n<p><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> is the opposite of <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code>.\nWith <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>, Angular starts its search for a service in the parent <code>ElementInjector</code>, rather than in the current one.\nSo if the parent <code>ElementInjector</code> were using the fern <code>üåø</code> value for <code>emoji</code>, but you had maple leaf <code>üçÅ</code> in the component's <code>providers</code> array, Angular would ignore maple leaf <code>üçÅ</code> and use fern <code>üåø</code>.</p>\n<p>To see this in code, assume that the following value for <code>emoji</code> is what the parent component were using, as in this service:</p>\n<code-example header=\"src/app/leaf.service.ts\" path=\"resolution-modifiers/src/app/leaf.service.ts\" region=\"leafservice\">\nexport class LeafService {\n  emoji = 'üåø';\n}\n\n</code-example>\n<p>Imagine that in the child component, you had a different value, maple leaf <code>üçÅ</code> but you wanted to use the parent's value instead.\nThis is when you'd use <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>:</p>\n<code-example header=\"src/app/skipself/skipself.component.ts\" path=\"resolution-modifiers/src/app/skipself/skipself.component.ts\" region=\"skipself-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-skipself',\n  templateUrl: './skipself.component.html',\n  styleUrls: ['./skipself.component.css'],\n  // Angular would ignore this LeafService instance\n  providers: [{ provide: LeafService, useValue: { emoji: 'üçÅ' } }]\n})\nexport class SkipselfComponent {\n  // Use @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() in the constructor\n  constructor(@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() public leaf: LeafService) { }\n}\n\n</code-example>\n<p>In this case, the value you'd get for <code>emoji</code> would be fern <code>üåø</code>, not maple leaf <code>üçÅ</code>.</p>\n<h4 id=\"skipself-with-optional\"><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> with <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#skipself-with-optional\"><i class=\"material-icons\">link</i></a></h4>\n<p>Use <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> with <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> to prevent an error if the value is <code>null</code>.\nIn the following example, the <code>Person</code> service is injected in the constructor.\n<code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> tells Angular to skip the current injector and <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> will prevent an error should the <code>Person</code> service be <code>null</code>.</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nclass Person {\n  constructor(@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() parent?: Person) {}\n}\n\n</code-example>\n<h3 id=\"host\"><code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#host\"><i class=\"material-icons\">link</i></a></h3>\n<p><code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> lets you designate a component as the last stop in the injector tree when searching for providers.\nEven if there is a service instance further up the tree, Angular won't continue looking.\nUse <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> as follows:</p>\n<code-example header=\"src/app/host/host.component.ts\" path=\"resolution-modifiers/src/app/host/host.component.ts\" region=\"host-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-host',\n  templateUrl: './host.component.html',\n  styleUrls: ['./host.component.css'],\n  //  provide the service\n  providers: [{ provide: FlowerService, useValue: { emoji: 'üå∑' } }],\n  imports: [HostChildComponent]\n})\nexport class HostComponent {\n  // use @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() in the constructor when injecting the service\n  constructor(@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() public flower?: FlowerService) { }\n\n}\n\n</code-example>\n<p>Since <code>HostComponent</code> has <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> in its constructor, no matter what the parent of <code>HostComponent</code> might have as a <code>flower.emoji</code> value, the <code>HostComponent</code> will use tulip <code>üå∑</code>.</p>\n<h2 id=\"logical-structure-of-the-template\">Logical structure of the template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#logical-structure-of-the-template\"><i class=\"material-icons\">link</i></a></h2>\n<p>When you provide services in the component class, services are visible within the <code>ElementInjector</code> tree relative to where and how you provide those services.</p>\n<p>Understanding the underlying logical structure of the Angular template will give you a foundation for configuring services and in turn control their visibility.</p>\n<p>Components are used in your templates, as in the following example:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;app-root>\n  &#x3C;app-child>&#x3C;/app-child>\n&#x3C;/app-root>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Usually, you declare the components and their templates in separate files.\nFor the purposes of understanding how the injection system works, it is useful to look at them from the point of view of a combined logical tree.\nThe term <em>logical</em> distinguishes it from the render tree, which is your application's DOM tree.\nTo mark the locations of where the component templates are located, this guide uses the <code>&#x3C;#VIEW></code> pseudo-element, which doesn't actually exist in the render tree and is present for mental model purposes only.</p>\n</div>\n<p>The following is an example of how the <code>&#x3C;app-root></code> and <code>&#x3C;app-child></code> view trees are combined into a single logical tree:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;app-root>\n  &#x3C;#VIEW>\n    &#x3C;app-child>\n     &#x3C;#VIEW>\n       ‚Ä¶content goes here‚Ä¶\n     &#x3C;/#VIEW>\n    &#x3C;/app-child>\n  &#x3C;/#VIEW>\n&#x3C;/app-root>\n\n</code-example>\n<p>Understanding the idea of the <code>&#x3C;#VIEW></code> demarcation is especially significant when you configure services in the component class.</p>\n<h2 id=\"providing-services-in-component\">Providing services in <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#providing-services-in-component\"><i class=\"material-icons\">link</i></a></h2>\n<p>How you provide services using a <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> (or <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code>) decorator determines their visibility.\nThe following sections demonstrate <code>providers</code> and <code>viewProviders</code> along with ways to modify service visibility with <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> and <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>.</p>\n<p>A component class can provide services in two ways:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Arrays</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">With a <code>providers</code> array</td>\n<td align=\"left\"><code-example format=\"typescript\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ \n¬† ‚Ä¶ \n¬† providers: [ \n¬†¬†¬† {provide: FlowerService, useValue: {emoji: 'üå∫'}} \n¬† ] \n}) </code-example></td>\n</tr>\n<tr>\n<td align=\"left\">With a <code>viewProviders</code> array</td>\n<td align=\"left\"><code-example format=\"typescript\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ \n¬† ‚Ä¶ \n¬†viewProviders: [ \n¬†¬†¬† {provide: AnimalService, useValue: {emoji: 'üê∂'}} \n¬† ] \n}) </code-example></td>\n</tr>\n</tbody>\n</table>\n<p>To understand how the <code>providers</code> and <code>viewProviders</code> influence service visibility differently, the following sections build a <live-example name=\"providers-viewproviders\"></live-example> step-by-step and compare the use of <code>providers</code> and <code>viewProviders</code> in code and a logical tree.</p>\n<div class=\"alert is-helpful\">\n<p>In the logical tree, you'll find <code>@Provide</code>, <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code>, and <code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>, which are not real HTML attributes but are here to demonstrate what is going on under the hood.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Angular service attribute</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(Token)=>Value </code-example></td>\n<td align=\"left\">Demonstrates that if <code>Token</code> is injected at this location in the logical tree its value would be <code>Value</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @Provide(Token=Value) </code-example></td>\n<td align=\"left\">Demonstrates that there is a declaration of <code>Token</code> provider with value <code>Value</code> at this location in the logical tree.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>(Token) </code-example></td>\n<td align=\"left\">Demonstrates that a fallback <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> should be used at this location.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"example-app-structure\">Example app structure<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#example-app-structure\"><i class=\"material-icons\">link</i></a></h3>\n<p>The example application has a <code>FlowerService</code> provided in <code>root</code> with an <code>emoji</code> value of red hibiscus <code>üå∫</code>.</p>\n<code-example header=\"src/app/flower.service.ts\" path=\"providers-viewproviders/src/app/flower.service.ts\" region=\"flowerservice\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class FlowerService {\n  emoji = 'üå∫';\n}\n\n</code-example>\n<p>Consider an application with only an <code>AppComponent</code> and a <code>ChildComponent</code>.\nThe most basic rendered view would look like nested HTML elements such as the following:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;app-root> &#x3C;!-- AppComponent selector -->\n    &#x3C;app-child> &#x3C;!-- ChildComponent selector -->\n    &#x3C;/app-child>\n&#x3C;/app-root>\n\n</code-example>\n<p>However, behind the scenes, Angular uses a logical view representation as follows when resolving injection requests:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;app-root> &#x3C;!-- AppComponent selector -->\n    &#x3C;#VIEW>\n        &#x3C;app-child> &#x3C;!-- ChildComponent selector -->\n            &#x3C;#VIEW>\n            &#x3C;/#VIEW>\n        &#x3C;/app-child>\n    &#x3C;/#VIEW>\n&#x3C;/app-root>\n\n</code-example>\n<p>The <code>&#x3C;#VIEW></code> here represents an instance of a template.\nNotice that each component has its own <code>&#x3C;#VIEW></code>.</p>\n<p>Knowledge of this structure can inform how you provide and inject your services, and give you complete control of service visibility.</p>\n<p>Now, consider that <code>&#x3C;app-root></code> injects the <code>FlowerService</code>:</p>\n<code-example header=\"src/app/app.component.ts\" path=\"providers-viewproviders/src/app/app.component.1.ts\" region=\"injection\">\nexport class AppComponent  {\n  constructor(public flower: FlowerService) {}\n}\n\n</code-example>\n<p>Add a binding to the <code>&#x3C;app-root></code> template to visualize the result:</p>\n<code-example header=\"src/app/app.component.html\" path=\"providers-viewproviders/src/app/app.component.html\" region=\"binding-flower\">\n&#x3C;p>Emoji from FlowerService: {{flower.emoji}}&#x3C;/p>\n\n</code-example>\n<p>The output in the view would be:</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nEmoji from FlowerService: üå∫\n\n</code-example>\n<p>In the logical tree, this would be represented as follows:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService) flower=>\"üå∫\">\n  &#x3C;#VIEW>\n    &#x3C;p>Emoji from FlowerService: {{flower.emoji}} (üå∫)&#x3C;/p>\n    &#x3C;app-child>\n      &#x3C;#VIEW>\n      &#x3C;/#VIEW>\n    &#x3C;/app-child>\n  &#x3C;/#VIEW>\n&#x3C;/app-root>\n\n</code-example>\n<p>When <code>&#x3C;app-root></code> requests the <code>FlowerService</code>, it is the injector's job to resolve the <code>FlowerService</code> token.\nThe resolution of the token happens in two phases:</p>\n<ol>\n<li>\n<p>The injector determines the starting location in the logical tree and an ending location of the search.\nThe injector begins with the starting location and looks for the token at each level in the logical tree.\nIf the token is found it is returned.</p>\n</li>\n<li>\n<p>If the token is not found, the injector looks for the closest parent <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> to delegate the request to.</p>\n</li>\n</ol>\n<p>In the example case, the constraints are:</p>\n<ol>\n<li>\n<p>Start with <code>&#x3C;#VIEW></code> belonging to <code>&#x3C;app-root></code> and end with <code>&#x3C;app-root></code>.</p>\n<ul>\n<li>\n<p>Normally the starting point for search is at the point of injection.\nHowever, in this case <code>&#x3C;app-root></code> <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>s are special in that they also include their own <code>viewProviders</code>, which is why the search starts at <code>&#x3C;#VIEW></code> belonging to <code>&#x3C;app-root></code>.\nThis would not be the case for a directive matched at the same location.</p>\n</li>\n<li>\n<p>The ending location happens to be the same as the component itself, because it is the topmost component in this application.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The <code>ElementInjector</code> provided by the <code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> acts as the fallback injector when the injection token can't be found in the <code>ElementInjector</code> hierarchies.</p>\n</li>\n</ol>\n<h3 id=\"using-the-providers-array\">Using the <code>providers</code> array<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#using-the-providers-array\"><i class=\"material-icons\">link</i></a></h3>\n<p>Now, in the <code>ChildComponent</code> class, add a provider for <code>FlowerService</code> to demonstrate more complex resolution rules in the upcoming sections:</p>\n<code-example header=\"src/app/child.component.ts\" path=\"providers-viewproviders/src/app/child/child.component.1.ts\" region=\"flowerservice\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-child',\n  templateUrl: './child.component.html',\n  styleUrls: ['./child.component.css'],\n  // use the providers array to provide a service\n  providers: [{ provide: FlowerService, useValue: { emoji: 'üåª' } }]\n})\n\nexport class ChildComponent {\n  // inject the service\n  constructor( public flower: FlowerService) { }\n}\n\n\n</code-example>\n<p>Now that the <code>FlowerService</code> is provided in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator, when the <code>&#x3C;app-child></code> requests the service, the injector has only to look as far as the <code>ElementInjector</code> in the <code>&#x3C;app-child></code>.\nIt won't have to continue the search any further through the injector tree.</p>\n<p>The next step is to add a binding to the <code>ChildComponent</code> template.</p>\n<code-example header=\"src/app/child.component.html\" path=\"providers-viewproviders/src/app/child/child.component.html\" region=\"flower-binding\">\n&#x3C;p>Emoji from FlowerService: {{flower.emoji}}&#x3C;/p>\n\n</code-example>\n<p>To render the new values, add <code>&#x3C;app-child></code> to the bottom of the <code>AppComponent</code> template so the view also displays the sunflower:</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nChild Component\nEmoji from FlowerService: üåª\n\n</code-example>\n<p>In the logical tree, this is represented as follows:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService) flower=>\"üå∫\">\n  &#x3C;#VIEW>\n    &#x3C;p>Emoji from FlowerService: {{flower.emoji}} (üå∫)&#x3C;/p>\n    &#x3C;app-child @Provide(FlowerService=\"üåª\")\n               @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService)=>\"üåª\"> &#x3C;!-- search ends here -->\n      &#x3C;#VIEW> &#x3C;!-- search starts here -->\n        &#x3C;h2>Child <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>&#x3C;/h2>\n        &#x3C;p>Emoji from FlowerService: {{flower.emoji}} (üåª)&#x3C;/p>\n      &#x3C;/#VIEW>\n    &#x3C;/app-child>\n  &#x3C;/#VIEW>\n&#x3C;/app-root>\n\n</code-example>\n<p>When <code>&#x3C;app-child></code> requests the <code>FlowerService</code>, the injector begins its search at the <code>&#x3C;#VIEW></code> belonging to <code>&#x3C;app-child></code> (<code>&#x3C;#VIEW></code> is included because it is injected from <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code>) and ends with <code>&#x3C;app-child></code>.\nIn this case, the <code>FlowerService</code> is resolved in the <code>providers</code> array with sunflower <code>üåª</code> of the <code>&#x3C;app-child></code>.\nThe injector doesn't have to look any further in the injector tree.\nIt stops as soon as it finds the <code>FlowerService</code> and never sees the red hibiscus <code>üå∫</code>.</p>\n<p><a id=\"use-view-providers\"></a></p>\n<h3 id=\"using-the-viewproviders-array\">Using the <code>viewProviders</code> array<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#using-the-viewproviders-array\"><i class=\"material-icons\">link</i></a></h3>\n<p>Use the <code>viewProviders</code> array as another way to provide services in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator.\nUsing <code>viewProviders</code> makes services visible in the <code>&#x3C;#VIEW></code>.</p>\n<div class=\"is-helpful alert\">\n<p>The steps are the same as using the <code>providers</code> array, with the exception of using the <code>viewProviders</code> array instead.</p>\n<p>For step-by-step instructions, continue with this section.\nIf you can set it up on your own, skip ahead to <a href=\"guide/hierarchical-dependency-injection#modify-visibility\">Modifying service availability</a>.</p>\n</div>\n<p>The example application features a second service, the <code>AnimalService</code> to demonstrate <code>viewProviders</code>.</p>\n<p>First, create an <code>AnimalService</code> with an <code>emoji</code> property of whale <code>üê≥</code>:</p>\n<code-example header=\"src/app/animal.service.ts\" path=\"providers-viewproviders/src/app/animal.service.ts\" region=\"animal-service\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class AnimalService {\n  emoji = 'üê≥';\n}\n\n</code-example>\n<p>Following the same pattern as with the <code>FlowerService</code>, inject the <code>AnimalService</code> in the <code>AppComponent</code> class:</p>\n<code-example header=\"src/app/app.component.ts\" path=\"providers-viewproviders/src/app/app.component.ts\" region=\"inject-animal-service\">\nexport class AppComponent  {\n  constructor(public flower: FlowerService, public animal: AnimalService) {}\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>You can leave all the <code>FlowerService</code> related code in place as it will allow a comparison with the <code>AnimalService</code>.</p>\n</div>\n<p>Add a <code>viewProviders</code> array and inject the <code>AnimalService</code> in the <code>&#x3C;app-child></code> class, too, but give <code>emoji</code> a different value.\nHere, it has a value of dog <code>üê∂</code>.</p>\n<code-example header=\"src/app/child.component.ts\" path=\"providers-viewproviders/src/app/child/child.component.ts\" region=\"provide-animal-service\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-child',\n  templateUrl: './child.component.html',\n  styleUrls: ['./child.component.css'],\n  // provide services\n  providers: [{ provide: FlowerService, useValue: { emoji: 'üåª' } }],\n  viewProviders: [{ provide: AnimalService, useValue: { emoji: 'üê∂' } }],\n  imports: [InspectorComponent]\n})\n\nexport class ChildComponent {\n  // inject service\n  constructor( public flower: FlowerService, public animal: AnimalService) { }\n}\n\n</code-example>\n<p>Add bindings to the <code>ChildComponent</code> and the <code>AppComponent</code> templates.\nIn the <code>ChildComponent</code> template, add the following binding:</p>\n<code-example header=\"src/app/child.component.html\" path=\"providers-viewproviders/src/app/child/child.component.html\" region=\"animal-binding\">\n&#x3C;p>Emoji from AnimalService: {{animal.emoji}}&#x3C;/p>\n\n</code-example>\n<p>Additionally, add the same to the <code>AppComponent</code> template:</p>\n<code-example header=\"src/app/app.component.html\" path=\"providers-viewproviders/src/app/app.component.html\" region=\"binding-animal\">\n&#x3C;p>Emoji from AnimalService: {{animal.emoji}}&#x3C;/p>\n\n</code-example>\n<p>Now you should see both values in the browser:</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nAppComponent\nEmoji from AnimalService: üê≥\n\nChild Component\nEmoji from AnimalService: üê∂\n\n</code-example>\n<p>The logic tree for this example of <code>viewProviders</code> is as follows:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n         @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService) animal=>\"üê≥\">\n  &#x3C;#VIEW>\n    &#x3C;app-child>\n      &#x3C;#VIEW @Provide(AnimalService=\"üê∂\")\n            @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=>\"üê∂\")>\n       &#x3C;!-- ^^using viewProviders means AnimalService is available in &#x3C;#VIEW>-->\n       &#x3C;p>Emoji from AnimalService: {{animal.emoji}} (üê∂)&#x3C;/p>\n      &#x3C;/#VIEW>\n    &#x3C;/app-child>\n  &#x3C;/#VIEW>\n&#x3C;/app-root>\n\n</code-example>\n<p>Just as with the <code>FlowerService</code> example, the <code>AnimalService</code> is provided in the <code>&#x3C;app-child></code> <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator.\nThis means that since the injector first looks in the <code>ElementInjector</code> of the component, it finds the <code>AnimalService</code> value of dog <code>üê∂</code>.\nIt doesn't need to continue searching the <code>ElementInjector</code> tree, nor does it need to search the <code>ModuleInjector</code>.</p>\n<h3 id=\"providers-vs-viewproviders\"><code>providers</code> vs. <code>viewProviders</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#providers-vs-viewproviders\"><i class=\"material-icons\">link</i></a></h3>\n<p>To see the difference between using <code>providers</code> and <code>viewProviders</code>, add another component to the example and call it <code>InspectorComponent</code>.\n<code>InspectorComponent</code> will be a child of the <code>ChildComponent</code>.\nIn <code>inspector.component.ts</code>, inject the <code>FlowerService</code> and <code>AnimalService</code> in the constructor:</p>\n<code-example header=\"src/app/inspector/inspector.component.ts\" path=\"providers-viewproviders/src/app/inspector/inspector.component.ts\" region=\"injection\">\nexport class InspectorComponent {\n  constructor(public flower: FlowerService, public animal: AnimalService) { }\n}\n\n</code-example>\n<p>You do not need a <code>providers</code> or <code>viewProviders</code> array.\nNext, in <code>inspector.component.html</code>, add the same markup from previous components:</p>\n<code-example header=\"src/app/inspector/inspector.component.html\" path=\"providers-viewproviders/src/app/inspector/inspector.component.html\" region=\"binding\">\n&#x3C;p>Emoji from FlowerService: {{flower.emoji}}&#x3C;/p>\n&#x3C;p>Emoji from AnimalService: {{animal.emoji}}&#x3C;/p>\n\n</code-example>\n<p>Remember to add the <code>InspectorComponent</code> to the <code>ChildComponent</code> <code>imports</code> array.</p>\n<code-example header=\"src/app/child/child.component.ts\" language=\"typescript\" format=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  ...\n  imports: [InspectorComponent]\n})\n\n</code-example>\n<p>Next, make sure your <code>child.component.html</code> contains the following:</p>\n<code-example header=\"src/app/child/child.component.html\" path=\"providers-viewproviders/src/app/child/child.component.html\" region=\"child-component\">\n&#x3C;p>Emoji from FlowerService: {{flower.emoji}}&#x3C;/p>\n&#x3C;p>Emoji from AnimalService: {{animal.emoji}}&#x3C;/p>\n\n&#x3C;div class=\"container\">\n  &#x3C;h3>Content projection&#x3C;/h3>\n\t&#x3C;ng-content>&#x3C;/ng-content>\n&#x3C;/div>\n\n&#x3C;h3>Inside the view&#x3C;/h3>\n&#x3C;app-inspector>&#x3C;/app-inspector>\n\n</code-example>\n<p>The first two lines, with the bindings, are there from previous steps.\nThe new parts are  <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> and <code>&#x3C;app-inspector></code>.\n<code><a href=\"api/core/ng-content\" class=\"code-anchor\">&#x3C;ng-content></a></code> allows you to project content, and <code>&#x3C;app-inspector></code> inside the <code>ChildComponent</code> template makes the <code>InspectorComponent</code> a child component of <code>ChildComponent</code>.</p>\n<p>Next, add the following to <code>app.component.html</code> to take advantage of content projection.</p>\n<code-example header=\"src/app/app.component.html\" path=\"providers-viewproviders/src/app/app.component.html\" region=\"content-projection\">\n&#x3C;app-child>&#x3C;app-inspector>&#x3C;/app-inspector>&#x3C;/app-child>\n\n</code-example>\n<p>The browser now renders the following, omitting the previous examples for brevity:</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\n//‚Ä¶Omitting previous examples. The following applies to this section.\n\nContent projection: this is coming from content. Doesn't get to see\npuppy because the puppy is declared inside the view only.\n\nEmoji from FlowerService: üåª\nEmoji from AnimalService: üê≥\n\nEmoji from FlowerService: üåª\nEmoji from AnimalService: üê∂\n\n</code-example>\n<p>These four bindings demonstrate the difference between <code>providers</code> and <code>viewProviders</code>.\nSince the dog <code>üê∂</code> is declared inside the <code>&#x3C;#VIEW></code>, it isn't visible to the projected content.\nInstead, the projected content sees the whale <code>üê≥</code>.</p>\n<p>The next section though, where <code>InspectorComponent</code> is a child component of <code>ChildComponent</code>, <code>InspectorComponent</code> is inside the <code>&#x3C;#VIEW></code>, so when it asks for the <code>AnimalService</code>, it sees the dog <code>üê∂</code>.</p>\n<p>The <code>AnimalService</code> in the logical tree would look like this:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n         @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService) animal=>\"üê≥\">\n  &#x3C;#VIEW>\n    &#x3C;app-child>\n      &#x3C;#VIEW @Provide(AnimalService=\"üê∂\")\n            @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=>\"üê∂\")>\n        &#x3C;!-- ^^using viewProviders means AnimalService is available in &#x3C;#VIEW>-->\n        &#x3C;p>Emoji from AnimalService: {{animal.emoji}} (üê∂)&#x3C;/p>\n  \n        &#x3C;div class=\"container\">\n          &#x3C;h3>Content projection&#x3C;/h3>\n          &#x3C;app-inspector @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService) animal=>\"üê≥\">\n            &#x3C;p>Emoji from AnimalService: {{animal.emoji}} (üê≥)&#x3C;/p>\n          &#x3C;/app-inspector>\n        &#x3C;/div>\n\n        &#x3C;app-inspector>\n          &#x3C;#VIEW @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService) animal=>\"üê∂\">\n            &#x3C;p>Emoji from AnimalService: {{animal.emoji}} (üê∂)&#x3C;/p>\n          &#x3C;/#VIEW>\n        &#x3C;/app-inspector>\n      &#x3C;/#VIEW>\n    &#x3C;/app-child>\n  &#x3C;/#VIEW>\n&#x3C;/app-root>\n\n</code-example>\n<p>The projected content of <code>&#x3C;app-inspector></code> sees the whale <code>üê≥</code>, not the dog <code>üê∂</code>, because the dog <code>üê∂</code> is inside the <code>&#x3C;app-child></code> <code>&#x3C;#VIEW></code>.\nThe <code>&#x3C;app-inspector></code> can only see the dog <code>üê∂</code> if it is also within the <code>&#x3C;#VIEW></code>.</p>\n<p><a id=\"modify-visibility\"></a></p>\n<h2 id=\"modifying-service-visibility\">Modifying service visibility<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#modifying-service-visibility\"><i class=\"material-icons\">link</i></a></h2>\n<p>This section describes how to limit the scope of the beginning and ending <code>ElementInjector</code> using the visibility decorators <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>, <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code>, and <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>.</p>\n<h3 id=\"visibility-of-provided-tokens\">Visibility of provided tokens<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#visibility-of-provided-tokens\"><i class=\"material-icons\">link</i></a></h3>\n<p>Visibility decorators influence where the search for the injection token begins and ends in the logic tree.\nTo do this, place visibility decorators at the point of injection, that is, the <code>constructor()</code>, rather than at a point of declaration.</p>\n<p>To alter where the injector starts looking for <code>FlowerService</code>, add <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> to the <code>&#x3C;app-child></code> <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code> declaration for the <code>FlowerService</code>.\nThis declaration is in the <code>&#x3C;app-child></code> constructor as shown in <code>child.component.ts</code>:</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nconstructor(@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() public flower : FlowerService) { }\n\n</code-example>\n<p>With <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>, the <code>&#x3C;app-child></code> injector doesn't look to itself for the <code>FlowerService</code>.\nInstead, the injector starts looking for the <code>FlowerService</code> at the <code>ElementInjector</code> or the <code>&#x3C;app-root></code>, where it finds nothing.\nThen, it goes back to the <code>&#x3C;app-child></code> <code>ModuleInjector</code> and finds the red hibiscus <code>üå∫</code> value, which is available because the <code>&#x3C;app-child></code> <code>ModuleInjector</code> and the <code>&#x3C;app-root></code> <code>ModuleInjector</code> are flattened into one <code>ModuleInjector</code>.\nThus, the UI renders the following:</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nEmoji from FlowerService: üå∫\n\n</code-example>\n<p>In a logical tree, this same idea might look like this:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService) flower=>\"üå∫\">\n  &#x3C;#VIEW>\n    &#x3C;app-child @Provide(FlowerService=\"üåª\")>\n      &#x3C;#VIEW @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService, <a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>)=>\"üå∫\">\n        &#x3C;!-- With <a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>, the injector looks to the next injector up the tree -->\n      &#x3C;/#VIEW>\n    &#x3C;/app-child>\n  &#x3C;/#VIEW>\n&#x3C;/app-root>\n\n</code-example>\n<p>Though <code>&#x3C;app-child></code> provides the sunflower <code>üåª</code>, the application renders the red hibiscus <code>üå∫</code> because <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>  causes the current injector to skip itself and look to its parent.</p>\n<p>If you now add <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> (in addition to the <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>) to the <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code> of the <code>FlowerService</code>, the result will be <code>null</code>.\nThis is because <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> limits the upper bound of the search to the <code>&#x3C;#VIEW></code>.\nHere's the idea in the logical tree:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService) flower=>\"üå∫\">\n  &#x3C;#VIEW> &#x3C;!-- end search here with null-->\n    &#x3C;app-child @Provide(FlowerService=\"üåª\")> &#x3C;!-- start search here -->\n      &#x3C;#VIEW @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService, @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>, @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>, @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>)=>null>\n      &#x3C;/#VIEW>\n      &#x3C;/app-parent>\n  &#x3C;/#VIEW>\n&#x3C;/app-root>\n\n</code-example>\n<p>Here, the services and their values are the same, but <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> stops the injector from looking any further than the <code>&#x3C;#VIEW></code> for <code>FlowerService</code>, so it doesn't find it and returns <code>null</code>.</p>\n<div class=\"alert is-helpful\">\n<p>The example application uses <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> so the application does not throw an error, but the principles are the same.</p>\n</div>\n<h3 id=\"skipself-and-viewproviders\"><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> and <code>viewProviders</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#skipself-and-viewproviders\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>&#x3C;app-child></code> currently provides the <code>AnimalService</code> in the <code>viewProviders</code> array with the value of dog <code>üê∂</code>.\nBecause the injector has only to look at the <code>ElementInjector</code> of the <code>&#x3C;app-child></code> for the <code>AnimalService</code>, it never sees the whale <code>üê≥</code>.</p>\n<p>As in the <code>FlowerService</code> example, if you add <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> to the constructor for the <code>AnimalService</code>, the injector won't look in the  <code>ElementInjector</code> of the current <code>&#x3C;app-child></code> for the <code>AnimalService</code>.</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class ChildComponent {\n\n  // add @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()\n  constructor(@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() public animal : AnimalService) { }\n\n}\n\n</code-example>\n<p>Instead, the injector will begin at the <code>&#x3C;app-root></code> <code>ElementInjector</code>.\nRemember that the <code>&#x3C;app-child></code> class provides the <code>AnimalService</code> in the <code>viewProviders</code> array with a value of dog <code>üê∂</code>:</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-child',\n  ‚Ä¶\n  viewProviders:\n  [{ provide: AnimalService, useValue: { emoji: 'üê∂' } }]\n  ...\n})\n\n</code-example>\n<p>The logical tree looks like this with <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> in <code>&#x3C;app-child></code>:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n          @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=>\"üê≥\")>\n  &#x3C;#VIEW>&#x3C;!-- search begins here -->\n    &#x3C;app-child>\n      &#x3C;#VIEW @Provide(AnimalService=\"üê∂\")\n             @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService, <a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>=>\"üê≥\")>\n        &#x3C;!--Add @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a> -->\n      &#x3C;/#VIEW>\n    &#x3C;/app-child>\n  &#x3C;/#VIEW>\n&#x3C;/app-root>\n\n</code-example>\n<p>With <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> in the <code>&#x3C;app-child></code>, the injector begins its search for the <code>AnimalService</code> in the <code>&#x3C;app-root></code> <code>ElementInjector</code> and finds whale <code>üê≥</code>.</p>\n<h3 id=\"host-and-viewproviders\"><code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> and <code>viewProviders</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#host-and-viewproviders\"><i class=\"material-icons\">link</i></a></h3>\n<p>If you add <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> to the constructor for <code>AnimalService</code>, the result is dog <code>üê∂</code> because the injector finds the <code>AnimalService</code> in the <code>&#x3C;app-child></code> <code>&#x3C;#VIEW></code>.\nHere is the <code>viewProviders</code> array in the <code>&#x3C;app-child></code> class and <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> in the constructor:</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-child',\n  ‚Ä¶\n  viewProviders:\n  [{ provide: AnimalService, useValue: { emoji: 'üê∂' } }]\n  ...\n\n})\nexport class ChildComponent {\n  constructor(@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() public animal : AnimalService) { }\n}\n\n</code-example>\n<p><code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> causes the injector to look until it encounters the edge of the <code>&#x3C;#VIEW></code>.</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n          @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=>\"üê≥\")>\n  &#x3C;#VIEW>\n    &#x3C;app-child>\n      &#x3C;#VIEW @Provide(AnimalService=\"üê∂\")\n             @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService, @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>=>\"üê∂\")> &#x3C;!-- @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a> stops search here -->\n      &#x3C;/#VIEW>\n    &#x3C;/app-child>\n  &#x3C;/#VIEW>\n&#x3C;/app-root>\n\n</code-example>\n<p>Add a <code>viewProviders</code> array with a third animal, hedgehog <code>ü¶î</code>, to the <code>app.component.ts</code> <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> metadata:</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: [ './app.component.css' ],\n  viewProviders: [{ provide: AnimalService, useValue: { emoji: 'ü¶î' } }]\n  ...\n})\n\n</code-example>\n<p>Next, add <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> along with <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> to the constructor for the <code>Animal Service</code> in <code>child.component.ts</code>.\nHere are <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> and <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> in the <code>&#x3C;app-child></code> constructor:</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class ChildComponent {\n\n  constructor(\n  @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() public animal : AnimalService) { }\n\n}\n\n</code-example>\n<p>When <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> and <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> were applied to the <code>FlowerService</code>, which is in the <code>providers</code> array, the result was <code>null</code> because <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> starts its search in the <code>&#x3C;app-child></code> injector, but <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> stops searching at <code>&#x3C;#VIEW></code> ‚Äîwhere there is no <code>FlowerService</code>\nIn the logical tree, you can see that the <code>FlowerService</code> is visible in <code>&#x3C;app-child></code>, not its <code>&#x3C;#VIEW></code>.</p>\n<p>However, the <code>AnimalService</code>, which is provided in the <code>AppComponent</code> <code>viewProviders</code> array, is visible.</p>\n<p>The logical tree representation shows why this is:</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=>\"üê≥\")>\n  &#x3C;#VIEW @Provide(AnimalService=\"ü¶î\")\n         @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService, @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>)=>\"ü¶î\">\n    &#x3C;!-- ^^@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() starts here,  @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() stops here^^ -->\n    &#x3C;app-child>\n      &#x3C;#VIEW @Provide(AnimalService=\"üê∂\")\n             @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService, @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>, @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>, @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>)=>\"ü¶î\">\n               &#x3C;!-- Add @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a> ^^-->\n      &#x3C;/#VIEW>\n      &#x3C;/app-child>\n  &#x3C;/#VIEW>\n&#x3C;/app-root>\n\n</code-example>\n<p><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>, causes the injector to start its search for the <code>AnimalService</code> at the <code>&#x3C;app-root></code>, not the <code>&#x3C;app-child></code>, where the request originates, and <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> stops the search at the <code>&#x3C;app-root></code> <code>&#x3C;#VIEW></code>.\nSince <code>AnimalService</code> is provided by way of the <code>viewProviders</code> array, the injector finds hedgehog <code>ü¶î</code> in the <code>&#x3C;#VIEW></code>.</p>\n<p><a id=\"component-injectors\"></a></p>\n<h2 id=\"elementinjector-use-case-examples\"><code>ElementInjector</code> use case examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#elementinjector-use-case-examples\"><i class=\"material-icons\">link</i></a></h2>\n<p>The ability to configure one or more providers at different levels opens up useful possibilities.\nFor a look at the following scenarios in a working app, see the <live-example>heroes use case examples</live-example>.</p>\n<h3 id=\"scenario-service-isolation\">Scenario: service isolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#scenario-service-isolation\"><i class=\"material-icons\">link</i></a></h3>\n<p>Architectural reasons may lead you to restrict access to a service to the application domain where it belongs.\nFor example, the guide sample includes a <code>VillainsListComponent</code> that displays a list of villains.\nIt gets those villains from a <code>VillainsService</code>.</p>\n<p>If you provided <code>VillainsService</code> in the root <code>AppModule</code> (where you registered the <code>HeroesService</code>), that would make the <code>VillainsService</code> visible everywhere in the application, including the <em>Hero</em> workflows.\nIf you later modified the <code>VillainsService</code>, you could break something in a hero component somewhere.</p>\n<p>Instead, you can provide the <code>VillainsService</code> in the <code>providers</code> metadata of the <code>VillainsListComponent</code> like this:</p>\n<code-example header=\"src/app/villains-list.component.ts (metadata)\" path=\"hierarchical-dependency-injection/src/app/villains-list.component.ts\" region=\"metadata\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-villains-list',\n  templateUrl: './villains-list.component.html',\n  providers: [ VillainsService ],\n  imports: [ <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>, <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a> ]\n})\n\n</code-example>\n<p>By providing <code>VillainsService</code> in the <code>VillainsListComponent</code> metadata and nowhere else, the service becomes available only in the <code>VillainsListComponent</code> and its subcomponent tree.</p>\n<p><code>VillainService</code> is a singleton with respect to <code>VillainsListComponent</code> because that is where it is declared.\nAs long as <code>VillainsListComponent</code> does not get destroyed it will be the same instance of <code>VillainService</code> but if there are multiple instances of <code>VillainsListComponent</code>, then each instance of <code>VillainsListComponent</code> will have its own instance of <code>VillainService</code>.</p>\n<h3 id=\"scenario-multiple-edit-sessions\">Scenario: multiple edit sessions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#scenario-multiple-edit-sessions\"><i class=\"material-icons\">link</i></a></h3>\n<p>Many applications allow users to work on several open tasks at the same time.\nFor example, in a tax preparation application, the preparer could be working on several tax returns, switching from one to the other throughout the day.</p>\n<p>To demonstrate that scenario, imagine an outer <code>HeroListComponent</code> that displays a list of super heroes.</p>\n<p>To open a hero's tax return, the preparer clicks on a hero name, which opens a component for editing that return.\nEach selected hero tax return opens in its own component and multiple returns can be open at the same time.</p>\n<p>Each tax return component has the following characteristics:</p>\n<ul>\n<li>Is its own tax return editing session</li>\n<li>Can change a tax return without affecting a return in another component</li>\n<li>Has the ability to save the changes to its tax return or cancel them</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"Heroes in action\" src=\"generated/images/guide/dependency-injection/hid-heroes-anim.gif\" width=\"500\" height=\"384\">\n</div>\n<p>Suppose that the <code>HeroTaxReturnComponent</code> had logic to manage and restore changes.\nThat would be a straightforward task for a hero tax return.\nIn the real world, with a rich tax return data model, the change management would be tricky.\nYou could delegate that management to a helper service, as this example does.</p>\n<p>The <code>HeroTaxReturnService</code> caches a single <code>HeroTaxReturn</code>, tracks changes to that return, and can save or restore it.\nIt also delegates to the application-wide singleton <code>HeroService</code>, which it gets by injection.</p>\n<code-example header=\"src/app/hero-tax-return.service.ts\" path=\"hierarchical-dependency-injection/src/app/hero-tax-return.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HeroTaxReturn } from './hero';\nimport { HeroesService } from './heroes.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroTaxReturnService {\n  private currentTaxReturn!: HeroTaxReturn;\n  private originalTaxReturn!: HeroTaxReturn;\n\n  constructor(private heroService: HeroesService) { }\n\n  set taxReturn(htr: HeroTaxReturn) {\n    this.originalTaxReturn = htr;\n    this.currentTaxReturn  = htr.clone();\n  }\n\n  get taxReturn(): HeroTaxReturn {\n    return this.currentTaxReturn;\n  }\n\n  restoreTaxReturn() {\n    this.taxReturn = this.originalTaxReturn;\n  }\n\n  saveTaxReturn() {\n    this.taxReturn = this.currentTaxReturn;\n    this.heroService.saveTaxReturn(this.currentTaxReturn).subscribe();\n  }\n}\n\n\n</code-example>\n<p>Here is the <code>HeroTaxReturnComponent</code> that makes use of <code>HeroTaxReturnService</code>.</p>\n<code-example header=\"src/app/hero-tax-return.component.ts\" path=\"hierarchical-dependency-injection/src/app/hero-tax-return.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a> } from '@angular/core';\nimport { HeroTaxReturn } from './hero';\nimport { HeroTaxReturnService } from './hero-tax-return.service';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-hero-tax-return',\n  templateUrl: './hero-tax-return.component.html',\n  styleUrls: [ './hero-tax-return.component.css' ],\n  providers: [ HeroTaxReturnService ],\n\n</code-example>\n<p>The <em>tax-return-to-edit</em> arrives by way of the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property, which is implemented with getters and setters.\nThe setter initializes the component's own instance of the <code>HeroTaxReturnService</code> with the incoming return.\nThe getter always returns what that service says is the current state of the hero.\nThe component also asks the service to save and restore this tax return.</p>\n<p>This won't work if the service is an application-wide singleton.\nEvery component would share the same service instance, and each component would overwrite the tax return that belonged to another hero.</p>\n<p>To prevent this, configure the component-level injector of <code>HeroTaxReturnComponent</code> to provide the service, using the  <code>providers</code> property in the component metadata.</p>\n<code-example header=\"src/app/hero-tax-return.component.ts (providers)\" path=\"hierarchical-dependency-injection/src/app/hero-tax-return.component.ts\" region=\"providers\">\nproviders: [ HeroTaxReturnService ],\n\n</code-example>\n<p>The <code>HeroTaxReturnComponent</code> has its own provider of the <code>HeroTaxReturnService</code>.\nRecall that every component <em>instance</em> has its own injector.\nProviding the service at the component level ensures that <em>every</em> instance of the component gets a private instance of the service. This makes sure that no tax return gets overwritten.</p>\n<div class=\"alert is-helpful\">\n<p>The rest of the scenario code relies on other Angular features and techniques that you can learn about elsewhere in the documentation.\nYou can review it and download it from the <live-example></live-example>.</p>\n</div>\n<h3 id=\"scenario-specialized-providers\">Scenario: specialized providers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#scenario-specialized-providers\"><i class=\"material-icons\">link</i></a></h3>\n<p>Another reason to provide a service again at another level is to substitute a <em>more specialized</em> implementation of that service, deeper in the component tree.</p>\n<p>For example, consider a <code>Car</code> component that includes tire service information and depends on other services to provide more details about the car.</p>\n<p>The root injector, marked as (A), uses <em>generic</em> providers for details about <code>CarService</code> and <code>EngineService</code>.</p>\n<ol>\n<li>\n<p><code>Car</code> component (A).  Component (A) displays tire service data about a car and specifies generic services to provide more information about the car.</p>\n</li>\n<li>\n<p>Child component (B). Component (B) defines its own, <em>specialized</em> providers for <code>CarService</code> and <code>EngineService</code> that have special capabilities suitable for what's going on in component (B).</p>\n</li>\n<li>\n<p>Child component (C) as a child of Component (B). Component (C) defines its own, even <em>more specialized</em> provider for <code>CarService</code>.</p>\n</li>\n</ol>\n<div class=\"lightbox\">\n<img alt=\"car components\" src=\"generated/images/guide/dependency-injection/car-components.png\" width=\"338\" height=\"201\">\n</div>\n<p>Behind the scenes, each component sets up its own injector with zero, one, or more providers defined for that component itself.</p>\n<p>When you resolve an instance of <code>Car</code> at the deepest component (C), its injector produces: </p>\n<ul>\n<li>An instance of <code>Car</code> resolved by injector (C)</li>\n<li>An <code>Engine</code> resolved by injector (B)</li>\n<li>Its <code>Tires</code> resolved by the root injector (A).</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"car injector tree\" src=\"generated/images/guide/dependency-injection/injector-tree.png\" width=\"600\" height=\"248\">\n</div>\n<h2 id=\"more-on-dependency-injection\">More on dependency injection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#more-on-dependency-injection\"><i class=\"material-icons\">link</i></a></h2>\n<p>For more information on Angular dependency injection, see the <a href=\"guide/dependency-injection-providers\">DI Providers</a> and <a href=\"guide/dependency-injection-in-action\">DI in Action</a> guides.</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Wed Sep 06 2023</div>\n</div>\n\n<!-- links to this doc:\n - errors/NG0200\n - guide/dependency-injection\n - guide/dependency-injection-navtree\n - guide/dependency-injection-overview\n - guide/devtools\n - guide/example-apps-list\n - guide/glossary\n - guide/ngmodule-faq\n - guide/providers\n - guide/template-expression-operators\n - guide/upgrade\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/HashLocationStrategy\n - api/common/LocationStrategy\n - api/common/NgFor\n - api/core/ApplicationConfig\n - api/core/ApplicationConfig#providers\n - api/core/Component\n - api/core/Directive\n - api/core/EnvironmentInjector\n - api/core/EventEmitter\n - api/core/Host\n - api/core/Inject\n - api/core/Injectable\n - api/core/Injector\n - api/core/Input\n - api/core/NgModule\n - api/core/NgModule#imports\n - api/core/NgModule#providers\n - api/core/Optional\n - api/core/Output\n - api/core/Self\n - api/core/SkipSelf\n - api/core/ng-content\n - api/forms/FormsModule\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/bootstrapApplication\n - api/platform-browser/platformBrowser\n - guide/architecture-services\n - guide/architecture-services#providing-services\n - guide/dependency-injection-in-action\n - guide/dependency-injection-providers\n - guide/hierarchical-dependency-injection#directive-and-component\n - guide/hierarchical-dependency-injection#elementinjector\n - guide/hierarchical-dependency-injection#elementinjector-use-case-examples\n - guide/hierarchical-dependency-injection#environmentinjector\n - guide/hierarchical-dependency-injection#example-app-structure\n - guide/hierarchical-dependency-injection#hierarchical-injectors\n - guide/hierarchical-dependency-injection#host\n - guide/hierarchical-dependency-injection#host-and-viewproviders\n - guide/hierarchical-dependency-injection#logical-structure-of-the-template\n - guide/hierarchical-dependency-injection#modify-visibility\n - guide/hierarchical-dependency-injection#modifying-service-visibility\n - guide/hierarchical-dependency-injection#moduleinjector\n - guide/hierarchical-dependency-injection#more-on-dependency-injection\n - guide/hierarchical-dependency-injection#optional\n - guide/hierarchical-dependency-injection#platform-injector\n - guide/hierarchical-dependency-injection#providers-vs-viewproviders\n - guide/hierarchical-dependency-injection#providing-services-in-component\n - guide/hierarchical-dependency-injection#resolution-modifiers\n - guide/hierarchical-dependency-injection#resolution-rules\n - guide/hierarchical-dependency-injection#scenario-multiple-edit-sessions\n - guide/hierarchical-dependency-injection#scenario-service-isolation\n - guide/hierarchical-dependency-injection#scenario-specialized-providers\n - guide/hierarchical-dependency-injection#self\n - guide/hierarchical-dependency-injection#skipself\n - guide/hierarchical-dependency-injection#skipself-and-viewproviders\n - guide/hierarchical-dependency-injection#skipself-with-optional\n - guide/hierarchical-dependency-injection#types-of-injector-hierarchies\n - guide/hierarchical-dependency-injection#types-of-modifiers\n - guide/hierarchical-dependency-injection#using-the-providers-array\n - guide/hierarchical-dependency-injection#using-the-viewproviders-array\n - guide/hierarchical-dependency-injection#visibility-of-provided-tokens\n - guide/router#location-strategy\n-->"
}