{
  "id": "guide/router-tutorial",
  "title": "Using Angular routes in a single-page application",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"using-angular-routes-in-a-single-page-application\">Using Angular routes in a single-page application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#using-angular-routes-in-a-single-page-application\"><i class=\"material-icons\">link</i></a></h1>\n<p>This tutorial describes how to build a single-page application, SPA that uses multiple Angular routes.</p>\n<p>In a Single Page Application (SPA), all of your application's functions exist in a single HTML page.\nAs users access your application's features, the browser needs to render only the parts that matter to the user, instead of loading a new page.\nThis pattern can significantly improve your application's user experience.</p>\n<p>To define how users navigate through your application, you use routes.\nAdd routes to define how users navigate from one part of your application to another.\nYou can also configure routes to guard against unexpected or unauthorized behavior.</p>\n<p>To explore a sample application featuring the contents of this tutorial, see the <live-example></live-example>.</p>\n<h2 id=\"objectives\">Objectives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#objectives\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>Organize a sample application's features into modules.</li>\n<li>Define how to navigate to a component.</li>\n<li>Pass information to a component using a parameter.</li>\n<li>Structure routes by nesting several routes.</li>\n<li>Check whether users can access a route.</li>\n<li>Control whether the application can discard unsaved changes.</li>\n<li>Improve performance by pre-fetching route data and lazy loading feature modules.</li>\n<li>Require specific criteria to load components.</li>\n</ul>\n<h2 id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p>To complete this tutorial, you should have a basic understanding of the following concepts:</p>\n<ul>\n<li>JavaScript</li>\n<li>HTML</li>\n<li>CSS</li>\n<li><a href=\"cli\">Angular CLI</a></li>\n</ul>\n<p>You might find the <a href=\"tutorial/tour-of-heroes\">Tour of Heroes tutorial</a> helpful, but it is not required.</p>\n<h2 id=\"create-a-sample-application\">Create a sample application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#create-a-sample-application\"><i class=\"material-icons\">link</i></a></h2>\n<p>Using the Angular CLI, create a new application, <em>angular-router-sample</em>.\nThis application will have two components: <em>crisis-list</em> and <em>heroes-list</em>.</p>\n<ol>\n<li>\n<p>Create a new Angular project, <em>angular-router-sample</em>.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng new angular-router-sample\n\n</code-example>\n<p>When prompted with <code>Would you like to add Angular routing?</code>, select <code>N</code>.</p>\n<p>When prompted with <code>Which stylesheet format would you like to use?</code>, select <code>CSS</code>.</p>\n<p>After a few moments, a new project, <code>angular-router-sample</code>, is ready.</p>\n</li>\n<li>\n<p>From your terminal, navigate to the <code>angular-router-sample</code> directory.</p>\n</li>\n<li>\n<p>Create a component, <em>crisis-list</em>.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component crisis-list\n\n</code-example>\n</li>\n<li>\n<p>In your code editor, locate the file, <code>crisis-list.component.html</code> and replace the placeholder content with the following HTML.</p>\n<code-example header=\"src/app/crisis-list/crisis-list.component.html\" path=\"router-tutorial/src/app/crisis-list/crisis-list.component.html\">\n&#x3C;h3>CRISIS CENTER&#x3C;/h3>\n&#x3C;p>Get your crisis here&#x3C;/p>\n\n\n</code-example>\n</li>\n<li>\n<p>Create a second component, <em>heroes-list</em>.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component heroes-list\n\n</code-example>\n</li>\n<li>\n<p>In your code editor, locate the file, <code>heroes-list.component.html</code> and replace the placeholder content with the following HTML.</p>\n<code-example header=\"src/app/heroes-list/heroes-list.component.html\" path=\"router-tutorial/src/app/heroes-list/heroes-list.component.html\">\n&#x3C;h3>HEROES&#x3C;/h3>\n&#x3C;p>Get your heroes here&#x3C;/p>\n\n\n</code-example>\n</li>\n<li>\n<p>In your code editor, open the file, <code>app.component.html</code> and replace its contents with the following HTML.</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"setup\">\n&#x3C;h1>Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> Sample&#x3C;/h1>\n&#x3C;app-crisis-list>&#x3C;/app-crisis-list>\n&#x3C;app-heroes-list>&#x3C;/app-heroes-list>\n\n</code-example>\n</li>\n<li>\n<p>Verify that your new application runs as expected by running the <code>ng serve</code> command.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng serve\n\n</code-example>\n</li>\n<li>\n<p>Open a browser to <code>http://localhost:4200</code>.</p>\n<p>You should see a single web page, consisting of a title and the HTML of your two components.</p>\n</li>\n</ol>\n<h2 id=\"define-your-routes\">Define your routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#define-your-routes\"><i class=\"material-icons\">link</i></a></h2>\n<p>In this section, you'll define two routes:</p>\n<ul>\n<li>The route <code>/crisis-center</code> opens the <code>crisis-center</code> component.</li>\n<li>The route <code>/heroes-list</code> opens the <code>heroes-list</code> component.</li>\n</ul>\n<p>A route definition is a JavaScript object.\nEach route typically has two properties.\nThe first property, <code>path</code>, is a string that specifies the URL path for the route.\nThe second property, <code>component</code>, is a string that specifies what component your application should display for that path.</p>\n<ol>\n<li>From your code editor, create and open the <code>app.routes.ts</code> file.</li>\n<li>Create and export a routes list for your application:</li>\n</ol>\n<code-example>\nimport {<a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>} from '@angular/router';\n\nexport const routes = [];\n</code-example>\n<ol>\n<li>Add two routes for your first two components:</li>\n</ol>\n<code-example>\n  {path: 'crisis-list', component: CrisisListComponent},\n  {path: 'heroes-list', component: HeroesListComponent},\n</code-example>\n<p>This routes list is an array of JavaScript objects, with each object defining the properties of a route.</p>\n<h2 id=\"import-providerouter-from-angularrouter\">Import <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code> from <code>@angular/router</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#import-providerouter-from-angularrouter\"><i class=\"material-icons\">link</i></a></h2>\n<p>Routing lets you display specific views of your application depending on the URL path.\nTo add this functionality to your sample application, you need to update the <code>app.config.ts</code> file to use the router providers function, <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code>.\nYou import this provider function from <code>@angular/router</code>.</p>\n<ol>\n<li>From your code editor, open the <code>app.config.ts</code> file.</li>\n<li>Add the following import statements:</li>\n</ol>\n<code-example>\nimport { <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a> } from '@angular/router';\nimport { routes } from './app.routes';\n</code-example>\n<ol start=\"2\">\n<li>Update the providers in the <code>appConfig</code>:</li>\n</ol>\n<code-example>\nproviders: [<a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>(routes)]\n</code-example>\n<p>For <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> based applications, put the <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code> in the <code>providers</code> list of the <code>AppModule</code>, or whichever module is passed to <code>bootstrapModule</code> in the application.</p>\n<h2 id=\"update-your-component-with-router-outlet\">Update your component with <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#update-your-component-with-router-outlet\"><i class=\"material-icons\">link</i></a></h2>\n<p>At this point, you have defined two routes for your application.\nHowever, your application still has both the <code>crisis-list</code> and <code>heroes-list</code> components hard-coded in your <code>app.component.html</code> template.\nFor your routes to work, you need to update your template to dynamically load a component based on the URL path.</p>\n<p>To implement this functionality, you add the <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> directive to your template file.</p>\n<ol>\n<li>\n<p>From your code editor, open the <code>app.component.html</code> file.</p>\n</li>\n<li>\n<p>Delete the following lines.</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"components\">\n&#x3C;app-crisis-list>&#x3C;/app-crisis-list>\n&#x3C;app-heroes-list>&#x3C;/app-heroes-list>\n\n</code-example>\n</li>\n<li>\n<p>Add the <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> directive.</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"router-outlet\">\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n</code-example>\n</li>\n<li>\n<p>Add <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> to the imports of the <code>AppComponent</code> in <code>app.component.ts</code></p>\n</li>\n</ol>\n<code-example>\nimports: [<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a>],\n</code-example>\n<p>View your updated application in your browser.\nYou should see only the application title.\nTo view the <code>crisis-list</code> component, add <code>crisis-list</code> to the end of the path in your browser's address bar.\nFor example:</p>\n<code-example format=\"https\" language=\"https\">\n\nhttp://localhost:4200/crisis-list\n\n</code-example>\n<p>Notice that the <code>crisis-list</code> component displays.\nAngular is using the route you defined to dynamically load the component.\nYou can load the <code>heroes-list</code> component the same way:</p>\n<code-example format=\"https\" language=\"https\">\n\nhttp://localhost:4200/heroes-list\n\n</code-example>\n<h2 id=\"control-navigation-with-ui-elements\">Control navigation with UI elements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#control-navigation-with-ui-elements\"><i class=\"material-icons\">link</i></a></h2>\n<p>Currently, your application supports two routes.\nHowever, the only way to use those routes is for the user to manually type the path in the browser's address bar.\nIn this section, you'll add two links that users can click to navigate between the <code>heroes-list</code> and <code>crisis-list</code> components.\nYou'll also add some CSS styles.\nWhile these styles are not required, they make it easier to identify the link for the currently-displayed component.\nYou'll add that functionality in the next section.</p>\n<ol>\n<li>\n<p>Open the <code>app.component.html</code> file and add the following HTML below the title.</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"nav\">\n&#x3C;nav>\n  &#x3C;a class=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-list\">Crisis Center&#x3C;/a> |\n  &#x3C;a class=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes-list\">Heroes&#x3C;/a>\n&#x3C;/nav>\n\n</code-example>\n<p>This HTML uses an Angular directive, <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>.\nThis directive connects the routes you defined to your template files.</p>\n</li>\n<li>\n<p>Add the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directive to the imports list of <code>AppComponent</code> in <code>app.component.ts</code>.</p>\n</li>\n<li>\n<p>Open the <code>app.component.css</code> file and add the following styles.</p>\n<code-example header=\"src/app/app.component.css\" path=\"router-tutorial/src/app/app.component.css\">\n.button {\n    box-shadow: inset 0 1px 0 0 #ffffff;\n    background: #ffffff linear-gradient(to bottom, #ffffff 5%, #f6f6f6 100%);\n    border-radius: 6px;\n    border: 1px solid #dcdcdc;\n    display: inline-block;\n    cursor: pointer;\n    color: #666666;\n    font-family: Arial, sans-serif;\n    font-size: 15px;\n    font-weight: bold;\n    padding: 6px 24px;\n    text-decoration: none;\n    text-shadow: 0 1px 0 #ffffff;\n    outline: 0;\n}\n.activebutton {\n    box-shadow: inset 0 1px 0 0 #dcecfb;\n    background: #bddbfa linear-gradient(to bottom, #bddbfa 5%, #80b5ea 100%);\n    border: 1px solid #84bbf3;\n    color: #ffffff;\n    text-shadow: 0 1px 0 #528ecc;\n}\n\n\n</code-example>\n</li>\n</ol>\n<p>If you view your application in the browser, you should see these two links.\nWhen you click on a link, the corresponding component appears.</p>\n<h2 id=\"identify-the-active-route\">Identify the active route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#identify-the-active-route\"><i class=\"material-icons\">link</i></a></h2>\n<p>While users can navigate your application using the links you added in the previous section, they don't have a straightforward way to identify what the active route is.\nAdd this functionality using Angular's <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> directive.</p>\n<ol>\n<li>\n<p>From your code editor, open the <code>app.component.html</code> file.</p>\n</li>\n<li>\n<p>Update the anchor tags to include the <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> directive.</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"routeractivelink\">\n&#x3C;nav>\n  &#x3C;a class=\"button\"\n     <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-list\"\n     <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"activebutton\"\n     ariaCurrentWhenActive=\"page\">\n    Crisis Center\n  &#x3C;/a> |\n  &#x3C;a class=\"button\"\n     <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes-list\"\n     <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"activebutton\"\n     ariaCurrentWhenActive=\"page\">\n    Heroes\n  &#x3C;/a>\n&#x3C;/nav>\n\n</code-example>\n</li>\n<li>\n<p>Add the <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code> directive to the <code>imports</code> list of <code>AppComponent</code> in <code>app.component.ts</code>.</p>\n</li>\n</ol>\n<p>View your application again.\nAs you click one of the buttons, the style for that button updates automatically, identifying the active component to the user.\nBy adding the <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> directive, you inform your application to apply a specific CSS class to the active route.\nIn this tutorial, that CSS class is <code>activebutton</code>, but you could use any class that you want.</p>\n<p>Note that we are also specifying a value for the <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code>'s <code>ariaCurrentWhenActive</code>. This makes sure that visually impaired users (which may not perceive the different styling being applied) can also identify the active button. For more information see the Accessibility Best Practices <a href=\"/guide/accessibility#active-links-identification\">Active links identification section</a>.</p>\n<h2 id=\"adding-a-redirect\">Adding a redirect<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#adding-a-redirect\"><i class=\"material-icons\">link</i></a></h2>\n<p>In this step of the tutorial, you add a route that redirects the user to display the <code>/heroes-list</code> component.</p>\n<ol>\n<li>From your code editor, open the <code>app.routes.ts</code> file.</li>\n<li>Update the <code>routes</code> section as follows.</li>\n</ol>\n<code-example>\n  {path: '', redirectTo: '/heroes-list', pathMatch: 'full'},\n</code-example>\n<p>    Notice that this new route uses an empty string as its path.\nIn addition, it replaces the <code>component</code> property with two new ones:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Properties</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>redirectTo</code></td>\n<td align=\"left\">This property instructs Angular to redirect from an empty path to the <code>heroes-list</code> path.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>pathMatch</code></td>\n<td align=\"left\">This property instructs Angular on how much of the URL to match. For this tutorial, you should set this property to <code>full</code>. This strategy is recommended when you have an empty string for a path. For more information about this property, see the <a href=\"api/router/Route\">Route API documentation</a>.</td>\n</tr>\n</tbody>\n</table>\n<p>Now when you open your application, it displays the <code>heroes-list</code> component by default.</p>\n<h2 id=\"adding-a-404-page\">Adding a 404 page<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#adding-a-404-page\"><i class=\"material-icons\">link</i></a></h2>\n<p>It is possible for a user to try to access a route that you have not defined.\nTo account for this behavior, the best practice is to display a 404 page.\nIn this section, you'll create a 404 page and update your route configuration to show that page for any unspecified routes.</p>\n<ol>\n<li>\n<p>From the terminal, create a new component, <code>PageNotFound</code>.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component page-not-found\n\n</code-example>\n</li>\n<li>\n<p>From your code editor, open the <code>page-not-found.component.html</code> file and replace its contents with the following HTML.</p>\n<code-example header=\"src/app/page-not-found/page-not-found.component.html\" path=\"router-tutorial/src/app/page-not-found/page-not-found.component.html\">\n&#x3C;h2>Page Not Found&#x3C;/h2>\n&#x3C;p>We couldn't find that page! Not even with x-ray vision.&#x3C;/p>\n\n\n</code-example>\n</li>\n<li>\n<p>Open the <code>app.routes.ts</code> file and add the following route to the routes list:</p>\n</li>\n</ol>\n<code-example>\n  {path: '**', component: PageNotFoundComponent}\n</code-example>\n<p>    The new route uses a path, <code>**</code>.\nThis path is how Angular identifies a wildcard route.\nAny route that does not match an existing route in your configuration will use this route.</p>\n    <div class=\"alert is-important\">\n<p>    Notice that the wildcard route is placed at the end of the array.\nThe order of your routes is important, as Angular applies routes in order and uses the first match it finds.</p>\n    </div>\n<p>Try navigating to a non-existing route on your application, such as <code>http://localhost:4200/powers</code>.\nThis route doesn't match anything defined in your <code>app.routes.ts</code> file.\nHowever, because you defined a wildcard route, the application automatically displays your <code>PageNotFound</code> component.</p>\n<h2 id=\"next-steps\">Next steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<p>At this point, you have a basic application that uses Angular's routing feature to change what components the user can see based on the URL address.\nYou have extended these features to include a redirect, as well as a wildcard route to display a custom 404 page.</p>\n<p>For more information about routing, see the following topics:</p>\n<ul>\n<li><a href=\"guide/router\">In-app Routing and Navigation</a></li>\n<li><a href=\"api/router\">Router API</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Tue Oct 24 2023</div>\n</div>\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/routing-overview\n - guide/routing-with-urlmatcher\n-->\n<!-- links from this doc:\n - /guide/accessibility#active-links-identification\n - api/core/NgModule\n - api/router\n - api/router/Route\n - api/router/Router\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterOutlet\n - api/router/Routes\n - api/router/provideRouter\n - cli\n - guide/router\n - guide/router-tutorial#adding-a-404-page\n - guide/router-tutorial#adding-a-redirect\n - guide/router-tutorial#control-navigation-with-ui-elements\n - guide/router-tutorial#create-a-sample-application\n - guide/router-tutorial#define-your-routes\n - guide/router-tutorial#identify-the-active-route\n - guide/router-tutorial#import-providerouter-from-angularrouter\n - guide/router-tutorial#next-steps\n - guide/router-tutorial#objectives\n - guide/router-tutorial#prerequisites\n - guide/router-tutorial#update-your-component-with-router-outlet\n - guide/router-tutorial#using-angular-routes-in-a-single-page-application\n - tutorial/tour-of-heroes\n-->"
}