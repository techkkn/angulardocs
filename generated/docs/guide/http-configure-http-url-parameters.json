{
  "id": "guide/http-configure-http-url-parameters",
  "title": "HTTP - Configure URL parameters",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"http---configure-url-parameters\">HTTP - Configure URL parameters<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-configure-http-url-parameters#http---configure-url-parameters\"><i class=\"material-icons\">link</i></a></h1>\n<p>Use the <code><a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a></code> class with the <code>params</code> request option to add URL query strings in your <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code>.</p>\n<h2 id=\"create-url-parameter-using-the-search-method\">Create URL parameter using the search method<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-configure-http-url-parameters#create-url-parameter-using-the-search-method\"><i class=\"material-icons\">link</i></a></h2>\n<p>The following example, the <code>searchHeroes()</code> method queries for heroes whose names contain the search term.</p>\n<p>Start by importing <code><a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a></code> class.</p>\n<code-example hidecopy=\"\" language=\"typescript\">\n\nimport {<a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a>} from \"@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>\";\n\n</code-example>\n<code-example linenums=\"false\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"searchHeroes\">\n/* GET heroes whose name contains search term */\nsearchHeroes(term: string): Observable&#x3C;Hero[]> {\n  term = term.trim();\n\n  // Add safe, URL encoded search parameter if there is a search term\n  const options = term ?\n   { params: new <a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a>().set('name', term) } : {};\n\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl, options)\n    .pipe(\n      catchError(this.handleError&#x3C;Hero[]>('searchHeroes', []))\n    );\n}\n\n</code-example>\n<p>If there is a search term, the code constructs an options object with an HTML URL-encoded search parameter.\nIf the term is \"cat\", for example, the GET request URL would be <code>api/heroes?name=cat</code>.</p>\n<p>The <code><a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a></code> object is immutable.\nIf you need to update the options, save the returned value of the <code>.set()</code> method.</p>\n<h2 id=\"create-url-parameters-from-a-query\">Create URL parameters from a query<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-configure-http-url-parameters#create-url-parameters-from-a-query\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can also create HTTP parameters directly from a query string by using the <code>fromString</code> variable:</p>\n<code-example hidecopy=\"\" language=\"typescript\">\n\nconst params = new <a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a>({fromString: 'name=foo'});\n\n</code-example>\n<p><a id=\"intercepting-requests-and-responses\"></a></p>\n\n  <div class=\"reviewed\">Last reviewed on Tue Nov 08 2022</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/http\n - api/common/http/HttpParams\n - api/common/http/HttpRequest\n - guide/http-configure-http-url-parameters#create-url-parameter-using-the-search-method\n - guide/http-configure-http-url-parameters#create-url-parameters-from-a-query\n - guide/http-configure-http-url-parameters#http---configure-url-parameters\n-->"
}