{
  "id": "guide/prerendering",
  "title": "Prerendering (SSG)",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"prerendering-ssg\">Prerendering (SSG)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/prerendering#prerendering-ssg\"><i class=\"material-icons\">link</i></a></h1>\n<p>Prerendering, commonly referred to as Static Site Generation (SSG), represents the method by which pages are rendered to static HTML files during the build process.</p>\n<p>Prerendering maintains the same performance benefits of <a href=\"/guide/ssr/#why-use-ssr\">server-side rendering (SSR)</a>. But achieves a reduced Time to First Byte (TTFB), ultimately enhancing user experience. The key distinction lies in its approach that pages are served as static content, and there is no request-based rendering.</p>\n<p>When the data necessary for server-side rendering remains consistent across all users, the strategy of prerendering emerges as a valuable alternative. Rather than dynamically rendering pages for each user request, prerendering takes a proactive approach by rendering them in advance.</p>\n<h2 id=\"how-to-prerender-a-page\">How to prerender a page<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/prerendering#how-to-prerender-a-page\"><i class=\"material-icons\">link</i></a></h2>\n<p>To prerender a static page, add SSR capabilities to your application with the following Angular CLI command:</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng add @angular/ssr\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>To create an application with prerendering capabilities from the beginning use the <a href=\"cli/new\">ng new --ssr</a> command.</p>\n</div>\n<p>Once SSR is added, you can generate the static pages by running the build command:</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build\n\n</code-example>\n<h3 id=\"build-options-for-prerender\">Build options for prerender<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/prerendering#build-options-for-prerender\"><i class=\"material-icons\">link</i></a></h3>\n<p>The application builder <code>prerender</code> option can be either a Boolean or an Object for more fine-tuned configuration.\nWhen the option is <code>false</code>, no prerendering is done. When it's is <code>true</code>, all options use the default value. When it's is an Object, each option can be individually configured.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Options</th>\n<th align=\"left\">Details</th>\n<th align=\"left\">Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>discoverRoutes</code></td>\n<td align=\"left\">Whether the builder should process the Angular Router configuration to find all unparameterized routes and prerender them.</td>\n<td align=\"left\"><code>true</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>routesFile</code></td>\n<td align=\"left\">The path to a file that contains a list of all routes to prerender, separated by newlines. This option is useful if you want to prerender routes with parameterized URLs.</td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>\n<code-example format=\"json\" language=\"json\">\n\n…\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:application\",\n      \"options\": {\n        \"prerender\": {\n          \"discoverRoutes\": false\n        },\n       },\n…\n\n</code-example>\n<h3 id=\"prerendering-parameterized-routes\">Prerendering parameterized routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/prerendering#prerendering-parameterized-routes\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can prerender parameterized routes using the <code>routesFile</code> option. An example of a parameterized route is <code>product/:id</code>, where <code>id</code> is dynamically provided. To specify these routes, they should be listed in a text file, with each route on a separate line.</p>\n<p>For an app with a large number of parameterized routes, consider generating this file using a script before running <code>ng build</code>.</p>\n<code-example language=\"none\" header=\"routes.txt\">\n\n/products/1\n/products/555\n\n</code-example>\n<p>With routes specified in the <code>routes.txt</code> file, use the <code>routesFile</code> option to configure the builder to prerender the product routes.</p>\n<code-example format=\"json\" language=\"json\">\n\n…\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:application\",\n      \"options\": {\n        \"prerender\": {\n          \"routesFile\": \"routes.txt\"\n        },\n      },\n…\n\n</code-example>\n<p>This configures <code>ng build</code> to prerender <code>/products/1</code> and <code>/products/555</code> at build time.</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Mon Oct 23 2023</div>\n</div>\n\n<!-- links to this doc:\n - guide/developer-guide-overview\n-->\n<!-- links from this doc:\n - /guide/ssr/#why-use-ssr\n - cli/new\n - guide/prerendering#build-options-for-prerender\n - guide/prerendering#how-to-prerender-a-page\n - guide/prerendering#prerendering-parameterized-routes\n - guide/prerendering#prerendering-ssg\n-->"
}