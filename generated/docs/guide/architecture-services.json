{
  "id": "guide/architecture-services",
  "title": "Introduction to services and dependency injection",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"introduction-to-services-and-dependency-injection\">Introduction to services and dependency injection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#introduction-to-services-and-dependency-injection\"><i class=\"material-icons\">link</i></a></h1>\n<p><em>Service</em> is a broad category encompassing any value, function, or feature that an application needs.\nA service is typically a class with a narrow, well-defined purpose.\nIt should do something specific and do it well.</p>\n<p>Angular distinguishes components from services to increase modularity and reusability.</p>\n<p>Ideally, a component's job is to enable only the user experience.\nA component should present properties and methods for data binding to mediate between the view and the application logic. The view is what the template renders and the application logic is what includes the notion of a <em>model</em>.</p>\n<p>A component should use services for tasks that don't involve the view or application logic. Services are good for tasks such as fetching data from the server, validating user input, or logging directly to the console. By defining such processing tasks in an <em>injectable service class</em>, you make those tasks available to any component.\nYou can also make your application more adaptable by injecting different providers of the same kind of service, as appropriate in different circumstances.</p>\n<p>Angular doesn't <em>enforce</em> these principles.\nInstead, Angular helps you <em>follow</em> these principles by making it easy to factor your application logic into services. In Angular, <em>dependency injection</em> makes those services available to components.</p>\n<h2 id=\"service-examples\">Service examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#service-examples\"><i class=\"material-icons\">link</i></a></h2>\n<p>Here's an example of a service class that logs to the browser console.</p>\n<code-example header=\"src/app/logger.service.ts (class)\" path=\"architecture/src/app/logger.service.ts\" region=\"class\">\nexport class Logger {\n  log(msg: any)   { console.log(msg); }\n  error(msg: any) { console.error(msg); }\n  warn(msg: any)  { console.warn(msg); }\n}\n\n\n</code-example>\n<p>Services can depend on other services.\nFor example, here's a <code>HeroService</code> that depends on the <code>Logger</code> service, and also uses <code>BackendService</code> to get heroes.\nThat service in turn might depend on the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service to fetch heroes asynchronously from a server.</p>\n<code-example header=\"src/app/hero.service.ts (class)\" path=\"architecture/src/app/hero.service.ts\" region=\"class\">\nexport class HeroService {\n  private heroes: Hero[] = [];\n\n  constructor(\n    private backend: BackendService,\n    private logger: Logger) { }\n\n  getHeroes() {\n    this.backend.getAll(Hero).then( (heroes: Hero[]) => {\n      this.logger.log(`Fetched ${heroes.length} heroes.`);\n      this.heroes.push(...heroes); // fill cache\n    });\n    return this.heroes;\n  }\n}\n\n\n</code-example>\n<h2 id=\"dependency-injection-di\">Dependency injection (DI)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#dependency-injection-di\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"lightbox\">\n<img alt=\"Service\" class=\"left\" src=\"generated/images/guide/architecture/dependency-injection.png\" width=\"200\" height=\"90\">\n</div>\n<p>Dependency injection (DI) is the part of the Angular framework that provides components with access to services and other resources.\nAngular provides the ability for you to <em>inject</em> a service into a component to give that component access to the service.</p>\n<p>Add the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator to a service class so that Angular can inject it into a component as a <em>dependency</em>; the optional argument tells Angular where to register this class by default.</p>\n   <code-example path=\"architecture/src/app/hero.service.ts\" region=\"provide\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({providedIn: 'root'})\nexport class HeroService {\n\n</code-example>\n<ul>\n<li>\n<p>Something <em>injectable</em> must be registered with an <em>injector</em> before it can be created and used. </p>\n</li>\n<li>\n<p>Register an injectable with a <em>provider</em>, an object that tells an injector how to obtain or create a dependency. For a service class, the provider is typically the class itself.</p>\n</li>\n<li>\n<p>You don't have to create injectors. Under the hood Angular creates an application-wide <em>root injector</em> for you during the bootstrap process. It creates additional child injectors as needed.</p>\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>An injectable dependency doesn't have to be a class â€” it could be a function, for example, or a value.</p>\n</div>\n<p>When Angular creates a new instance of a component class, it determines which services or other dependencies that component needs by looking at the constructor parameter types.\nFor example, the constructor of <code>HeroListComponent</code> needs <code>HeroService</code>.</p>\n<code-example header=\"src/app/hero-list.component.ts (constructor)\" path=\"architecture/src/app/hero-list.component.ts\" region=\"ctor\">\nconstructor(private service: HeroService) { }\n\n</code-example>\n<p>When Angular discovers that a component depends on a service, it first checks if the injector has any existing instances of that service.\nIf a requested service instance doesn't yet exist, the injector makes one using the registered provider and adds it to the injector before returning the service to Angular.</p>\n<p>When all requested services have been resolved and returned, Angular can call the component's constructor with those services as arguments.</p>\n<p>The process of <code>HeroService</code> injection looks something like this.</p>\n<div class=\"lightbox\">\n<img alt=\"Service\" class=\"left\" src=\"generated/images/guide/architecture/injector-injects.png\" width=\"479\" height=\"218\">\n</div>\n<h3 id=\"providing-services\">Providing services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#providing-services\"><i class=\"material-icons\">link</i></a></h3>\n<p>You must register at least one <em>provider</em> of any service you are going to use.\nThe provider can be part of the service's own metadata, making that service available everywhere, or you can register providers with specific components.\nYou register providers in the metadata of the service (in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator) or <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> metadata</p>\n<ul>\n<li>\n<p>By default, the Angular CLI command <a href=\"cli/generate\"><code>ng generate service</code></a> registers a provider with the root injector for your service by including provider metadata in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator.\nThe tutorial uses this method to register the provider of <code>HeroService</code> class definition.</p>\n<code-example header=\"hero.service.ts (provide in root)\" path=\"architecture/src/app/hero.service.ts\" region=\"provide\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({providedIn: 'root'})\nexport class HeroService {\n\n</code-example>\n<p>When you provide the service at the root level, Angular creates a single, shared instance of <code>HeroService</code>\nand injects it into any class that asks for it.\nRegistering the provider in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> metadata also allows Angular to optimize an app\nby removing the service from the compiled application if it isn't used, a process known as <em>tree-shaking</em>.</p>\n</li>\n<li>\n<p>When you register a provider at the component level, you get a new instance of the service with each new instance of that component.\nAt the component level, register a service provider in the <code>providers</code> property of the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> metadata.</p>\n<code-example header=\"src/app/hero-list.component.ts (component providers)\" path=\"architecture/src/app/hero-list.component.ts\" region=\"providers\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector:    'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  imports:     [ <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>, <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>, HeroDetailComponent ],\n  providers:  [ HeroService ]\n})\n\n</code-example>\n</li>\n</ul>\n<p>For more detailed information, see the <a href=\"guide/dependency-injection\">Dependency Injection</a> section.</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Mon Sep 25 2023</div>\n</div>\n\n<!-- links to this doc:\n - api/core/Injectable\n - errors/NG0201\n - guide/architecture\n - guide/architecture-modules\n - guide/creating-libraries\n - guide/glossary\n - guide/hierarchical-dependency-injection\n - guide/lightweight-injection-tokens\n - start/start-data\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Injectable\n - cli/generate\n - guide/architecture-services#dependency-injection-di\n - guide/architecture-services#introduction-to-services-and-dependency-injection\n - guide/architecture-services#providing-services\n - guide/architecture-services#service-examples\n - guide/dependency-injection\n-->"
}