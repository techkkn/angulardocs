{
  "id": "guide/deprecations",
  "title": "Deprecated APIs and features",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"deprecated-apis-and-features\">Deprecated APIs and features<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-apis-and-features\"><i class=\"material-icons\">link</i></a></h1>\n<p>Angular strives to balance innovation and stability.\nSometimes, APIs and features become obsolete and need to be removed or replaced so that Angular can stay current with new best practices, changing dependencies, or changes in the (web) platform itself.</p>\n<p>To make these transitions as easy as possible, APIs and features are deprecated for a period of time before they are removed.\nThis gives you time to update your applications to the latest APIs and best practices.</p>\n<p>This guide contains a summary of noteworthy Angular APIs and features that are currently deprecated.\nSee the <a href=\"https://github.com/angular/angular/blob/main/CHANGELOG.md\">full changelog</a> for\ncomprehensive details on deprecations and breaking changes.</p>\n<div class=\"alert is-helpful\">\n<p>Features and APIs that were deprecated in v6 or earlier are candidates for removal in version 9 or any later major version.\nFor information about Angular's deprecation and removal practices, see <a href=\"guide/releases#deprecation-policy\" title=\"Angular Release Practices: Deprecation policy\">Angular Release Practices</a>.</p>\n<p>For step-by-step instructions on how to update to the latest Angular release, use the interactive update guide at <a href=\"https://update.angular.io\">update.angular.io</a>.</p>\n</div>\n<h2 id=\"index\">Index<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#index\"><i class=\"material-icons\">link</i></a></h2>\n<p>To help you future-proof your projects, the following table lists all deprecated APIs and features, organized by the release in which they are candidates for removal.\nEach item is linked to the section later in this guide that describes the deprecation reason and replacement options.</p>\n<!--\ndeprecation -> removal cheat sheet\nv4 - v7\nv5 - v8\nv6 - v9\nv7 - v10\nv8 - v11\nv9 - v12\nv10 - v13\nv11 - v14\nv12 - v15\nv13 - v16\nv14 - v17\nv15 - v18\nv16 - v19\n-->\n<h3 id=\"deprecated-features-that-can-be-removed-in-v11-or-later\">Deprecated features that can be removed in v11 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v11-or-later\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Area</th>\n<th align=\"left\">API or Feature</th>\n<th align=\"left\">Deprecated in</th>\n<th align=\"left\">May be removed in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>DefaultIterableDiffer</code></a></td>\n<td align=\"left\">v7</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>defineInjectable</code></a></td>\n<td align=\"left\">v8</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"api/core/NgModule\"><code>entryComponents</code></a></td>\n<td align=\"left\">v9</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>ANALYZE_FOR_ENTRY_COMPONENTS</code></a></td>\n<td align=\"left\">v9</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/forms</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#ngmodel-reactive\"><code>ngModel</code> with reactive forms</a></td>\n<td align=\"left\">v6</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/upgrade</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#upgrade\"><code>@angular/upgrade</code></a></td>\n<td align=\"left\">v8</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/upgrade</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#upgrade-static\"><code>getAngularLib</code></a></td>\n<td align=\"left\">v8</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/upgrade</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#upgrade-static\"><code>setAngularLib</code></a></td>\n<td align=\"left\">v8</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\">polyfills</td>\n<td align=\"left\"><a href=\"guide/deprecations#reflect-metadata\">reflect-metadata</a></td>\n<td align=\"left\">v8</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\">template syntax</td>\n<td align=\"left\"><a href=\"guide/deprecations#template-tag\"><code>&#x3C;template></code></a></td>\n<td align=\"left\">v7</td>\n<td align=\"left\">v11</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deprecated-features-that-can-be-removed-in-v12-or-later\">Deprecated features that can be removed in v12 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v12-or-later\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Area</th>\n<th align=\"left\">API or Feature</th>\n<th align=\"left\">Deprecated in</th>\n<th align=\"left\">May be removed in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>@angular/core/testing</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#testing\"><code>TestBed.get</code></a></td>\n<td align=\"left\">v9</td>\n<td align=\"left\">v12</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core/testing</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#testing\"><code>async</code></a></td>\n<td align=\"left\">v9</td>\n<td align=\"left\">v12</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deprecated-features-that-can-be-removed-in-v14-or-later\">Deprecated features that can be removed in v14 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v14-or-later\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Area</th>\n<th align=\"left\">API or Feature</th>\n<th align=\"left\">Deprecated in</th>\n<th align=\"left\">May be removed in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>@angular/forms</code></td>\n<td align=\"left\"><a href=\"api/forms/FormBuilder#group\"><code>FormBuilder.group</code> legacy options parameter</a></td>\n<td align=\"left\">v11</td>\n<td align=\"left\">v14</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deprecated-features-that-can-be-removed-in-v15-or-later\">Deprecated features that can be removed in v15 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v15-or-later\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Area</th>\n<th align=\"left\">API or Feature</th>\n<th align=\"left\">Deprecated in</th>\n<th align=\"left\">May be removed in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>@angular/compiler-cli</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#input-setter-coercion\">Input setter coercion</a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v15</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/compiler-cli</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#full-template-type-check\"><code>fullTemplateTypeCheck</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v15</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\">Factory-based signature of <code>ApplicationRef.bootstrap</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v15</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>PlatformRef.bootstrapModuleFactory</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v15</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"api/core/ViewContainerRef#createComponent\">Factory-based signature of <code>ViewContainerRef.createComponent</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v15</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/upgrade</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#upgrade-static\">Factory-based signature of <code>downgradeModule</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v15</td>\n</tr>\n<tr>\n<td align=\"left\">template syntax</td>\n<td align=\"left\"><a href=\"guide/deprecations#bind-syntax\"><code>bind-</code>, <code>on-</code>, <code>bindon-</code>, and <code>ref-</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deprecated-features-that-can-be-removed-in-v16-or-later\">Deprecated features that can be removed in v16 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v16-or-later\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Area</th>\n<th align=\"left\">API or Feature</th>\n<th align=\"left\">Deprecated in</th>\n<th align=\"left\">May be removed in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>/testing</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#testrequest-errorevent\"><code>TestRequest</code> accepting <code>ErrorEvent</code> for error simulation</a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>getModuleFactory</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>ModuleWithComponentFactories</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>Compiler</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>CompilerFactory</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>NgModuleFactory</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>ComponentFactory</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>ComponentFactoryResolver</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/platform-browser-dynamic</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#platform-browser-dynamic\"><code>JitCompilerFactory</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/platform-browser-dynamic</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#platform-browser-dynamic\"><code>RESOURCE_CACHE_PROVIDER</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/platform-server</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#platform-server\"><code>ServerTransferStateModule</code></a></td>\n<td align=\"left\">v14</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/platform-browser</code></td>\n<td align=\"left\"><a href=\"api/platform-browser/BrowserModule#withservertransition\"><code>BrowserModule.withServerTransition</code></a></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v18</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deprecated-features-that-can-be-removed-in-v17-or-later\">Deprecated features that can be removed in v17 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v17-or-later\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Area</th>\n<th align=\"left\">API or Feature</th>\n<th align=\"left\">Deprecated in</th>\n<th align=\"left\">May be removed in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>@angular/common</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#common\"><code>NgComponentOutlet.ngComponentOutletNgModuleFactory</code></a></td>\n<td align=\"left\">v14</td>\n<td align=\"left\">v17</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/common</code></td>\n<td align=\"left\"><a href=\"api/common/DATE_PIPE_DEFAULT_TIMEZONE\"><code>DatePipe</code> - <code>DATE_PIPE_DEFAULT_TIMEZONE</code></a></td>\n<td align=\"left\">v15</td>\n<td align=\"left\">v17</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\">NgModule and <code>'any'</code> options for <a href=\"guide/deprecations#core\"><code>providedIn</code></a></td>\n<td align=\"left\">v15</td>\n<td align=\"left\">v17</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"api/core/Component#moduleId\"><code>@Component.moduleId</code></a></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v17</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/router</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#router\"><code>RouterLinkWithHref</code> directive</a></td>\n<td align=\"left\">v15</td>\n<td align=\"left\">v17</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/router</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#router-writable-properties\">Router writeable properties</a></td>\n<td align=\"left\">v15.1</td>\n<td align=\"left\">v17</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/router</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#router-can-load\">Router CanLoad guards</a></td>\n<td align=\"left\">v15.1</td>\n<td align=\"left\">v17</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/router</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#router-class-and-injection-token-guards\">class and <code>InjectionToken</code> guards and resolvers</a></td>\n<td align=\"left\">v15.2</td>\n<td align=\"left\">v17</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deprecated-features-that-can-be-removed-in-v18-or-later\">Deprecated features that can be removed in v18 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v18-or-later\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Area</th>\n<th align=\"left\">API or Feature</th>\n<th align=\"left\">Deprecated in</th>\n<th align=\"left\">May be removed in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>@angular/common</code></td>\n<td align=\"left\"><code><a href=\"api/common/isPlatformWorkerApp\" class=\"code-anchor\">isPlatformWorkerApp</a></code> and <code><a href=\"api/common/isPlatformWorkerUi\" class=\"code-anchor\">isPlatformWorkerUi</a></code></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v18</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><code>EnvironmentInjector.runInContext</code></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v18</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/platform-server</code></td>\n<td align=\"left\"><a href=\"api/platform-server/PlatformConfig\"><code>PlatformConfig.baseUrl</code> and <code>PlatformConfig.useAbsoluteUrl</code> config options</a></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v18</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/platform-server</code></td>\n<td align=\"left\"><a href=\"api/platform-server/platformDynamicServer\"><code>platformDynamicServer</code></a></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v18</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/platform-browser</code></td>\n<td align=\"left\"><a href=\"api/platform-browser/BrowserModule#withservertransition\"><code>BrowserModule.withServerTransition</code></a></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v18</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/platform-browser</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#platform-browser\"><code>makeStateKey</code>, <code>StateKey</code> and <code>TransferState</code></a>, symbols were moved to <code>@angular/core</code></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v18</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deprecated-features-that-can-be-removed-in-v19-or-later\">Deprecated features that can be removed in v19 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v19-or-later\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Area</th>\n<th align=\"left\">API or Feature</th>\n<th align=\"left\">Deprecated in</th>\n<th align=\"left\">May be removed in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>@angular/animations</code></td>\n<td align=\"left\"><code><a href=\"api/animations/browser/AnimationDriver#NOOP\" class=\"code-anchor\">AnimationDriver.NOOP</a></code></td>\n<td align=\"left\">v17</td>\n<td align=\"left\">v19</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><code><a href=\"api/core/PACKAGE_ROOT_URL\" class=\"code-anchor\">PACKAGE_ROOT_URL</a></code></td>\n<td align=\"left\">v17</td>\n<td align=\"left\">v19</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><code><a href=\"api/core/NgProbeToken\" class=\"code-anchor\">NgProbeToken</a></code></td>\n<td align=\"left\">v17</td>\n<td align=\"left\">v19</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deprecated-features-with-no-planned-removal-version\">Deprecated features with no planned removal version<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-with-no-planned-removal-version\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Area</th>\n<th align=\"left\">API or Feature</th>\n<th align=\"left\">Deprecated in</th>\n<th align=\"left\">May be removed in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">template syntax</td>\n<td align=\"left\"><a href=\"guide/deprecations#deep-component-style-selector\"><code>/deep/</code>, <code>>>></code>, and <code>::ng-deep</code></a></td>\n<td align=\"left\">v7</td>\n<td align=\"left\">unspecified</td>\n</tr>\n</tbody>\n</table>\n<p>For information about Angular Component Development Kit (CDK) and Angular Material deprecations, see the <a href=\"https://github.com/angular/components/blob/main/CHANGELOG.md\">changelog</a>.</p>\n<h2 id=\"deprecated-apis\">Deprecated APIs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-apis\"><i class=\"material-icons\">link</i></a></h2>\n<p>This section contains a complete list all deprecated APIs, with details to help you plan your migration to a replacement.</p>\n<div class=\"alert is-helpful\">\n<p><strong>TIP</strong>: <br>\nIn the <a href=\"api\">API reference section</a> of this site, deprecated APIs are indicated by <del>strikethrough.</del> You can filter the API list by <a href=\"api?status=deprecated\">Status: deprecated</a>.</p>\n</div>\n<p><a id=\"animations\"></a></p>\n<h3 id=\"angularanimations\">@angular/animations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularanimations\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\">Replacement</th>\n<th align=\"left\">Deprecation announced</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"api/animations/browser/AnimationDriver#NOOP\">AnimationDriver.NOOP</a></td>\n<td align=\"left\"><code><a href=\"api/animations/browser/NoopAnimationDriver\" class=\"code-anchor\">NoopAnimationDriver</a></code></td>\n<td align=\"left\">v17</td>\n<td align=\"left\">Create a new  <code><a href=\"api/animations/browser/NoopAnimationDriver\" class=\"code-anchor\">NoopAnimationDriver</a></code> directly instead of calling <code><a href=\"api/animations/browser/AnimationDriver#NOOP\" class=\"code-anchor\">AnimationDriver.NOOP</a></code></td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"common\"></a></p>\n<h3 id=\"angularcommon\">@angular/common<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularcommon\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\">Replacement</th>\n<th align=\"left\">Deprecation announced</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"api/common/NgComponentOutlet\"><code>NgComponentOutlet.ngComponentOutletNgModuleFactory</code></a></td>\n<td align=\"left\"><code><a href=\"api/common/NgComponentOutlet#ngComponentOutletNgModule\" class=\"code-anchor\">NgComponentOutlet.ngComponentOutletNgModule</a></code></td>\n<td align=\"left\">v14</td>\n<td align=\"left\">Use the <code>ngComponentOutletNgModule</code> input instead. This input doesn't require resolving NgModule factory.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/common/DATE_PIPE_DEFAULT_TIMEZONE\"><code>DatePipe</code> - <code>DATE_PIPE_DEFAULT_TIMEZONE</code></a></td>\n<td align=\"left\"><code>{ provide: <a href=\"api/common/DATE_PIPE_DEFAULT_OPTIONS\" class=\"code-anchor\">DATE_PIPE_DEFAULT_OPTIONS</a>, useValue: { timezone: '-1200' }</code></td>\n<td align=\"left\">v15</td>\n<td align=\"left\">Use the <code><a href=\"api/common/DATE_PIPE_DEFAULT_OPTIONS\" class=\"code-anchor\">DATE_PIPE_DEFAULT_OPTIONS</a></code> injection token, which can configure multiple settings at once instead.</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/isPlatformWorkerApp\" class=\"code-anchor\">isPlatformWorkerApp</a></code> and <code><a href=\"api/common/isPlatformWorkerUi\" class=\"code-anchor\">isPlatformWorkerUi</a></code></td>\n<td align=\"left\">None</td>\n<td align=\"left\">v16</td>\n<td align=\"left\">These two functions have no purpose since the removal of the webworker platform (they only return <code>false</code>). They can be safely removed.</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"core\"></a></p>\n<h3 id=\"angularcore\">@angular/core<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularcore\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\">Replacement</th>\n<th align=\"left\">Deprecation announced</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"api/core/DefaultIterableDiffer\"><code>DefaultIterableDiffer</code></a></td>\n<td align=\"left\">n/a</td>\n<td align=\"left\">v4</td>\n<td align=\"left\">Not part of public API.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/defineInjectable\"><code>defineInjectable</code></a></td>\n<td align=\"left\"><code>ɵɵ<a href=\"api/core/defineInjectable\" class=\"code-anchor\">defineInjectable</a></code></td>\n<td align=\"left\">v8</td>\n<td align=\"left\">Used only in generated code. No source code should depend on this API.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/NgModule\"><code>entryComponents</code></a></td>\n<td align=\"left\">none</td>\n<td align=\"left\">v9</td>\n<td align=\"left\">See <a href=\"guide/deprecations#entryComponents\"><code>entryComponents</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>ANALYZE_FOR_ENTRY_COMPONENTS</code></td>\n<td align=\"left\">none</td>\n<td align=\"left\">v9</td>\n<td align=\"left\">See <a href=\"guide/deprecations#entryComponents\"><code>ANALYZE_FOR_ENTRY_COMPONENTS</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/testing/async\"><code>async</code></a></td>\n<td align=\"left\"><a href=\"api/core/testing/waitForAsync\"><code>waitForAsync</code></a></td>\n<td align=\"left\">v11</td>\n<td align=\"left\">The <a href=\"api/core/testing/async\"><code>async</code></a> function from <code>@angular/core/testing</code> has been renamed to <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a></code> in order to avoid confusion with the native JavaScript <code>async</code> syntax. The existing function is deprecated and can be removed in a future version.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/getModuleFactory\"><code>getModuleFactory</code></a></td>\n<td align=\"left\"><a href=\"api/core/getNgModuleById\"><code>getNgModuleById</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">Ivy allows working with NgModule classes directly, without retrieving corresponding factories.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ViewChildren.emitDistinctChangesOnly</code> / <code>ContentChildren.emitDistinctChangesOnly</code></td>\n<td align=\"left\">none (was part of <a href=\"https://github.com/angular/angular/issues/40091\">issue #40091</a>)</td>\n<td align=\"left\"></td>\n<td align=\"left\">This is a temporary flag introduced as part of bug fix of <a href=\"https://github.com/angular/angular/issues/40091\">issue #40091</a> and will be removed.</td>\n</tr>\n<tr>\n<td align=\"left\">Factory-based signature of <a href=\"api/core/ApplicationRef#bootstrap\"><code>ApplicationRef.bootstrap</code></a></td>\n<td align=\"left\">Type-based signature of <a href=\"api/core/ApplicationRef#bootstrap\"><code>ApplicationRef.bootstrap</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">With Ivy, there is no need to resolve Component factory and Component Type can be provided directly.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/PlatformRef#bootstrapModuleFactory\"><code>PlatformRef.bootstrapModuleFactory</code></a></td>\n<td align=\"left\"><a href=\"api/core/PlatformRef#bootstrapModule\"><code>PlatformRef.bootstrapModule</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">With Ivy, there is no need to resolve NgModule factory and NgModule Type can be provided directly.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/ModuleWithComponentFactories\"><code>ModuleWithComponentFactories</code></a></td>\n<td align=\"left\">none</td>\n<td align=\"left\">v13</td>\n<td align=\"left\">Ivy JIT mode doesn't require accessing this symbol. See <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for additional context.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/Compiler\"><code>Compiler</code></a></td>\n<td align=\"left\">none</td>\n<td align=\"left\">v13</td>\n<td align=\"left\">Ivy JIT mode doesn't require accessing this symbol. See <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for additional context.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/CompilerFactory\"><code>CompilerFactory</code></a></td>\n<td align=\"left\">none</td>\n<td align=\"left\">v13</td>\n<td align=\"left\">Ivy JIT mode doesn't require accessing this symbol. See <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for additional context.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/NgModuleFactory\"><code>NgModuleFactory</code></a></td>\n<td align=\"left\">Use non-factory based framework APIs like <a href=\"api/core/PlatformRef#bootstrapModule\">PlatformRef.bootstrapModule</a> and <a href=\"api/core/createNgModule\">createNgModule</a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">Ivy JIT mode doesn't require accessing this symbol. See <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for additional context.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/ViewContainerRef#createComponent\">Factory-based signature of <code>ViewContainerRef.createComponent</code></a></td>\n<td align=\"left\"><a href=\"api/core/ViewContainerRef#createComponent\">Type-based signature of <code>ViewContainerRef.createComponent</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">Angular no longer requires component factories to dynamically create components. Use different signature of the <code><a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a></code> method, which allows passing Component class directly.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/ComponentFactory\"><code>ComponentFactory</code></a></td>\n<td align=\"left\">Use non-factory based framework APIs.</td>\n<td align=\"left\">v13</td>\n<td align=\"left\">Since Ivy, Component factories are not required. Angular provides other APIs where Component classes can be used directly.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/ComponentFactoryResolver\"><code>ComponentFactoryResolver</code></a></td>\n<td align=\"left\">Use non-factory based framework APIs.</td>\n<td align=\"left\">v13</td>\n<td align=\"left\">Since Ivy, Component factories are not required, thus there is no need to resolve them.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/Injectable#providedIn\"><code>providedIn</code></a> with NgModule</td>\n<td align=\"left\">Prefer <code>'root'</code> providers, or use NgModule <code>providers</code> if scoping to an NgModule is necessary</td>\n<td align=\"left\">v15</td>\n<td align=\"left\">none</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/Injectable#providedIn\"><code>providedIn: 'any'</code></a></td>\n<td align=\"left\">none</td>\n<td align=\"left\">v15</td>\n<td align=\"left\">This option has confusing semantics and nearly zero usage.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/EnvironmentInjector#runInContext\"><code>EnvironmentInjector.runInContext</code></a></td>\n<td align=\"left\"><code><a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a></code></td>\n<td align=\"left\">v16</td>\n<td align=\"left\"><code><a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a></code> is a more flexible operation which supports element injectors as well</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/Component#moduleId\"><code>@Component.moduleId</code></a></td>\n<td align=\"left\">none</td>\n<td align=\"left\">v16</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/NgProbeToken\"><code>NgProbeToken</code></a></td>\n<td align=\"left\">none</td>\n<td align=\"left\">v16</td>\n<td align=\"left\"><code>ng.prob</code> was replaced by <code>ng.getComponent</code> since Ivy</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"testing\"></a></p>\n<h3 id=\"angularcoretesting\">@angular/core/testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularcoretesting\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\">Replacement</th>\n<th align=\"left\">Deprecation announced</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"api/core/testing/TestBed#get\"><code>TestBed.get</code></a></td>\n<td align=\"left\"><a href=\"api/core/testing/TestBed#inject\"><code>TestBed.inject</code></a></td>\n<td align=\"left\">v9</td>\n<td align=\"left\">Same behavior, but type safe.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/core/testing/async\"><code>async</code></a></td>\n<td align=\"left\"><a href=\"api/core/testing/waitForAsync\"><code>waitForAsync</code></a></td>\n<td align=\"left\">v10</td>\n<td align=\"left\">Same behavior, but rename to avoid confusion.</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"router\"></a></p>\n<h3 id=\"angularrouter\">@angular/router<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularrouter\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\">Replacement</th>\n<th align=\"left\">Deprecation announced</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"api/router/RouterLinkWithHref\"><code>RouterLinkWithHref</code> directive</a></td>\n<td align=\"left\">Use <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> instead.</td>\n<td align=\"left\">v15</td>\n<td align=\"left\">The <code><a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">RouterLinkWithHref</a></code> directive code was merged into <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>. Now the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directive can be used for all elements that have <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> attribute.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/router/provideRoutes\"><code>provideRoutes</code> function</a></td>\n<td align=\"left\">Use <code><a href=\"api/router/ROUTES\" class=\"code-anchor\">ROUTES</a></code> <code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code> instead.</td>\n<td align=\"left\">v15</td>\n<td align=\"left\">The <code><a href=\"api/router/provideRoutes\" class=\"code-anchor\">provideRoutes</a></code> helper function is minimally useful and can be unintentionally used instead of <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code> due to similar spelling.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/router/DeprecatedGuard\">class and <code>InjectionToken</code> guards and resolvers</a></td>\n<td align=\"left\">Use plain JavaScript functions instead.</td>\n<td align=\"left\">v15.2</td>\n<td align=\"left\">Functional guards are simpler and more powerful than class and token-based guards.</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"platform-browser\"></a></p>\n<h3 id=\"angularplatform-browser\">@angular/platform-browser<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularplatform-browser\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\">Replacement</th>\n<th align=\"left\">Deprecation announced</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"api/platform-browser/BrowserModule#withservertransition\"><code>BrowserModule.withServerTransition</code></a></td>\n<td align=\"left\">No replacement needed.</td>\n<td align=\"left\">v16.0</td>\n<td align=\"left\">The <code><a href=\"api/core/APP_ID\" class=\"code-anchor\">APP_ID</a></code>token should be used instead to set the application ID.</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/core/makeStateKey\" class=\"code-anchor\">makeStateKey</a></code>, <code><a href=\"api/core/StateKey\" class=\"code-anchor\">StateKey</a></code> and <code><a href=\"api/core/TransferState\" class=\"code-anchor\">TransferState</a></code></td>\n<td align=\"left\">Import from <code>@angular/core</code>.</td>\n<td align=\"left\">v16.0</td>\n<td align=\"left\">Same behavior, but exported from a different package.</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"platform-browser-dynamic\"></a></p>\n<h3 id=\"angularplatform-browser-dynamic\">@angular/platform-browser-dynamic<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularplatform-browser-dynamic\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\">Replacement</th>\n<th align=\"left\">Deprecation announced</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"api/platform-browser-dynamic/JitCompilerFactory\"><code>JitCompilerFactory</code></a></td>\n<td align=\"left\">none</td>\n<td align=\"left\">v13</td>\n<td align=\"left\">This symbol is no longer necessary. See <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for additional context.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/platform-browser-dynamic/RESOURCE_CACHE_PROVIDER\"><code>RESOURCE_CACHE_PROVIDER</code></a></td>\n<td align=\"left\">none</td>\n<td align=\"left\">v13</td>\n<td align=\"left\">This was previously necessary in some cases to test AOT-compiled components with View Engine, but is no longer since Ivy.</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"platform-server\"></a></p>\n<h3 id=\"angularplatform-server\">@angular/platform-server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularplatform-server\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\">Replacement</th>\n<th align=\"left\">Deprecation announced</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"api/platform-server/ServerTransferStateModule\"><code>ServerTransferStateModule</code></a></td>\n<td align=\"left\">No replacement needed.</td>\n<td align=\"left\">v14.1</td>\n<td align=\"left\">The <code><a href=\"api/core/TransferState\" class=\"code-anchor\">TransferState</a></code> class is available for injection without importing additional modules during server side rendering, when <code><a href=\"api/platform-server/ServerModule\" class=\"code-anchor\">ServerModule</a></code> is imported or <code><a href=\"api/platform-server/renderApplication\" class=\"code-anchor\">renderApplication</a></code> function is used for bootstrap.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/platform-server/PlatformConfig\"><code>PlatformConfig.baseUrl</code> and <code>PlatformConfig.useAbsoluteUrl</code> config options</a></td>\n<td align=\"left\">none</td>\n<td align=\"left\">v16</td>\n<td align=\"left\">This was previously unused.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/platform-server/platformDynamicServer\"><code>platformDynamicServer</code></a></td>\n<td align=\"left\">Import <code>@angular/compiler</code> and replace the usage with <code><a href=\"api/platform-server/platformServer\" class=\"code-anchor\">platformServer</a></code> instead.</td>\n<td align=\"left\">v16</td>\n<td align=\"left\">This is done to decrease the server bundle size for AOT builds.</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"forms\"></a></p>\n<h3 id=\"angularforms\">@angular/forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularforms\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\">Replacement</th>\n<th align=\"left\">Deprecation announced</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"guide/deprecations#ngmodel-reactive\"><code>ngModel</code> with reactive forms</a></td>\n<td align=\"left\"><a href=\"api/forms/FormControlDirective\"><code>FormControlDirective</code></a></td>\n<td align=\"left\">v6</td>\n<td align=\"left\">none</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/forms/FormBuilder#group\"><code>FormBuilder.group</code> legacy options parameter</a></td>\n<td align=\"left\"><a href=\"api/forms/AbstractControlOptions\"><code>AbstractControlOptions</code> parameter value</a></td>\n<td align=\"left\">v11</td>\n<td align=\"left\">none</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"upgrade\"></a></p>\n<h3 id=\"angularupgrade\">@angular/upgrade<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularupgrade\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\">Replacement</th>\n<th align=\"left\">Deprecation announced</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"api/upgrade\">All entry points</a></td>\n<td align=\"left\"><a href=\"api/upgrade/static\"><code>@angular/upgrade/static</code></a></td>\n<td align=\"left\">v5</td>\n<td align=\"left\">See <a href=\"guide/upgrade\">Upgrading from AngularJS</a>.</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"upgrade-static\"></a></p>\n<h3 id=\"angularupgradestatic\">@angular/upgrade/static<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularupgradestatic\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\">Replacement</th>\n<th align=\"left\">Deprecation announced</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"api/upgrade/static/getAngularLib\"><code>getAngularLib</code></a></td>\n<td align=\"left\"><a href=\"api/upgrade/static/getAngularJSGlobal\"><code>getAngularJSGlobal</code></a></td>\n<td align=\"left\">v5</td>\n<td align=\"left\">See <a href=\"guide/upgrade\">Upgrading from AngularJS</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/upgrade/static/setAngularLib\"><code>setAngularLib</code></a></td>\n<td align=\"left\"><a href=\"api/upgrade/static/setAngularJSGlobal\"><code>setAngularJSGlobal</code></a></td>\n<td align=\"left\">v5</td>\n<td align=\"left\">See <a href=\"guide/upgrade\">Upgrading from AngularJS</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/upgrade/static/downgradeModule\">Factory-based signature of <code>downgradeModule</code></a></td>\n<td align=\"left\"><a href=\"api/upgrade/static/downgradeModule\">NgModule-based signature of <code>downgradeModule</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">The <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></code> supports more ergonomic NgModule-based API (versus NgModule factory based API).</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"deprecated-features\"></a></p>\n<h2 id=\"deprecated-features\">Deprecated features<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features\"><i class=\"material-icons\">link</i></a></h2>\n<p>This section lists all deprecated features, which includes template syntax, configuration options, and any other deprecations not listed in the <a href=\"guide/deprecations#deprecated-apis\">Deprecated APIs</a> section.\nIt also includes deprecated API usage scenarios or API combinations, to augment the information above.</p>\n<p><a id=\"wtf\"></a></p>\n<h3 id=\"web-tracing-framework-integration\">Web Tracing Framework integration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#web-tracing-framework-integration\"><i class=\"material-icons\">link</i></a></h3>\n<p>Angular previously supported an integration with the <a href=\"https://google.github.io/tracing-framework\">Web Tracing Framework (WTF)</a> for performance testing of Angular applications.\nThis integration has not been maintained and is now defunct.\nAs a result, the integration was deprecated in Angular version 8, and due to no evidence of any existing usage, removed in version 9.</p>\n<p><a id=\"deep-component-style-selector\"></a></p>\n<h3 id=\"deep--and-ng-deep-component-style-selectors\"><code>/deep/</code>, <code>>>></code>, and <code>::ng-deep</code> component style selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deep--and-ng-deep-component-style-selectors\"><i class=\"material-icons\">link</i></a></h3>\n<p>The shadow-dom-piercing descendant combinator is deprecated and support is being <a href=\"https://developers.google.com/web/updates/2017/10/remove-shadow-piercing\">removed from major browsers and tools</a>.\nAs such, in v4, Angular's support for <code>/deep/</code>, <code>>>></code>, and <code>::ng-deep</code> was deprecated.\nUntil removal, <code>::ng-deep</code> is preferred for broader compatibility with the tools.</p>\n<p>For more information, see <a href=\"guide/component-styles#deprecated-deep--and-ng-deep\" title=\"Component Styles guide, Deprecated deep and ngdeep\">/deep/, >>>, and ::ng-deep</a> in the Component Styles guide.</p>\n<p><a id=\"bind-syntax\"></a></p>\n<h3 id=\"bind--on--bindon--and-ref--prefixes\"><code>bind-</code>, <code>on-</code>, <code>bindon-</code>, and <code>ref-</code> prefixes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#bind--on--bindon--and-ref--prefixes\"><i class=\"material-icons\">link</i></a></h3>\n<p>The template prefixes <code>bind-</code>, <code>on-</code>, <code>bindon-</code>, and <code>ref-</code> have been deprecated in v13.\nTemplates should use the more widely documented syntaxes for binding and references:</p>\n<ul>\n<li><code>[input]=\"value\"</code> instead of <code>bind-input=\"value\"</code></li>\n<li><code>[@<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>]=\"value\"</code> instead of <code>bind-animate-trigger=\"value\"</code></li>\n<li><code>(click)=\"onClick()\"</code> instead of <code>on-click=\"onClick()\"</code></li>\n<li><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"value\"</code> instead of <code>bindon-ngModel=\"value\"</code></li>\n<li><code>#templateRef</code> instead of <code>ref-templateRef</code></li>\n</ul>\n<p><a id=\"template-tag\"></a></p>\n<h3 id=\"template-tag\"><code>&#x3C;template></code> tag<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#template-tag\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>&#x3C;template></code> tag was deprecated in v4 to avoid colliding with a DOM element of the same name (such as when using web components).\nUse <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> instead.\nFor more information, see the <a href=\"guide/aot-compiler\">Ahead-of-Time Compilation</a> guide.</p>\n<p><a id=\"ngmodel-reactive\"></a></p>\n<h3 id=\"ngmodel-with-reactive-forms\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> with reactive forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#ngmodel-with-reactive-forms\"><i class=\"material-icons\">link</i></a></h3>\n<p>Support for using the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> input property and <code>ngModelChange</code> event with reactive form directives has been deprecated in Angular v6 and can be removed in a future version of Angular.</p>\n<p>Now deprecated:</p>\n<code-example path=\"deprecation-guide/src/deprecated/app.component.html\" region=\"deprecated-example\">\n\n&#x3C;input [formControl]=\"control\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"value\">\n\n\n</code-example>\n<code-example path=\"deprecation-guide/src/deprecated/app.component.ts\" region=\"deprecated-example\">\n\nthis.value = 'some value';\n\n\n</code-example>\n<p>This support was deprecated for several reasons.\nFirst, developers found this pattern confusing.\nIt seems like the actual <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive is being used, but in fact it's an input/output property named <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> on the reactive form directive that approximates some, but not all, of the directive's behavior.\nIt allows getting and setting a value and intercepting value events, but some  <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> features, such as delaying updates with<code>ngModelOptions</code> or exporting the directive, don't work.</p>\n<p>In addition, this pattern mixes template-driven and reactive forms strategies, which prevents taking advantage of the full benefits of either strategy.\nSetting the value in the template violates the template-agnostic principles behind reactive forms, whereas adding a <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>/<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> layer in the class removes the convenience of defining forms in the template.</p>\n<p>To update your code before support is removed, decide whether to stick with reactive form directives (and get/set values using reactive forms patterns) or switch to template-driven directives.</p>\n<p><strong>After</strong> (choice 1 - with reactive forms):</p>\n<!-- Standalone Reactive Forms are not ready as of 2023-09-25; move example to deprecated -->\n<code-example path=\"deprecation-guide/src/deprecated/app.component.html\" region=\"reactive-form-example\">\n\n&#x3C;input [formControl]=\"control\">\n\n\n</code-example>\n<code-example path=\"deprecation-guide/src/app/app.component.ts\" region=\"reactive-form-example\">\n\nthis.control.setValue('some value');\n\n\n</code-example>\n<p><strong>After</strong> (choice 2 - with template-driven forms):</p>\n<code-example path=\"deprecation-guide/src/app/app.component.html\" region=\"template-driven-form-example\">\n\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"value\">\n\n\n</code-example>\n<code-example path=\"deprecation-guide/src/app/app.component.ts\" region=\"template-driven-form-example\">\n\nthis.value = 'some value';\n\n\n</code-example>\n<p>By default, when you use this pattern, you get a deprecation warning once in dev mode.\nYou can choose to silence this warning by configuring <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> at import time:</p>\n<code-example path=\"deprecation-guide/src/deprecated/app.module.ts\" region=\"reactive-form-no-warning\">\nimports: [\n  ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'})\n],\n\n</code-example>\n<p>Alternatively, you can choose to surface a separate warning for each instance of this pattern with a configuration value of <code>\"always\"</code>.\nThis may help to track down where in the code the pattern is being used as the code is being updated.</p>\n<p><a id=\"router-class-and-injection-token-guards\"></a></p>\n<h3 id=\"router-class-and-injectiontoken-guards-and-resolvers\">Router class and InjectionToken guards and resolvers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#router-class-and-injectiontoken-guards-and-resolvers\"><i class=\"material-icons\">link</i></a></h3>\n<p>Class and injection token guards and resolvers are deprecated. Instead, <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>\nobjects should use functional-style guards and resolvers. Class-based guards can\nbe converted to functions by instead using <code>inject</code> to get dependencies.</p>\n<p>For testing a function <code>canActivate</code> guard, using <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> and <code>TestBed.runInInjectionContext</code> is recommended.\nTest mocks and stubs can be provided through DI with <code>{provide: X, useValue: StubX}</code>.</p>\n<p>You can also continue to use your class-based guards and pass in the mock dependencies.\nWhen used in the route definition, you can map these guards to functions using the helper\nfunctions in the router package <code><a href=\"api/router/mapToCanMatch\" class=\"code-anchor\">mapToCanMatch</a></code>, <code><a href=\"api/router/mapToCanActivate\" class=\"code-anchor\">mapToCanActivate</a></code>, etc.</p>\n<p>Finally, functional guards can be written in a way that's either testable with\n<code><a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a></code> or by passing mock implementations of dependencies.\nFor example:</p>\n<code-example>\nexport function myGuardWithMockableDeps(\n  dep1 = inject(MyService),\n  dep2 = inject(MyService2),\n  dep3 = inject(MyService3),\n) { }\n\nconst route = {\n  path: 'admin',\n  canActivate: [() => myGuardWithMockableDeps()]\n}\n</code-example>\n<p>This deprecation only affects the support for class and\n<code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code> guards at the <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> definition. <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> classes\nand <code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code> providers are <em>not</em> deprecated in the general\nsense. That said, the interfaces like <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code>,\n<code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code>, etc.  will be deleted in a future release of Angular. Simply removing the\n<code>implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> from the injectable class and updating the route definition\nto be a function like <code>canActivate: [() => inject(MyGuard).canActivate()]</code> is sufficient\nto get rid of the deprecation warning.</p>\n<p>Functional guards are robust enough to even support the existing\nclass-based guards through a transform:</p>\n<code-example>\nimport {<a href=\"api/router/CanMatchFn\" class=\"code-anchor\">CanMatchFn</a>} from '@angular/router';\n\nfunction <a href=\"api/router/mapToCanMatch\" class=\"code-anchor\">mapToCanMatch</a>(providers: Array&#x3C;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;{canMatch: <a href=\"api/router/CanMatchFn\" class=\"code-anchor\">CanMatchFn</a>}>>): <a href=\"api/router/CanMatchFn\" class=\"code-anchor\">CanMatchFn</a>[] {\n  return providers.map(provider => (...params) => inject(provider).canMatch(...params));\n}\nconst route = {\n  path: 'admin',\n  canMatch: <a href=\"api/router/mapToCanMatch\" class=\"code-anchor\">mapToCanMatch</a>([AdminGuard]),\n};\n</code-example>\n<p>That is to say that guards can continue to be implemented as classes and then converted\nto functions at the route definition.</p>\n<p><a id=\"router-writable-properties\"></a></p>\n<h3 id=\"public-router-properties\">Public <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#public-router-properties\"><i class=\"material-icons\">link</i></a></h3>\n<p>None of the public properties of the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> are meant to be writeable.\nThey should all be configured using other methods, all of which have been\ndocumented.</p>\n<p>The following strategies are meant to be configured by registering the\napplication strategy in DI via the <code>providers</code> in the configuration of <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>()</code> for a \"Standalone\" app or\nin the root <code>app.module</code> of an NgModule app:</p>\n<ul>\n<li><code>routeReuseStrategy</code></li>\n</ul>\n<p>The following options are meant to be configured using the options object\nof <code><a href=\"api/router/withRouterConfig\" class=\"code-anchor\">withRouterConfig</a>()</code> passed to <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code> for a \"Standalone\" app or\npassed to <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> in the root <code>app.module</code> of an NgModule app:</p>\n<ul>\n<li><code>onSameUrlNavigation</code></li>\n<li><code>errorHandler</code></li>\n</ul>\n<p>The following options are deprecated entirely:</p>\n<ul>\n<li><code>malformedUriErrorHandler</code> - URI parsing errors should be handled in the <code><a href=\"api/router/UrlSerializer\" class=\"code-anchor\">UrlSerializer</a></code> instead.</li>\n<li><code>errorHandler</code> - Subscribe to the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> events and filter for <code><a href=\"api/router/NavigationError\" class=\"code-anchor\">NavigationError</a></code> instead.</li>\n</ul>\n<p><a id=\"router-can-load\"></a></p>\n<h3 id=\"canload-guards\"><code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> guards<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#canload-guards\"><i class=\"material-icons\">link</i></a></h3>\n<p><code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> guards in the Router are deprecated in favor of <code><a href=\"api/router/CanMatch\" class=\"code-anchor\">CanMatch</a></code>. These guards execute at the same time\nin the lifecycle of a navigation. A <code><a href=\"api/router/CanMatch\" class=\"code-anchor\">CanMatch</a></code> guard which returns false will prevent the <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> from being\nmatched at all and also prevent loading the children of the <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>. <code><a href=\"api/router/CanMatch\" class=\"code-anchor\">CanMatch</a></code> guards can accomplish the same\ngoals as <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> but with the addition of allowing the navigation to match other routes when they reject\n(such as a wildcard route). There is no need to have both types of guards in the API surface.</p>\n<p><a id=\"loadChildren\"></a></p>\n<h3 id=\"loadchildren-string-syntax-ngmodule\"><code>loadChildren</code> string syntax (NgModule)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#loadchildren-string-syntax-ngmodule\"><i class=\"material-icons\">link</i></a></h3>\n<div class=\"alert is-critical\">\n<p>This deprecation notice applies only to lazy loading of <a href=\"guide/ngmodules\">NgModules</a>.</p>\n<p><a href=\"guide/standalone-components\">\"Standalone\"</a> applications do not reference modules.\nThey can lazy load a component with <code>loadComponent</code>\nor an array of child routes with <code>loadChildren</code> as\n<a href=\"guide/standalone-components#routing-and-lazy-loading\">discussed here</a>. </p>\n</div>\n<p>When Angular first introduced lazy routes, there wasn't browser support for dynamically loading additional JavaScript.\nAngular created its own scheme using the syntax <code>loadChildren: './lazy/lazy.module#LazyModule'</code> and built tooling to support it.\nNow that ECMAScript dynamic import is supported in many browsers, Angular is moving toward this new syntax.</p>\n<p>In version 8, the string syntax for the <a href=\"api/router/LoadChildren\"><code>loadChildren</code></a> route specification was deprecated, in favor of new syntax that uses <code>import()</code> syntax.</p>\n<p><strong>Before</strong>:</p>\n<code-example path=\"deprecation-guide/src/deprecated/app.module.ts\" language=\"typescript\" region=\"lazyload-deprecated-syntax\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [{\n    path: 'lazy',\n    // The following string syntax for loadChildren is deprecated\n    loadChildren: './lazy/lazy.module#LazyModule',\n  }];\n\n</code-example>\n<p><strong>After</strong>:</p>\n<code-example path=\"deprecation-guide/src/deprecated/app.module.ts\" language=\"typescript\" region=\"lazyload-syntax\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [{\n    path: 'lazy',\n    // The new import() syntax\n    loadChildren: () => import('../app/lazy/lazy.module').then(m => m.LazyModule)\n  }];\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p><strong>Version 8 update</strong>: When you update to version 8, the <a href=\"cli/update\"><code>ng update</code></a> command performs the transformation automatically.\nPrior to version 7, the <code>import()</code> syntax only works in JIT mode (with view engine).</p>\n</div>\n<div class=\"alert is-helpful\">\n<p><strong>Declaration syntax</strong>: <br>\nIt's important to follow the route declaration syntax <code>loadChildren: () => import('...').then(m => m.ModuleName)</code> to allow <code>ngc</code> to discover the lazy-loaded module and the associated <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.\nYou can find the complete list of allowed syntax constructs <a href=\"https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113\">here</a>.\nThese restrictions will be relaxed with the release of Ivy since it'll no longer use <code>NgFactories</code>.</p>\n</div>\n<p><a id=\"reflect-metadata\"></a></p>\n<h3 id=\"dependency-on-a-reflect-metadata-polyfill-in-jit-mode\">Dependency on a reflect-metadata polyfill in JIT mode<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#dependency-on-a-reflect-metadata-polyfill-in-jit-mode\"><i class=\"material-icons\">link</i></a></h3>\n<p>Angular applications, and specifically applications that relied on the JIT compiler, used to require a polyfill for the <a href=\"https://github.com/rbuckton/reflect-metadata\">reflect-metadata</a> APIs.</p>\n<p>The need for this polyfill was removed in Angular version 8.0 (<a href=\"https://github.com/angular/angular-cli/pull/14473\">see #14473</a>), rendering the presence of the polyfill in most Angular applications unnecessary.\nBecause the polyfill can be depended on by third-party libraries, instead of removing it from all Angular projects, we are deprecating the requirement for this polyfill as of version 8.0.\nThis should give library authors and application developers sufficient time to evaluate if they need the polyfill, and perform any refactoring necessary to remove the dependency on it.</p>\n<p>In a typical Angular project, the polyfill is not used in production builds, so removing it should not impact production applications.\nThe goal behind this removal is overall simplification of the build setup and decrease in the number of external dependencies.</p>\n<p><a id=\"static-query-resolution\"></a></p>\n<h3 id=\"viewchild--contentchild-static-resolution-as-the-default\"><code>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>()</code> / <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>()</code> static resolution as the default<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#viewchild--contentchild-static-resolution-as-the-default\"><i class=\"material-icons\">link</i></a></h3>\n<p>See the <a href=\"guide/static-query-migration\">dedicated migration guide for static queries</a>.</p>\n<p><a id=\"contentchild-input-together\"></a></p>\n<h3 id=\"contentchild--input-used-together\"><code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>()</code> / <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> used together<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#contentchild--input-used-together\"><i class=\"material-icons\">link</i></a></h3>\n<p>The following pattern is deprecated:</p>\n<code-example path=\"deprecation-guide/src/deprecated/app.component.ts\" language=\"typescript\" region=\"template-with-input-deprecated\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() @<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(<a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>) tpldeprecated !: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;any>;\n\n</code-example>\n<p>Rather than using this pattern, separate the two decorators into their own\nproperties and add fallback logic as in the following example:</p>\n<code-example path=\"deprecation-guide/src/app/app.component.ts\" language=\"typescript\" region=\"template-with-input\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() tpl !: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;any>;\n@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(<a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>) inlineTemplate !: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;any>;\n\n</code-example>\n<p><a id=\"cant-assign-template-vars\"></a></p>\n<h3 id=\"cannot-assign-to-template-variables\">Cannot assign to template variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#cannot-assign-to-template-variables\"><i class=\"material-icons\">link</i></a></h3>\n<p>In the following example, the two-way binding means that <code>optionName</code>\nshould be written when the <code>valueChange</code> event fires.</p>\n<code-example path=\"deprecation-guide/src/deprecated/app.component.html\" region=\"two-way-template-deprecated\">\n&#x3C;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let optionName of options\" [(value)]=\"optionName\">&#x3C;/option>\n\n</code-example>\n<p>However, in practice, Angular ignores two-way bindings to template variables.\nStarting in version 8, attempting to write to template variables is deprecated.\nIn a future version, we will throw to indicate that the write is not supported.</p>\n<code-example path=\"deprecation-guide/src/app/app.component.html\" region=\"valid-template-bind\">\n&#x3C;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let optionName of options\" [value]=\"optionName\">&#x3C;/option>\n\n</code-example>\n<p><a id=\"binding-to-innertext\"></a></p>\n<h3 id=\"binding-to-innertext-in-platform-server\">Binding to <code>innerText</code> in <code>platform-server</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#binding-to-innertext-in-platform-server\"><i class=\"material-icons\">link</i></a></h3>\n<p><a href=\"https://github.com/fgnass/domino\">Domino</a>, which is used in server-side rendering, doesn't support <code>innerText</code>, so in platform-server's <em>domino adapter</em>, there was special code to fall back to <code>textContent</code> if you tried to bind to <code>innerText</code>.</p>\n<p>These two properties have subtle differences, so switching to <code>textContent</code> under the hood can be surprising to users.\nFor this reason, we are deprecating this behavior.\nGoing forward, users should explicitly bind to <code>textContent</code> when using Domino.</p>\n<p><a id=\"wtf-apis\"></a></p>\n<h3 id=\"wtfstarttimerange-and-all-wtf-apis\"><code>wtfStartTimeRange</code> and all <code>wtf*</code> APIs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#wtfstarttimerange-and-all-wtf-apis\"><i class=\"material-icons\">link</i></a></h3>\n<p>All of the <code>wtf*</code> APIs are deprecated and will be removed in a future version.</p>\n<p><a id=\"entryComponents\"></a></p>\n<h3 id=\"entrycomponents-and-analyze_for_entry_components-no-longer-required\"><code>entryComponents</code> and <code>ANALYZE_FOR_ENTRY_COMPONENTS</code> no longer required<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#entrycomponents-and-analyze_for_entry_components-no-longer-required\"><i class=\"material-icons\">link</i></a></h3>\n<p>Previously, the <code>entryComponents</code> array in the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> definition was used to tell the compiler which components would be created and inserted dynamically.\nWith Ivy, this isn't a requirement anymore and the <code>entryComponents</code> array can be removed from existing module declarations.\nThe same applies to the <code>ANALYZE_FOR_ENTRY_COMPONENTS</code> injection token.</p>\n<div class=\"alert is-helpful\">\n<p><strong>NOTE</strong>: <br>\nYou may still need to keep these if building a library that will be consumed by a View Engine application.</p>\n</div>\n<p><a id=\"moduleWithProviders\"></a></p>\n<h3 id=\"modulewithproviders-type-without-a-generic\"><code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> type without a generic<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#modulewithproviders-type-without-a-generic\"><i class=\"material-icons\">link</i></a></h3>\n<p>Some Angular libraries, such as <code>@angular/router</code> and <code>@ngrx/store</code>, implement APIs that return a type called <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> (typically using a method named <code>forRoot()</code>).\nThis type represents an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> along with additional providers.\nAngular version 9 deprecates use of <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> without an explicitly generic type, where the generic type refers to the type of the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.\nIn a future version of Angular, the generic will no longer be optional.</p>\n<p>If you're using the CLI, <code>ng update</code> should <a href=\"guide/migration-module-with-providers\">migrate your code automatically</a>.\nIf you're not using the CLI, you can add any missing generic types to your application manually.\nFor example:</p>\n<p><strong>Before</strong>:</p>\n<code-example path=\"deprecation-guide/src/deprecated/app.module.ts\" language=\"typescript\" region=\"ModuleWithProvidersNonGeneric\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n/* ... */\n})\nexport class MyModule {\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: SomeConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a> {\n    return {\n      ngModule: SomeModule,\n      providers: [\n        {provide: SomeConfig, useValue: config}\n      ]\n    };\n  }\n}\n\n</code-example>\n<p><strong>After</strong>:</p>\n<code-example path=\"deprecation-guide/src/deprecated/app.module.ts\" language=\"typescript\" region=\"ModuleWithProvidersGeneric\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n/* ... */\n})\nexport class MyModule {\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: SomeConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&#x3C;SomeModule> {\n    return {\n      ngModule: SomeModule,\n      providers: [\n        {provide: SomeConfig, useValue: config}\n      ]\n    };\n  }\n}\n\n</code-example>\n<p><a id=\"input-setter-coercion\"></a></p>\n<h3 id=\"input-setter-coercion\">Input setter coercion<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#input-setter-coercion\"><i class=\"material-icons\">link</i></a></h3>\n<p>Since the <code>strictTemplates</code> flag has been introduced in Angular, the compiler has been able to type-check input bindings to the declared input type of the corresponding directive.\nWhen a getter/setter pair is used for the input, the setter might need to accept more types than the getter returns, such as when the setter first converts the input value.\nHowever, until TypeScript 4.3 a getter/setter pair was required to have identical types so this pattern could not be accurately declared.</p>\n<p>To mitigate this limitation, it was made possible to declare <a href=\"guide/template-typecheck#input-setter-coercion\">input setter coercion fields</a> in directives that are used when type-checking input bindings.\nHowever, since <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-3.html#separate-write-types-on-properties\">TypeScript 4.3</a> the limitation has been removed; setters can now accept a wider type than what is returned by the getter.\nThis means that input coercion fields are no longer needed, as their effects can be achieved by widening the type of the setter.</p>\n<p>For example, the following directive:</p>\n<code-example path=\"deprecation-guide/src/app/submit-button.component.ts\" language=\"typescript\" region=\"submitButtonNarrow\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n})\nexport class SubmitButtonComponent {\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> ngAcceptInputType_disabled: boolean|'';\n\n  private disabledValue = false;\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\n  get disabled(): boolean {\n    return this.disabledValue;\n  }\n  set disabled(value: boolean) {\n    this.disabledValue = (value === '') || value;\n  }\n}\n\n</code-example>\n<p>can be refactored as follows:</p>\n<code-example path=\"deprecation-guide/src/app/submit-button.component.ts\" language=\"typescript\" region=\"submitButton\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n})\nexport class SubmitButtonComponent {\n  private disabledValue = false;\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\n  get disabled(): boolean {\n    return this.disabledValue;\n  }\n\n  set disabled(value: boolean|'') {\n    this.disabledValue = (value === '') || value;\n  }\n}\n\n</code-example>\n<p><a id=\"full-template-type-check\"></a></p>\n<h3 id=\"fulltemplatetypecheck\"><code>fullTemplateTypeCheck</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#fulltemplatetypecheck\"><i class=\"material-icons\">link</i></a></h3>\n<p>When compiling your application using the AOT compiler, your templates are type-checked according to a certain strictness level.\nBefore Angular 9 there existed only two strictness levels of template type checking as determined by <a href=\"guide/angular-compiler-options\">the <code>fullTemplateTypeCheck</code> compiler option</a>.\nIn version 9 the <code>strictTemplates</code> family of compiler options has been introduced as a more fine-grained approach to configuring how strict your templates are being type-checked.</p>\n<p>The <code>fullTemplateTypeCheck</code> flag is being deprecated in favor of the new <code>strictTemplates</code> option and its related compiler options.\nProjects that currently have <code>fullTemplateTypeCheck: true</code> configured can migrate to the following set of compiler options to achieve the same level of type-checking:</p>\n<code-example language=\"json\" header=\"tsconfig.app.json\">\n\n{\n  \"angularCompilerOptions\": {\n    …\n    \"strictTemplates\": true,\n    \"strictInputTypes\": false,\n    \"strictNullInputTypes\": false,\n    \"strictAttributeTypes\": false,\n    \"strictOutputEventTypes\": false,\n    \"strictDomEventTypes\": false,\n    \"strictDomLocalRefTypes\": false,\n    \"strictSafeNavigationTypes\": false,\n    \"strictContextGenerics\": false,\n    …\n  }\n}\n\n</code-example>\n<p><a id=\"jit-api-changes\"></a></p>\n<h2 id=\"jit-api-changes-due-to-viewengine-deprecation\">JIT API changes due to ViewEngine deprecation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#jit-api-changes-due-to-viewengine-deprecation\"><i class=\"material-icons\">link</i></a></h2>\n<p>In ViewEngine, <a href=\"/guide/glossary#jit\">JIT compilation</a> required special providers (such as <code><a href=\"api/core/Compiler\" class=\"code-anchor\">Compiler</a></code> or <code><a href=\"api/core/CompilerFactory\" class=\"code-anchor\">CompilerFactory</a></code>) to be injected in the app and corresponding methods to be invoked.\nWith Ivy, JIT compilation takes place implicitly if the Component, NgModule, etc. have not already been <a href=\"/guide/glossary#aot\">AOT compiled</a>.\nThose special providers were made available in Ivy for backwards-compatibility with ViewEngine to make the transition to Ivy smoother.\nSince ViewEngine is deprecated and will soon be removed, those symbols are now deprecated as well.</p>\n<div class=\"alert is-important\">\n<p><strong>IMPORTANT</strong>: <br>\nthis deprecation doesn't affect JIT mode in Ivy (JIT remains available with Ivy, however we are exploring a possibility of deprecating it in the future.\nSee <a href=\"https://github.com/angular/angular/issues/43133\">RFC: Exploration of use-cases for Angular JIT compilation mode</a>).</p>\n</div>\n<p><a id=\"testrequest-errorevent\"></a></p>\n<h3 id=\"testrequest-accepting-errorevent\"><code><a href=\"api/common/http/testing/TestRequest\" class=\"code-anchor\">TestRequest</a></code> accepting <code>ErrorEvent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#testrequest-accepting-errorevent\"><i class=\"material-icons\">link</i></a></h3>\n<p>Angular provides utilities for testing <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.\nThe <code><a href=\"api/common/http/testing/TestRequest\" class=\"code-anchor\">TestRequest</a></code> class from <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>/testing</code> mocks HTTP request objects for use with <code><a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a></code>.</p>\n<p><code><a href=\"api/common/http/testing/TestRequest\" class=\"code-anchor\">TestRequest</a></code> provides an API for simulating an HTTP response with an error.\nIn earlier versions of Angular, this API accepted objects of type <code>ErrorEvent</code>, which does not match the type of error event that browsers return natively.\nIf you use <code>ErrorEvent</code> with <code><a href=\"api/common/http/testing/TestRequest\" class=\"code-anchor\">TestRequest</a></code>, you should switch to <code>ProgressEvent</code>.</p>\n<p>Here is an example using a <code>ProgressEvent</code>:</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nconst mockError = new ProgressEvent('error');\nconst mockRequest = httpTestingController.expectOne(..);\n\nmockRequest.error(mockError);\n\n</code-example>\n<p><a id=\"deprecated-cli-flags\"></a></p>\n<h2 id=\"deprecated-cli-apis-and-options\">Deprecated CLI APIs and Options<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-cli-apis-and-options\"><i class=\"material-icons\">link</i></a></h2>\n<p>This section contains a complete list all of the currently deprecated CLI flags.</p>\n<h3 id=\"angular-devkitbuild-angular\">@angular-devkit/build-angular<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angular-devkitbuild-angular\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API/Option</th>\n<th align=\"left\">May be removed in</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>deployUrl</code></td>\n<td align=\"left\"><!--v13--> v15</td>\n<td align=\"left\">Use <code>baseHref</code> option, <code><a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a></code> DI token or a combination of both instead. For more information, see <a href=\"guide/deployment#the-deploy-url\">the deploy url</a>.</td>\n</tr>\n<tr>\n<td align=\"left\">Protractor builder</td>\n<td align=\"left\"><!--v12--> v14</td>\n<td align=\"left\">Deprecate as part of the Protractor deprecation.</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"removed\"></a></p>\n<h2 id=\"removed-apis\">Removed APIs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#removed-apis\"><i class=\"material-icons\">link</i></a></h2>\n<p>The following APIs have been removed starting with version 11.0.0*:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Package</th>\n<th align=\"left\">API</th>\n<th align=\"left\">Replacement</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>@angular/router</code></td>\n<td align=\"left\"><code>preserveQueryParams</code></td>\n<td align=\"left\"><a href=\"api/router/UrlCreationOptions#queryParamsHandling\"><code>queryParamsHandling</code></a></td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>\n<p>* To see APIs removed in version 10, check out this guide on the <a href=\"https://v10.angular.io/guide/deprecations#removed\">version 10 docs site</a>.</p>\n<p><a id=\"style-sanitization\"></a></p>\n<h3 id=\"style-sanitization-for-style-and-styleprop-bindings\">Style Sanitization for <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> and <code>[style.prop]</code> bindings<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#style-sanitization-for-style-and-styleprop-bindings\"><i class=\"material-icons\">link</i></a></h3>\n<p>Angular used to sanitize <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> and <code>[style.prop]</code> bindings to prevent malicious code from being inserted through <code>javascript:</code> expressions in CSS <code>url()</code> entries.\nHowever, most modern browsers no longer support the usage of these expressions, so sanitization was only maintained for the sake of IE 6 and 7.\nGiven that Angular does not support either IE 6 or 7 and sanitization has a performance cost, we will no longer sanitize style bindings as of version 10 of Angular.</p>\n<h3 id=\"loadchildren-string-syntax-in-angularrouter\"><code>loadChildren</code> string syntax in <code>@angular/router</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#loadchildren-string-syntax-in-angularrouter\"><i class=\"material-icons\">link</i></a></h3>\n<p>It is no longer possible to use the <code>loadChildren</code> string syntax to configure lazy routes.\nThe string syntax has been replaced with dynamic import statements.\nThe <code>DeprecatedLoadChildren</code> type was removed from <code>@angular/router</code>.\nFind more information about the replacement in the <a href=\"api/router/LoadChildrenCallback\"><code>LoadChildrenCallback</code> documentation</a>.</p>\n<p>The supporting classes <code>NgModuleFactoryLoader</code>, <code>SystemJsNgModuleLoader</code>, and <code>SystemJsNgModuleLoaderConfig</code> were removed from <code>@angular/core</code>, as well as <code>SpyNgModuleFactoryLoader</code> from <code>@angular/router</code>.</p>\n<h3 id=\"wrappedvalue\"><code>WrappedValue</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#wrappedvalue\"><i class=\"material-icons\">link</i></a></h3>\n<p>The purpose of <code>WrappedValue</code> was to allow the same object instance to be treated as different for the purposes of change detection.\nIt was commonly used with the <code>async</code> pipe in the case where the <code>Observable</code> produces the same instance of the value.</p>\n<p>Given that this use case is relatively rare and special handling impacted application performance, the <code>WrappedValue</code> API has been removed in Angular 13.</p>\n<p>If you rely on the behavior that the same object instance should cause change detection, you have two options:</p>\n<ul>\n<li>Clone the resulting value so that it has a new identity</li>\n<li>Explicitly call <a href=\"api/core/ChangeDetectorRef#detectchanges\"><code>ChangeDetectorRef.detectChanges()</code></a> to force the update</li>\n</ul>\n<!-- links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Tue Sep 26 2023</div>\n</div>\n\n<!-- links to this doc:\n - api/core\n - api/core/Compiler\n - api/core/CompilerFactory\n - api/core/ModuleWithComponentFactories\n - api/core/ModuleWithProviders\n - api/core/NgModuleFactory\n - api/forms/FormControlDirective\n - api/forms/FormControlName\n - api/platform-browser-dynamic\n - api/platform-browser-dynamic/JitCompilerFactory\n - api/upgrade\n - guide/lazy-loading-ngmodules\n - guide/releases\n - guide/testing-services\n - guide/update-to-version-14\n-->\n<!-- links from this doc:\n - /guide/glossary#aot\n - /guide/glossary#jit\n - api\n - api/animations/browser/AnimationDriver#NOOP\n - api/animations/browser/NoopAnimationDriver\n - api/animations/style\n - api/animations/trigger\n - api/common/APP_BASE_HREF\n - api/common/DATE_PIPE_DEFAULT_OPTIONS\n - api/common/DATE_PIPE_DEFAULT_TIMEZONE\n - api/common/NgComponentOutlet\n - api/common/NgComponentOutlet#ngComponentOutletNgModule\n - api/common/NgFor\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/testing/HttpTestingController\n - api/common/http/testing/TestRequest\n - api/common/isPlatformWorkerApp\n - api/common/isPlatformWorkerUi\n - api/core/APP_ID\n - api/core/ApplicationRef#bootstrap\n - api/core/ChangeDetectorRef#detectchanges\n - api/core/Compiler\n - api/core/CompilerFactory\n - api/core/Component\n - api/core/Component#moduleId\n - api/core/ComponentFactory\n - api/core/ComponentFactoryResolver\n - api/core/ContentChild\n - api/core/DefaultIterableDiffer\n - api/core/EnvironmentInjector#runInContext\n - api/core/Injectable\n - api/core/Injectable#providedIn\n - api/core/InjectionToken\n - api/core/Input\n - api/core/ModuleWithComponentFactories\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/core/NgModuleFactory\n - api/core/NgProbeToken\n - api/core/PACKAGE_ROOT_URL\n - api/core/PlatformRef#bootstrapModule\n - api/core/PlatformRef#bootstrapModuleFactory\n - api/core/StateKey\n - api/core/TemplateRef\n - api/core/TransferState\n - api/core/Type\n - api/core/ViewChild\n - api/core/ViewContainerRef#createComponent\n - api/core/createComponent\n - api/core/createNgModule\n - api/core/defineInjectable\n - api/core/getModuleFactory\n - api/core/getNgModuleById\n - api/core/makeStateKey\n - api/core/ng-template\n - api/core/runInInjectionContext\n - api/core/testing/TestBed\n - api/core/testing/TestBed#get\n - api/core/testing/TestBed#inject\n - api/core/testing/async\n - api/core/testing/waitForAsync\n - api/forms/AbstractControlOptions\n - api/forms/FormBuilder#group\n - api/forms/FormControl\n - api/forms/FormControlDirective\n - api/forms/FormGroup\n - api/forms/NgModel\n - api/forms/ReactiveFormsModule\n - api/platform-browser-dynamic/JitCompilerFactory\n - api/platform-browser-dynamic/RESOURCE_CACHE_PROVIDER\n - api/platform-browser/BrowserModule#withservertransition\n - api/platform-browser/bootstrapApplication\n - api/platform-server/PlatformConfig\n - api/platform-server/ServerModule\n - api/platform-server/ServerTransferStateModule\n - api/platform-server/platformDynamicServer\n - api/platform-server/platformServer\n - api/platform-server/renderApplication\n - api/router/CanActivate\n - api/router/CanDeactivate\n - api/router/CanLoad\n - api/router/CanMatch\n - api/router/CanMatchFn\n - api/router/DeprecatedGuard\n - api/router/LoadChildren\n - api/router/LoadChildrenCallback\n - api/router/NavigationError\n - api/router/ROUTES\n - api/router/Route\n - api/router/Router\n - api/router/RouterLink\n - api/router/RouterLinkWithHref\n - api/router/RouterModule#forRoot\n - api/router/Routes\n - api/router/UrlCreationOptions#queryParamsHandling\n - api/router/UrlSerializer\n - api/router/mapToCanActivate\n - api/router/mapToCanMatch\n - api/router/provideRouter\n - api/router/provideRoutes\n - api/router/withRouterConfig\n - api/upgrade\n - api/upgrade/static\n - api/upgrade/static/downgradeModule\n - api/upgrade/static/getAngularJSGlobal\n - api/upgrade/static/getAngularLib\n - api/upgrade/static/setAngularJSGlobal\n - api/upgrade/static/setAngularLib\n - api?status=deprecated\n - cli/update\n - guide/angular-compiler-options\n - guide/aot-compiler\n - guide/component-styles#deprecated-deep--and-ng-deep\n - guide/deployment#the-deploy-url\n - guide/deprecations#angular-devkitbuild-angular\n - guide/deprecations#angularanimations\n - guide/deprecations#angularcommon\n - guide/deprecations#angularcore\n - guide/deprecations#angularcoretesting\n - guide/deprecations#angularforms\n - guide/deprecations#angularplatform-browser\n - guide/deprecations#angularplatform-browser-dynamic\n - guide/deprecations#angularplatform-server\n - guide/deprecations#angularrouter\n - guide/deprecations#angularupgrade\n - guide/deprecations#angularupgradestatic\n - guide/deprecations#bind--on--bindon--and-ref--prefixes\n - guide/deprecations#bind-syntax\n - guide/deprecations#binding-to-innertext-in-platform-server\n - guide/deprecations#canload-guards\n - guide/deprecations#cannot-assign-to-template-variables\n - guide/deprecations#common\n - guide/deprecations#contentchild--input-used-together\n - guide/deprecations#core\n - guide/deprecations#deep--and-ng-deep-component-style-selectors\n - guide/deprecations#deep-component-style-selector\n - guide/deprecations#dependency-on-a-reflect-metadata-polyfill-in-jit-mode\n - guide/deprecations#deprecated-apis\n - guide/deprecations#deprecated-apis-and-features\n - guide/deprecations#deprecated-cli-apis-and-options\n - guide/deprecations#deprecated-features\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v11-or-later\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v12-or-later\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v14-or-later\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v15-or-later\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v16-or-later\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v17-or-later\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v18-or-later\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v19-or-later\n - guide/deprecations#deprecated-features-with-no-planned-removal-version\n - guide/deprecations#entryComponents\n - guide/deprecations#entrycomponents-and-analyze_for_entry_components-no-longer-required\n - guide/deprecations#full-template-type-check\n - guide/deprecations#fulltemplatetypecheck\n - guide/deprecations#index\n - guide/deprecations#input-setter-coercion\n - guide/deprecations#jit-api-changes\n - guide/deprecations#jit-api-changes-due-to-viewengine-deprecation\n - guide/deprecations#loadchildren-string-syntax-in-angularrouter\n - guide/deprecations#loadchildren-string-syntax-ngmodule\n - guide/deprecations#modulewithproviders-type-without-a-generic\n - guide/deprecations#ngmodel-reactive\n - guide/deprecations#ngmodel-with-reactive-forms\n - guide/deprecations#platform-browser\n - guide/deprecations#platform-browser-dynamic\n - guide/deprecations#platform-server\n - guide/deprecations#public-router-properties\n - guide/deprecations#reflect-metadata\n - guide/deprecations#removed-apis\n - guide/deprecations#router\n - guide/deprecations#router-can-load\n - guide/deprecations#router-class-and-injection-token-guards\n - guide/deprecations#router-class-and-injectiontoken-guards-and-resolvers\n - guide/deprecations#router-writable-properties\n - guide/deprecations#style-sanitization-for-style-and-styleprop-bindings\n - guide/deprecations#template-tag\n - guide/deprecations#testing\n - guide/deprecations#testrequest-accepting-errorevent\n - guide/deprecations#testrequest-errorevent\n - guide/deprecations#upgrade\n - guide/deprecations#upgrade-static\n - guide/deprecations#viewchild--contentchild-static-resolution-as-the-default\n - guide/deprecations#web-tracing-framework-integration\n - guide/deprecations#wrappedvalue\n - guide/deprecations#wtfstarttimerange-and-all-wtf-apis\n - guide/migration-module-with-providers\n - guide/ngmodules\n - guide/releases#deprecation-policy\n - guide/standalone-components\n - guide/standalone-components#routing-and-lazy-loading\n - guide/static-query-migration\n - guide/template-typecheck#input-setter-coercion\n - guide/upgrade\n - https://developers.google.com/web/updates/2017/10/remove-shadow-piercing\n - https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113\n - https://github.com/angular/angular-cli/pull/14473\n - https://github.com/angular/angular/blob/main/CHANGELOG.md\n - https://github.com/angular/angular/issues/40091\n - https://github.com/angular/angular/issues/43133\n - https://github.com/angular/components/blob/main/CHANGELOG.md\n - https://github.com/fgnass/domino\n - https://github.com/rbuckton/reflect-metadata\n - https://google.github.io/tracing-framework\n - https://update.angular.io\n - https://v10.angular.io/guide/deprecations#removed\n - https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-3.html#separate-write-types-on-properties\n-->"
}