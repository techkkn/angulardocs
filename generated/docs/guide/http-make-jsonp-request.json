{
  "id": "guide/http-make-jsonp-request",
  "title": "HTTP: Make a JSONP request",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"http-make-a-jsonp-request\">HTTP: Make a JSONP request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-make-jsonp-request#http-make-a-jsonp-request\"><i class=\"material-icons\">link</i></a></h1>\n<p>“JSON with Padding” (JSONP) is a method to deceive a web browser into carrying out requests with a <code>&#x3C;script></code> tag that uses the SRC attribute to make a special API request.</p>\n<p>Apps can use the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> to make <a href=\"https://en.wikipedia.org/wiki/JSONP\">JSONP</a> requests across domains when a server doesn't support <a href=\"https://developer.mozilla.org/docs/Web/HTTP/CORS\">CORS protocol</a>.</p>\n<p>Angular JSONP requests return an <code>Observable</code>.\nFollow the pattern for subscribing to observables and use the RxJS <code>map</code> operator to transform the response before using the <a href=\"api/common/AsyncPipe\">async pipe</a> to manage the results.</p>\n<p>Enable JSONP by providing the <code><a href=\"api/common/http/HttpClientJsonpModule\" class=\"code-anchor\">HttpClientJsonpModule</a></code> in the <code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> providers array in <code>app.config.ts</code> like this:</p>\n<code-example header=\"app.config.ts (excerpt)\" path=\"http/src/app/app.config.ts\" region=\"jsonp\">\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n  providers: [\n    <a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a>(<a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>),\n    <a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a>(<a href=\"api/common/http/HttpClientJsonpModule\" class=\"code-anchor\">HttpClientJsonpModule</a>),\n  ]\n};\n\n\n</code-example>\n<p>In the following example, the <code>searchHeroesJsonp()</code> method uses a JSONP request to query for heroes whose names contain the search term acquired from the user.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"searchHeroesJsonp\">\n/* GET heroes whose name contains search term */\nsearchHeroes(term: string): Observable&#x3C;Hero[]> {\n  term = term.trim();\n\n  const heroesUrl = `${this.heroesSearchUrl}?${term}`;\n  return this.http.jsonp(heroesUrl, 'callback')\n    .pipe(\n      map(result => this.jsonpResultToHeroes(result)),\n      catchError(this.handleError('searchHeroes', []))\n    );\n}\n\n</code-example>\n<p>This request passes the <code>heroesUrl</code> with the search term as the first parameter and the standard callback function name, <code>callback</code>, as the second parameter.</p>\n<p>You may have to <code>map</code> the Observable response from the <code>http.jsonp</code> method to the intended data type\nas this example does with <code>jsonpResultToHeroes</code>.</p>\n<h2 id=\"request-non-json-data\">Request non-JSON data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-make-jsonp-request#request-non-json-data\"><i class=\"material-icons\">link</i></a></h2>\n<p>Not all APIs return JSON data.\nIn this next example, a <code>DownloaderService</code> method reads a text file from the server and logs the file contents, before returning those contents to the caller as an <code>Observable&#x3C;string></code>.</p>\n<code-example header=\"app/downloader/downloader.service.ts (getTextFile)\" linenums=\"false\" path=\"http/src/app/downloader/downloader.service.ts\" region=\"getTextFile\">\ngetTextFile(filename: string) {\n  // The Observable returned by get() is of type Observable&#x3C;string>\n  // because a text response was specified.\n  // There's no need to pass a &#x3C;string> type parameter to get().\n  return this.http.get(filename, {responseType: 'text'})\n    .pipe(\n      tap( // Log the result or error\n      {\n        next: (data) => this.log(filename, data),\n        error: (error) => this.logError(filename, error)\n      }\n      )\n    );\n}\n\n</code-example>\n<p><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> returns a string rather than the default JSON because of the <code>responseType</code> option.</p>\n<p>The RxJS <code>tap</code> operator lets the code inspect both success and error values passing through the observable without disturbing them.</p>\n<p>A <code>download()</code> method in the <code>DownloaderComponent</code> initiates the request by subscribing to the service method.</p>\n<code-example header=\"app/downloader/downloader.component.ts (download)\" linenums=\"false\" path=\"http/src/app/downloader/downloader.component.ts\" region=\"download\">\ndownload() {\n  this.downloaderService.getTextFile('assets/textfile.txt')\n    .subscribe(results => this.contents = results);\n}\n\n</code-example>\n<p><a id=\"error-handling\"></a></p>\n\n  <div class=\"reviewed\">Last reviewed on Thu Aug 17 2023</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/common/http/HttpClientJsonpModule\n - api/common/http/HttpClientModule\n - api/core/ApplicationConfig\n - api/core/importProvidersFrom\n - guide/http-make-jsonp-request#http-make-a-jsonp-request\n - guide/http-make-jsonp-request#request-non-json-data\n - https://developer.mozilla.org/docs/Web/HTTP/CORS\n - https://en.wikipedia.org/wiki/JSONP\n-->"
}