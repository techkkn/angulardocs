{
  "id": "guide/cli-builder",
  "title": "Angular CLI builders",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"angular-cli-builders\">Angular CLI builders<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#angular-cli-builders\"><i class=\"material-icons\">link</i></a></h1>\n<p>A number of Angular CLI commands run a complex process on your code, such as linting, building, or testing.\nThe commands use an internal tool called Architect to run <em>CLI builders</em>, which apply another tool to accomplish the wanted task.</p>\n<p>With Angular version 8, the CLI Builder API is stable and available to developers who want to customize the Angular CLI by adding or modifying commands.\nFor example, you could supply a builder to perform an entirely new task, or to change which third-party tool is used by an existing command.</p>\n<p>This document explains how CLI builders integrate with the workspace configuration file, and shows how you can create your own builder.</p>\n<div class=\"alert is-helpful\">\n<p>Find the code from the examples used here in this <a href=\"https://github.com/mgechev/cli-builders-demo\">GitHub repository</a>.</p>\n</div>\n<h2 id=\"cli-builders\">CLI builders<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#cli-builders\"><i class=\"material-icons\">link</i></a></h2>\n<p>The internal Architect tool delegates work to handler functions called <a href=\"guide/glossary#builder\"><em>builders</em></a>.\nA builder handler function receives two arguments; a set of input <code>options</code> (a JSON object), and a <code>context</code> (a <code>BuilderContext</code> object).</p>\n<p>The separation of concerns here is the same as with <a href=\"guide/glossary#schematic\">schematics</a>, which are used for other CLI commands that touch your code (such as <code>ng generate</code>).</p>\n<ul>\n<li>The <code>options</code> object is provided by the CLI user, while the <code>context</code> object is provided by the CLI Builder API</li>\n<li>In addition to the contextual information, the <code>context</code> object, which is an instance of the <code>BuilderContext</code>, also provides access to a scheduling method, <code>context.scheduleTarget()</code>.\nThe scheduler executes the builder handler function with a given <a href=\"guide/glossary#target\">target configuration</a>.</li>\n</ul>\n<p>The builder handler function can be synchronous (return a value) or asynchronous (return a Promise), or it can watch and return multiple values (return an Observable).\nThe return value or values must always be of type <code>BuilderOutput</code>.\nThis object contains a Boolean <code>success</code> field and an optional <code>error</code> field that can contain an error message.</p>\n<p>Angular provides some builders that are used by the CLI for commands such as <code>ng build</code> and <code>ng test</code>.\nDefault target configurations for these and other built-in CLI builders can be found (and customized) in the \"architect\" section of the <a href=\"guide/workspace-config\">workspace configuration file</a>, <code>angular.json</code>.\nAlso, extend and customize Angular by creating your own builders, which you can run using the <a href=\"cli/run\"><code>ng run</code> CLI command</a>.</p>\n<h3 id=\"builder-project-structure\">Builder project structure<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#builder-project-structure\"><i class=\"material-icons\">link</i></a></h3>\n<p>A builder resides in a \"project\" folder that is similar in structure to an Angular workspace, with global configuration files at the top level, and more specific configuration in a source folder with the code files that define the behavior.\nFor example, your <code>myBuilder</code> folder could contain the following files.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Files</th>\n<th align=\"left\">Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>src/my-builder.ts</code></td>\n<td align=\"left\">Main source file for the builder definition.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>src/my-builder.spec.ts</code></td>\n<td align=\"left\">Source file for tests.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>src/schema.json</code></td>\n<td align=\"left\">Definition of builder input options.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>builders.json</code></td>\n<td align=\"left\">Builders definition.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>package.json</code></td>\n<td align=\"left\">Dependencies. See <a href=\"https://docs.npmjs.com/files/package.json\">https://docs.npmjs.com/files/package.json</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>tsconfig.json</code></td>\n<td align=\"left\"><a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript configuration</a>.</td>\n</tr>\n</tbody>\n</table>\n<p>Publish the builder to <code>npm</code> (see <a href=\"guide/creating-libraries#publishing-your-library\">Publishing your Library</a>).\nIf you publish it as <code>@example/my-builder</code>, install it using the following command.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install @example/my-builder\n\n</code-example>\n<h2 id=\"creating-a-builder\">Creating a builder<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#creating-a-builder\"><i class=\"material-icons\">link</i></a></h2>\n<p>As an example, create a builder that copies a file.\nTo create a builder, use the <code>createBuilder()</code> CLI Builder function, and return a <code>Promise&#x3C;BuilderOutput></code> object.</p>\n<code-example header=\"src/my-builder.ts (builder skeleton)\" path=\"cli-builder/src/my-builder.ts\" region=\"builder-skeleton\">\nimport { BuilderContext, BuilderOutput, createBuilder } from '@angular-devkit/architect';\nimport { JsonObject } from '@angular-devkit/core';\n\ninterface Options extends JsonObject {\n  source: string;\n  destination: string;\n}\n\nexport default createBuilder(copyFileBuilder);\n\n<a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> function copyFileBuilder(\n  options: Options,\n  context: BuilderContext,\n): Promise&#x3C;BuilderOutput> {\n}\n\n\n</code-example>\n<p>Now let's add some logic to it.\nThe following code retrieves the source and destination file paths from user options and copies the file from the source to the destination (using the <a href=\"https://nodejs.org/api/fs.html#fs_fspromises_copyfile_src_dest_mode\">Promise version of the built-in NodeJS <code>copyFile()</code> function</a>).\nIf the copy operation fails, it returns an error with a message about the underlying problem.</p>\n<code-example header=\"src/my-builder.ts (builder)\" path=\"cli-builder/src/my-builder.ts\" region=\"builder\">\nimport { BuilderContext, BuilderOutput, createBuilder } from '@angular-devkit/architect';\nimport { JsonObject } from '@angular-devkit/core';\nimport { promises as fs } from 'fs';\n\ninterface Options extends JsonObject {\n  source: string;\n  destination: string;\n}\n\nexport default createBuilder(copyFileBuilder);\n\n<a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> function copyFileBuilder(\n  options: Options,\n  context: BuilderContext,\n): Promise&#x3C;BuilderOutput> {\n  try {\n    await fs.copyFile(options.source, options.destination);\n  } catch (err) {\n    return {\n      success: false,\n      error: err.message,\n    };\n  }\n\n  return { success: true };\n}\n\n\n</code-example>\n<h3 id=\"handling-output\">Handling output<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#handling-output\"><i class=\"material-icons\">link</i></a></h3>\n<p>By default, <code>copyFile()</code> does not print anything to the process standard output or error.\nIf an error occurs, it might be difficult to understand exactly what the builder was trying to do when the problem occurred.\nAdd some additional context by logging additional information using the <code>Logger</code> API.\nThis also lets the builder itself be executed in a separate process, even if the standard output and error are deactivated (as in an <a href=\"https://electronjs.org\">Electron app</a>).</p>\n<p>You can retrieve a <code>Logger</code> instance from the context.</p>\n<code-example header=\"src/my-builder.ts (handling output)\" path=\"cli-builder/src/my-builder.ts\" region=\"handling-output\">\nimport { BuilderContext, BuilderOutput, createBuilder } from '@angular-devkit/architect';\nimport { JsonObject } from '@angular-devkit/core';\nimport { promises as fs } from 'fs';\n\ninterface Options extends JsonObject {\n  source: string;\n  destination: string;\n}\n\nexport default createBuilder(copyFileBuilder);\n\n<a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> function copyFileBuilder(\n  options: Options,\n  context: BuilderContext,\n): Promise&#x3C;BuilderOutput> {\n  try {\n    await fs.copyFile(options.source, options.destination);\n  } catch (err) {\n    context.logger.error('Failed to copy file.');\n    return {\n      success: false,\n      error: err.message,\n    };\n  }\n\n  return { success: true };\n}\n\n\n</code-example>\n<h3 id=\"progress-and-status-reporting\">Progress and status reporting<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#progress-and-status-reporting\"><i class=\"material-icons\">link</i></a></h3>\n<p>The CLI Builder API includes progress and status reporting tools, which can provide hints for certain functions and interfaces.</p>\n<p>To report progress, use the <code>context.reportProgress()</code> method, which takes a current value, (optional) total, and status string as arguments.\nThe total can be any number; for example, if you know how many files you have to process, the total could be the number of files, and current should be the number processed so far.\nThe status string is unmodified unless you pass in a new string value.</p>\n<p>You can see an <a href=\"https://github.com/angular/angular-cli/blob/ba21c855c0c8b778005df01d4851b5a2176edc6f/packages/angular_devkit/build_angular/src/tslint/index.ts#L107\">example</a> of how the <code>tslint</code> builder reports progress.</p>\n<p>In our example, the copy operation either finishes or is still executing, so there's no need for a progress report, but you can report status so that a parent builder that called our builder would know what's going on.\nUse the <code>context.reportStatus()</code> method to generate a status string of any length.</p>\n<div class=\"alert is-helpful\">\n<p><strong>NOTE</strong>: <br>\nThere's no guarantee that a long string will be shown entirely; it could be cut to fit the UI that displays it.</p>\n</div>\n<p>Pass an empty string to remove the status.</p>\n<code-example header=\"src/my-builder.ts (progress reporting)\" path=\"cli-builder/src/my-builder.ts\" region=\"progress-reporting\">\nimport { BuilderContext, BuilderOutput, createBuilder } from '@angular-devkit/architect';\nimport { JsonObject } from '@angular-devkit/core';\nimport { promises as fs } from 'fs';\n\ninterface Options extends JsonObject {\n  source: string;\n  destination: string;\n}\n\nexport default createBuilder(copyFileBuilder);\n\n<a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> function copyFileBuilder(\n  options: Options,\n  context: BuilderContext,\n): Promise&#x3C;BuilderOutput> {\n  context.reportStatus(`Copying ${options.source} to ${options.destination}.`);\n  try {\n    await fs.copyFile(options.source, options.destination);\n  } catch (err) {\n    context.logger.error('Failed to copy file.');\n    return {\n      success: false,\n      error: err.message,\n    };\n  }\n\n  context.reportStatus('Done.');\n  return { success: true };\n}\n\n\n</code-example>\n<h2 id=\"builder-input\">Builder input<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#builder-input\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can invoke a builder indirectly through a CLI command, or directly with the Angular CLI <code>ng run</code> command.\nIn either case, you must provide required inputs, but can let other inputs default to values that are pre-configured for a specific <a href=\"guide/glossary#target\"><em>target</em></a>, provide a pre-defined, named override configuration, and provide further override option values on the command line.</p>\n<h3 id=\"input-validation\">Input validation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#input-validation\"><i class=\"material-icons\">link</i></a></h3>\n<p>You define builder inputs in a JSON schema associated with that builder.\nThe Architect tool collects the resolved input values into an <code>options</code> object, and validates their types against the schema before passing them to the builder function.\n(The Schematics library does the same kind of validation of user input.)</p>\n<p>For our example builder, you expect the <code>options</code> value to be a <code>JsonObject</code> with two keys:\nA <code>source</code> and a <code>destination</code>, each of which are a string.</p>\n<p>You can provide the following schema for type validation of these values.</p>\n<code-example header=\"src/schema.json\" format=\"json\" language=\"json\">\n\n{\n  \"$schema\": \"http://json-schema.org/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"source\": {\n      \"type\": \"string\"\n    },\n    \"destination\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>This is a very simple example, but the use of a schema for validation can be very powerful.\nFor more information, see the <a href=\"http://json-schema.org\">JSON schemas website</a>.</p>\n</div>\n<p>To link our builder implementation with its schema and name, you need to create a <em>builder definition</em> file, which you can point to in <code>package.json</code>.</p>\n<p>Create a file named <code>builders.json</code> that looks like this:</p>\n<code-example header=\"builders.json\" format=\"json\" language=\"json\">\n\n{\n  \"builders\": {\n    \"copy\": {\n      \"implementation\": \"./dist/my-builder.js\",\n      \"schema\": \"./src/schema.json\",\n      \"description\": \"Copies a file.\"\n    }\n  }\n}\n\n</code-example>\n<p>In the <code>package.json</code> file, add a <code>builders</code> key that tells the Architect tool where to find our builder definition file.</p>\n<code-example header=\"package.json\" format=\"json\" language=\"json\">\n\n{\n  \"name\": \"@example/copy-file\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Builder for copying files\",\n  \"builders\": \"builders.json\",\n  \"dependencies\": {\n    \"@angular-devkit/architect\": \"~0.1200.0\",\n    \"@angular-devkit/core\": \"^12.0.0\"\n  }\n}\n\n</code-example>\n<p>The official name of our builder is now <code> @example/copy-file:copy</code>.\nThe first part of this is the package name (resolved using node resolution), and the second part is the builder name (resolved using the <code>builders.json</code> file).</p>\n<p>Using one of our <code>options</code> is very straightforward.\nYou did this in the previous section when you accessed <code>options.source</code> and <code>options.destination</code>.</p>\n<code-example header=\"src/my-builder.ts (report status)\" path=\"cli-builder/src/my-builder.ts\" region=\"report-status\">\ncontext.reportStatus(`Copying ${options.source} to ${options.destination}.`);\ntry {\n  await fs.copyFile(options.source, options.destination);\n} catch (err) {\n  context.logger.error('Failed to copy file.');\n  return {\n    success: false,\n    error: err.message,\n  };\n}\n\ncontext.reportStatus('Done.');\nreturn { success: true };\n\n</code-example>\n<h3 id=\"target-configuration\">Target configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#target-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<p>A builder must have a defined target that associates it with a specific input configuration and <a href=\"guide/glossary#project\">project</a>.</p>\n<p>Targets are defined in the <code>angular.json</code> <a href=\"guide/workspace-config\">CLI configuration file</a>.\nA target specifies the builder to use, its default options configuration, and named alternative configurations.\nThe Architect tool uses the target definition to resolve input options for a given run.</p>\n<p>The <code>angular.json</code> file has a section for each project, and the \"architect\" section of each project configures targets for builders used by CLI commands such as 'build', 'test', and 'lint'.\nBy default, for example, the <code>build</code> command runs the builder <code>@angular-devkit/build-angular:<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code> to perform the build task, and passes in default option values as specified for the <code>build</code> target in <code>angular.json</code>.</p>\n<code-example format=\"json\" header=\"angular.json\" language=\"json\">\n{\n  \"myApp\": {\n    …\n    \"architect\": {\n      \"build\": {\n        \"builder\": \"@angular-devkit/build-angular:browser\",\n        \"options\": {\n          \"outputPath\": \"dist/myApp\",\n          \"index\": \"src/index.html\",\n          …\n        },\n        \"configurations\": {\n          \"production\": {\n            \"fileReplacements\": [\n              {\n                \"replace\": \"src/environments/environment.ts\",\n                \"with\": \"src/environments/environment.prod.ts\"\n              }\n            ],\n            \"optimization\": true,\n            \"outputHashing\": \"all\",\n            …\n          }\n        }\n      },\n      …\n\n</code-example>\n<p>The command passes the builder the set of default options specified in the \"options\" section.\nIf you pass the <code>--configuration=production</code> flag, it uses the override values specified in the <code>production</code> alternative configuration.\nSpecify further option overrides individually on the command line.\nYou might also add more alternative configurations to the <code>build</code> target, to define other environments such as <code>stage</code> or <code>qa</code>.</p>\n<h4 id=\"target-strings\">Target strings<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#target-strings\"><i class=\"material-icons\">link</i></a></h4>\n<p>The generic <code>ng run</code> CLI command takes as its first argument a target string of the following form.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nproject:target[:configuration]\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">project</td>\n<td align=\"left\">The name of the Angular CLI project that the target is associated with.</td>\n</tr>\n<tr>\n<td align=\"left\">target</td>\n<td align=\"left\">A named builder configuration from the <code>architect</code> section of the <code>angular.json</code> file.</td>\n</tr>\n<tr>\n<td align=\"left\">configuration</td>\n<td align=\"left\">(optional) The name of a specific configuration override for the given target, as defined in the <code>angular.json</code> file.</td>\n</tr>\n</tbody>\n</table>\n<p>If your builder calls another builder, it might need to read a passed target string.\nParse this string into an object by using the <code>targetFromTargetString()</code> utility function from <code>@angular-devkit/architect</code>.</p>\n<h2 id=\"schedule-and-run\">Schedule and run<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#schedule-and-run\"><i class=\"material-icons\">link</i></a></h2>\n<p>Architect runs builders asynchronously.\nTo invoke a builder, you schedule a task to be run when all configuration resolution is complete.</p>\n<p>The builder function is not executed until the scheduler returns a <code>BuilderRun</code> control object.\nThe CLI typically schedules tasks by calling the <code>context.scheduleTarget()</code> function, and then resolves input options using the target definition in the <code>angular.json</code> file.</p>\n<p>Architect resolves input options for a given target by taking the default options object, then overwriting values from the configuration used (if any), then further overwriting values from the overrides object passed to <code>context.scheduleTarget()</code>.\nFor the Angular CLI, the overrides object is built from command line arguments.</p>\n<p>Architect validates the resulting options values against the schema of the builder.\nIf inputs are valid, Architect creates the context and executes the builder.</p>\n<p>For more information see <a href=\"guide/workspace-config\">Workspace Configuration</a>.</p>\n<div class=\"alert is-helpful\">\n<p>You can also invoke a builder directly from another builder or test by calling <code>context.scheduleBuilder()</code>.\nYou pass an <code>options</code> object directly to the method, and those option values are validated against the schema of the builder without further adjustment.</p>\n<p>Only the  <code>context.scheduleTarget()</code> method resolves the configuration and overrides through the <code>angular.json</code> file.</p>\n</div>\n<h3 id=\"default-architect-configuration\">Default architect configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#default-architect-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<p>Let's create a simple <code>angular.json</code> file that puts target configurations into context.</p>\n<p>You can publish the builder to npm (see <a href=\"guide/creating-libraries#publishing-your-library\">Publishing your Library</a>), and install it using the following command:</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install @example/copy-file\n\n</code-example>\n<p>If you create a new project with <code>ng new builder-test</code>, the generated <code>angular.json</code> file looks something like this, with only default builder configurations.</p>\n<code-example format=\"json\" header=\"angular.json\" language=\"json\">\n\n{\n  // …\n  \"projects\": {\n    // …\n    \"builder-test\": {\n      // …\n      \"architect\": {\n        // …\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            // … more options…\n            \"outputPath\": \"dist/builder-test\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": \"src/polyfills.ts\",\n            \"tsConfig\": \"src/tsconfig.app.json\"\n          },\n          \"configurations\": {\n            \"production\": {\n              // … more options…\n              \"optimization\": true,\n              \"aot\": true,\n              \"buildOptimizer\": true\n            }\n          }\n        }\n      }\n    }\n  }\n  // …\n}\n\n</code-example>\n<h3 id=\"adding-a-target\">Adding a target<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#adding-a-target\"><i class=\"material-icons\">link</i></a></h3>\n<p>Add a new target that will run our builder to copy a file.\nThis target tells the builder to copy the <code>package.json</code> file.</p>\n<p>You need to update the <code>angular.json</code> file to add a target for this builder to the \"architect\" section of our new project.</p>\n<ul>\n<li>\n<p>We'll add a new target section to the \"architect\" object for our project</p>\n</li>\n<li>\n<p>The target named \"copy-package\" uses our builder, which you published to <code>@example/copy-file</code>.\n(See <a href=\"guide/creating-libraries#publishing-your-library\">Publishing your Library</a>.)</p>\n</li>\n<li>\n<p>The options object provides default values for the two inputs that you defined; <code>source</code>, which is the existing file you are copying, and <code>destination</code>, the path you want to copy to</p>\n</li>\n<li>\n<p>The <code>configurations</code> key is optional, we'll leave it out for now</p>\n</li>\n</ul>\n<code-example format=\"json\" header=\"angular.json\" language=\"json\">\n\n{\n  \"projects\": {\n    \"builder-test\": {\n      \"architect\": {\n        \"copy-package\": {\n          \"builder\": \"@example/copy-file:copy\",\n          \"options\": {\n            \"source\": \"package.json\",\n            \"destination\": \"package-copy.json\"\n          }\n        },\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/builder-test\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": \"src/polyfills.ts\",\n            \"tsConfig\": \"src/tsconfig.app.json\"\n          },\n          \"configurations\": {\n            \"production\": {\n              \"fileReplacements\": [\n                {\n                  \"replace\": \"src/environments/environment.ts\",\n                  \"with\": \"src/environments/environment.prod.ts\"\n                }\n              ],\n              \"optimization\": true,\n              \"aot\": true,\n              \"buildOptimizer\": true\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n</code-example>\n<h3 id=\"running-the-builder\">Running the builder<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#running-the-builder\"><i class=\"material-icons\">link</i></a></h3>\n<p>To run our builder with the new target's default configuration, use the following CLI command.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng run builder-test:copy-package\n\n</code-example>\n<p>This copies the <code>package.json</code> file to <code>package-copy.json</code>.</p>\n<p>Use command-line arguments to override the configured defaults.\nFor example, to run with a different <code>destination</code> value, use the following CLI command.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng run builder-test:copy-package --destination=package-other.json\n\n</code-example>\n<p>This copies the file to <code>package-other.json</code> instead of <code>package-copy.json</code>.\nBecause you did not override the <em>source</em> option, it will copy from the <code>package.json</code> file (the default value provided for the target).</p>\n<h2 id=\"testing-a-builder\">Testing a builder<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#testing-a-builder\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use integration testing for your builder, so that you can use the Architect scheduler to create a context, as in this <a href=\"https://github.com/mgechev/cli-builders-demo\">example</a>.</p>\n<ul>\n<li>\n<p>In the builder source directory, you have created a new test file <code>my-builder.spec.ts</code>.\nThe code creates new instances of <code>JsonSchemaRegistry</code> (for schema validation), <code>TestingArchitectHost</code> (an in-memory implementation of <code>ArchitectHost</code>), and <code>Architect</code>.</p>\n</li>\n<li>\n<p>We've added a <code>builders.json</code> file next to the builder's <code>package.json</code> file, and modified the package file to point to it.</p>\n</li>\n</ul>\n<p>Here's an example of a test that runs the copy file builder.\nThe test uses the builder to copy the <code>package.json</code> file and validates that the copied file's contents are the same as the source.</p>\n<code-example header=\"src/my-builder.spec.ts\" path=\"cli-builder/src/my-builder.spec.ts\">\nimport { Architect } from '@angular-devkit/architect';\nimport { TestingArchitectHost } from '@angular-devkit/architect/testing';\nimport { schema } from '@angular-devkit/core';\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\n\ndescribe('Copy File Builder', () => {\n  let architect: Architect;\n  let architectHost: TestingArchitectHost;\n\n  beforeEach(<a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () => {\n    const registry = new schema.CoreSchemaRegistry();\n    registry.addPostTransform(schema.transforms.addUndefinedDefaults);\n\n    // TestingArchitectHost() takes workspace and current directories.\n    // Since we don't use those, both are the same in this case.\n    architectHost = new TestingArchitectHost(__dirname, __dirname);\n    architect = new Architect(architectHost, registry);\n\n    // This will either take a Node package name, or a path to the directory\n    // for the package.json file.\n    await architectHost.addBuilderFromPackage(join(__dirname, '..'));\n  });\n\n  it('can copy files', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () => {\n    // A \"run\" can have <a href=\"api/forms/SelectMultipleControlValueAccessor\" class=\"code-anchor\">multiple</a> outputs, and contains progress information.\n    const run = await architect.scheduleBuilder('@example/copy-file:copy', {\n      source: 'package.json',\n      destination: 'package-copy.json',\n    });\n\n    // The \"result\" member (of type BuilderOutput) is the next output.\n    const <a href=\"api/core/output\" class=\"code-anchor\">output</a> = await run.result;\n\n    // Stop the builder from running. This stops Architect from keeping\n    // the builder-associated states in memory, since builders keep waiting\n    // to be scheduled.\n    await run.stop();\n\n    // Expect that the copied file is the same as its source.\n    const sourceContent = await fs.readFile('package.json', 'utf8');\n    const destinationContent = await fs.readFile('package-copy.json', 'utf8');\n    expect(destinationContent).toBe(sourceContent);\n  });\n});\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>When running this test in your repo, you need the <a href=\"https://github.com/TypeStrong/ts-node\"><code>ts-node</code></a> package.\nYou can avoid this by renaming <code>my-builder.spec.ts</code> to <code>my-builder.spec.js</code>.</p>\n</div>\n<h3 id=\"watch-mode\">Watch mode<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#watch-mode\"><i class=\"material-icons\">link</i></a></h3>\n<p>Architect expects builders to run once (by default) and return.\nThis behavior is not entirely compatible with a builder that watches for changes (like Webpack, for example).\nArchitect can support watch mode, but there are some things to look out for.</p>\n<ul>\n<li>\n<p>To be used with watch mode, a builder handler function should return an Observable.\nArchitect subscribes to the Observable until it completes and might reuse it if the builder is scheduled again with the same arguments.</p>\n</li>\n<li>\n<p>The builder should always emit a <code>BuilderOutput</code> object after each execution.\nOnce it's been executed, it can enter a watch mode, to be triggered by an external event.\nIf an event triggers it to restart, the builder should execute the <code>context.reportRunning()</code> function to tell Architect that it is running again.\nThis prevents Architect from stopping the builder if another run is scheduled.</p>\n</li>\n</ul>\n<p>When your builder calls <code>BuilderRun.stop()</code> to exit watch mode, Architect unsubscribes from the builder's Observable and calls the builder's teardown logic to clean up.\n(This behavior also allows for long-running builds to be stopped and cleaned up.)</p>\n<p>In general, if your builder is watching an external event, you should separate your run into three phases.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Phases</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Running</td>\n<td align=\"left\">For example, webpack compiles. This ends when webpack finishes and your builder emits a <code>BuilderOutput</code> object.</td>\n</tr>\n<tr>\n<td align=\"left\">Watching</td>\n<td align=\"left\">Between two runs, watch an external event stream. For example, webpack watches the file system for any changes. This ends when webpack restarts building, and <code>context.reportRunning()</code> is called. This goes back to step 1.</td>\n</tr>\n<tr>\n<td align=\"left\">Completion</td>\n<td align=\"left\">Either the task is fully completed (for example, webpack was supposed to run a number of times), or the builder run was stopped (using <code>BuilderRun.stop()</code>). Your teardown logic is executed, and Architect unsubscribes from your builder's Observable.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cli-builder#summary\"><i class=\"material-icons\">link</i></a></h2>\n<p>The CLI Builder API provides a new way of changing the behavior of the Angular CLI by using builders to execute custom logic.</p>\n<ul>\n<li>\n<p>Builders can be synchronous or asynchronous, execute once or watch for external events, and can schedule other builders or targets</p>\n</li>\n<li>\n<p>Builders have option defaults specified in the <code>angular.json</code> configuration file, which can be overwritten by an alternate configuration for the target, and further overwritten by command line flags</p>\n</li>\n<li>\n<p>We recommend that you use integration tests to test Architect builders.\nUse unit tests to validate the logic that the builder executes.</p>\n</li>\n<li>\n<p>If your builder returns an Observable, it should clean up in the teardown logic of that Observable</p>\n</li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Mon Feb 28 2022</div>\n</div>\n\n<!-- links to this doc:\n - cli/deploy\n - cli/lint\n - guide/architecture-next-steps\n - guide/deployment\n - guide/workspace-config\n-->\n<!-- links from this doc:\n - api/animations/browser\n - api/core/output\n - api/forms/SelectMultipleControlValueAccessor\n - api/platform-browser/animations/async\n - cli/run\n - guide/cli-builder#adding-a-target\n - guide/cli-builder#angular-cli-builders\n - guide/cli-builder#builder-input\n - guide/cli-builder#builder-project-structure\n - guide/cli-builder#cli-builders\n - guide/cli-builder#creating-a-builder\n - guide/cli-builder#default-architect-configuration\n - guide/cli-builder#handling-output\n - guide/cli-builder#input-validation\n - guide/cli-builder#progress-and-status-reporting\n - guide/cli-builder#running-the-builder\n - guide/cli-builder#schedule-and-run\n - guide/cli-builder#summary\n - guide/cli-builder#target-configuration\n - guide/cli-builder#target-strings\n - guide/cli-builder#testing-a-builder\n - guide/cli-builder#watch-mode\n - guide/creating-libraries#publishing-your-library\n - guide/glossary#builder\n - guide/glossary#project\n - guide/glossary#schematic\n - guide/glossary#target\n - guide/workspace-config\n - http://json-schema.org\n - https://docs.npmjs.com/files/package.json\n - https://electronjs.org\n - https://github.com/TypeStrong/ts-node\n - https://github.com/angular/angular-cli/blob/ba21c855c0c8b778005df01d4851b5a2176edc6f/packages/angular_devkit/build_angular/src/tslint/index.ts#L107\n - https://github.com/mgechev/cli-builders-demo\n - https://nodejs.org/api/fs.html#fs_fspromises_copyfile_src_dest_mode\n - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n-->"
}