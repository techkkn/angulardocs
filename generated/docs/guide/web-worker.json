{
  "id": "guide/web-worker",
  "title": "Background processing using web workers",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"background-processing-using-web-workers\">Background processing using web workers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/web-worker#background-processing-using-web-workers\"><i class=\"material-icons\">link</i></a></h1>\n<p><a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API\">Web workers</a> lets you run CPU-intensive computations in a background thread, freeing the main thread to update the user interface.\nApplications performing a lot of computations, like generating Computer-Aided Design (CAD) drawings or doing heavy geometric calculations, can use web workers to increase performance.</p>\n<div class=\"alert is-helpful\">\n<p>The Angular CLI does not support running itself in a web worker.</p>\n</div>\n<h2 id=\"adding-a-web-worker\">Adding a web worker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/web-worker#adding-a-web-worker\"><i class=\"material-icons\">link</i></a></h2>\n<p>To add a web worker to an existing project, use the Angular CLI <code>ng generate</code> command.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate web-worker &#x3C;location>\n\n</code-example>\n<p>You can add a web worker anywhere in your application.\nFor example, to add a web worker to the root component, <code>src/app/app.component.ts</code>, run the following command.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate web-worker app\n\n</code-example>\n<p>The command performs the following actions.</p>\n<ol>\n<li>\n<p>Configures your project to use web workers, if it isn't already.</p>\n</li>\n<li>\n<p>Adds the following scaffold code to <code>src/app/app.worker.ts</code> to  receive messages.</p>\n<code-example language=\"typescript\" header=\"src/app/app.worker.ts\">\n\naddEventListener('message', ({ data }) => {\n  const response = `worker response to ${data}`;\n  postMessage(response);\n});\n\n</code-example>\n</li>\n<li>\n<p>Adds the following scaffold code to <code>src/app/app.component.ts</code> to use the worker.</p>\n<code-example language=\"typescript\" header=\"src/app/app.component.ts\">\n\nif (typeof Worker !== 'undefined') {\n  // Create a new\n  const worker = new Worker(new URL('./app.worker', import.meta.url));\n  worker.onmessage = ({ data }) => {\n    console.log(`page got message: ${data}`);\n  };\n  worker.postMessage('hello');\n} else {\n  // Web workers are not supported in this environment.\n  // You should add a fallback so that your program still executes correctly.\n}\n\n</code-example>\n</li>\n</ol>\n<p>After you create this initial scaffold, you must refactor your code to use the web worker by sending messages to and from the worker.</p>\n<div class=\"alert is-important\">\n<p>Some environments or platforms, such as <code>@angular/platform-server</code> used in <a href=\"guide/ssr\">Server-side Rendering</a>, don't support web workers.\nTo ensure that your application works in these environments, you must provide a fallback mechanism to perform the computations that the worker would otherwise perform.</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Mon Feb 28 2022</div>\n</div>\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/developer-guide-overview\n-->\n<!-- links from this doc:\n - guide/ssr\n - guide/web-worker#adding-a-web-worker\n - guide/web-worker#background-processing-using-web-workers\n - https://developer.mozilla.org/docs/Web/API/Web_Workers_API\n-->"
}