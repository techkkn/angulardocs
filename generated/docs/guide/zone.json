{
  "id": "guide/zone",
  "title": "NgZone",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <!-- vale Angular.Google_Headings = NO -->\n<h1 id=\"ngzone\">NgZone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#ngzone\"><i class=\"material-icons\">link</i></a></h1>\n<!-- vale Angular.Google_Headings = YES -->\n<p>A zone is an execution context that persists across async tasks.\nYou can think of it as <a href=\"https://en.wikipedia.org/wiki/Thread-local_storage\">thread-local storage</a> for the JavaScript VM.\nThis guide describes how to use Angular's NgZone to automatically detect changes in the component to update HTML.</p>\n<h2 id=\"fundamentals-of-change-detection\">Fundamentals of change detection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#fundamentals-of-change-detection\"><i class=\"material-icons\">link</i></a></h2>\n<p>To understand the benefits of <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code>, it is important to have a clear grasp of what change detection is and how it works.</p>\n<h3 id=\"displaying-and-updating-data-in-angular\">Displaying and updating data in Angular<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#displaying-and-updating-data-in-angular\"><i class=\"material-icons\">link</i></a></h3>\n<p>In Angular, you can display data by projecting the values of Angular component properties into an HTML template.</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;label>My favorite hero is {{hero.name}}&#x3C;/label>\n\n</code-example>\n<p>You can also bind DOM events to a method of an Angular component.\nIn such methods, you can also update a property of the Angular component, which updates the corresponding data displayed in the template.</p>\n<code-example header=\"src/app/click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-click-me',\n  template: ` &#x3C;button type=\"button\" (click)=\"onClickMe()\">Click me!&#x3C;/button>\n    {{ clickMessage }}`,\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n</code-example>\n<p>In both of the preceding examples, the component's code updates only the property of the component.\nThe HTML is also updated automatically.\nThis guide describes how and when Angular renders the HTML based on the data from the Angular component.</p>\n<h3 id=\"detecting-changes-with-plain-javascript\">Detecting changes with plain JavaScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#detecting-changes-with-plain-javascript\"><i class=\"material-icons\">link</i></a></h3>\n<p>To clarify how changes are detected and values updated, consider the following code written in plain JavaScript.</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\n&#x3C;html>\n  &#x3C;div id=\"dataDiv\">&#x3C;/div>\n  &#x3C;button id=\"btn\">updateData&#x3C;/button>\n  &#x3C;canvas id=\"canvas\">&#x3C;/canvas>\n  &#x3C;script>\n    let value = 'initialValue';\n    // initial rendering\n    detectChange();\n\n    function renderHTML() {\n      document.getElementById('dataDiv').innerText = value;\n    }\n\n    function detectChange() {\n      const currentValue = document.getElementById('dataDiv').innerText;\n      if (currentValue !== value) {\n        renderHTML();\n      }\n    }\n\n    // Example 1: update data inside button click event handler\n    document.getElementById('btn').addEventListener('click', () => {\n      // update value\n      value = 'button update value';\n      // call detectChange manually\n      detectChange();\n    });\n\n    // Example 2: HTTP Request\n    const xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', function() {\n      // get response from server\n      value = this.responseText;\n      // call detectChange manually\n      detectChange();\n    });\n    xhr.open('GET', serverUrl);\n    xhr.send();\n\n    // Example 3: setTimeout\n    setTimeout(() => {\n      // update value inside setTimeout callback\n      value = 'timeout update value';\n      // call detectChange manually\n      detectChange();\n    }, 100);\n\n    // Example 4: Promise.then\n    Promise.resolve('promise resolved a value').then(v => {\n      // update value inside Promise thenCallback\n      value = v;\n      // call detectChange manually\n      detectChange();\n    });\n\n    // Example 5: some other asynchronous APIs\n    document.getElementById('canvas').toBlob(blob => {\n      // update value when blob data is created from the canvas\n      value = `value updated by canvas, size is ${blob.size}`;\n      // call detectChange manually\n      detectChange();\n    });\n  &#x3C;/script>\n&#x3C;/html>\n\n</code-example>\n<p>After you update the data, you need to call <code>detectChange()</code> manually to see whether the data changed.\nIf the data changed, you render the HTML to reflect the updated data.</p>\n<p>In Angular, this step is unnecessary.\nWhenever you update the data, your HTML is updated automatically.</p>\n<h3 id=\"when-apps-update-html\">When apps update HTML<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#when-apps-update-html\"><i class=\"material-icons\">link</i></a></h3>\n<p>To understand how change detection works, first consider when the application needs to update the HTML.\nTypically, updates occur for one of the following reasons:</p>\n<ol>\n<li>\n<p>Component initialization.\nFor example, when bootstrapping an Angular application, Angular loads the bootstrap component and triggers the <a href=\"api/core/ApplicationRef#tick\">ApplicationRef.tick()</a> to call change detection and View Rendering.</p>\n</li>\n<li>\n<p>Event listener.\nThe DOM event listener can update the data in an Angular component and also trigger change detection, as in the following example.</p>\n<code-example header=\"src/app/click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-click-me',\n  template: ` &#x3C;button type=\"button\" (click)=\"onClickMe()\">Click me!&#x3C;/button>\n    {{ clickMessage }}`,\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p>HTTP Data Request.\nYou can also get data from a server through an HTTP request.\nFor example:</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: '&#x3C;div>{{data}}&#x3C;/div>';\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  data = 'initial value';\n  serverUrl = 'SERVER_URL';\n  constructor(private httpClient: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n\n  ngOnInit() {\n    this.httpClient.get(this.serverUrl).subscribe(response => {\n      // user does not need to <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection manually\n      this.data = response.data;\n    });\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p>MacroTasks, such as <code>setTimeout()</code> or <code>setInterval()</code>.\nYou can also update the data in the callback function of a <code>macroTask</code> such as <code>setTimeout()</code>.\nFor example:</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: '&#x3C;div>{{data}}&#x3C;/div>';\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  data = 'initial value';\n\n  ngOnInit() {\n    setTimeout(() => {\n      // user does not need to <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection manually\n      this.data = 'value updated';\n    });\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p>MicroTasks, such as <code>Promise.then()</code>.\nOther asynchronous APIs return a Promise object (such as <code>fetch</code>), so the <code>then()</code> callback function can also update the data.\nFor example:</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: '&#x3C;div>{{data}}&#x3C;/div>';\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  data = 'initial value';\n\n  ngOnInit() {\n    Promise.resolve(1).then(v => {\n      // user does not need to <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection manually\n      this.data = v;\n    });\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p>Other async operations.\nBesides <code>addEventListener()</code>, <code>setTimeout()</code> and <code>Promise.then()</code>, there are other operations that can update the data asynchronously.\nSome examples include <code>WebSocket.onmessage()</code> and <code>Canvas.toBlob()</code>.</p>\n<p>The preceding list contains most common scenarios in which the application might change the data.\nAngular runs change detection whenever it detects that data could have changed.\nThe result of change detection is that the DOM is updated with new data.\nAngular detects the changes in different ways.\nFor component initialization, Angular calls change detection explicitly.\nFor <a href=\"https://developer.mozilla.org/docs/Learn/JavaScript/Asynchronous\">asynchronous operations</a>, Angular uses a zone to detect changes in places where the data could have possibly mutated and it runs change detection automatically.</p>\n</li>\n</ol>\n<h2 id=\"zones-and-execution-contexts\">Zones and execution contexts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#zones-and-execution-contexts\"><i class=\"material-icons\">link</i></a></h2>\n<p>A zone provides an execution context that persists across async tasks.\n<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/this\">Execution Context</a> is an abstract concept that holds information about the environment within the current code being executed.\nConsider the following example:</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nconst callback = function() {\n  console.log('setTimeout callback context is', this);\n}\n\nconst ctx1 = { name: 'ctx1' };\nconst ctx2 = { name: 'ctx2' };\n\nconst func = function() {\n  console.log('caller context is', this);\n  setTimeout(callback);\n}\n\nfunc.apply(ctx1);\nfunc.apply(ctx2);\n\n</code-example>\n<p>The value of <code>this</code> in the callback of <code>setTimeout()</code> might differ depending on when <code>setTimeout()</code> is called.\nThus, you can lose the context in asynchronous operations.</p>\n<p>A zone provides a new zone context other than <code>this</code>, the zone context that persists across asynchronous operations.\nIn the following example, the new zone context is called <code>zoneThis</code>.</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nzone.run(() => {\n  // now you are in a zone\n  expect(zoneThis).toBe(zone);\n  setTimeout(function() {\n    // the zoneThis context will be the same zone\n    // when the setTimeout is scheduled\n    expect(zoneThis).toBe(zone);\n  });\n});\n\n</code-example>\n<p>This new context, <code>zoneThis</code>, can be retrieved from the <code>setTimeout()</code> callback function, and this context is the same when the <code>setTimeout()</code> is scheduled.\nTo get the context, you can call <a href=\"https://github.com/angular/angular/blob/main/packages/zone.js/lib/zone.ts\"><code>Zone.current</code></a>.</p>\n<h2 id=\"zones-and-async-lifecycle-hooks\">Zones and async lifecycle hooks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#zones-and-async-lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h2>\n<p>Zone.js can create contexts that persist across asynchronous operations as well as provide lifecycle hooks for asynchronous operations.</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nconst zone = Zone.current.fork({\n  name: 'zone',\n  onScheduleTask: function(delegate, curr, target, task) {\n    console.log('new task is scheduled:', task.type, task.source);\n    return delegate.scheduleTask(target, task);\n  },\n  onInvokeTask: function(delegate, curr, target, task, applyThis, applyArgs) {\n    console.log('task will be invoked:', task.type, task.source);\n    return delegate.invokeTask(target, task, applyThis, applyArgs);\n  },\n  onHasTask: function(delegate, curr, target, hasTaskState) {\n    console.log('task state changed in the zone:', hasTaskState);\n    return delegate.hasTask(target, hasTaskState);\n  },\n  onInvoke: function(delegate, curr, target, callback, applyThis, applyArgs) {\n    console.log('the callback will be invoked:', callback);\n    return delegate.invoke(target, callback, applyThis, applyArgs);\n  }\n});\nzone.run(() => {\n  setTimeout(() => {\n    console.log('timeout callback is invoked.');\n  });\n});\n\n</code-example>\n<p>The preceding example creates a zone with several hooks.</p>\n<p>The <code>onXXXTask</code> hooks trigger when the status of the task changes.\nThe concept of a <em>Zone Task</em> is comparable to the JavaScript VM Task concept:</p>\n<ul>\n<li><code>macroTask</code>: such as <code>setTimeout()</code></li>\n<li><code>microTask</code>: such as <code>Promise.then()</code></li>\n<li><code>eventTask</code>: such as <code>element.addEventListener()</code></li>\n</ul>\n<p>These hooks trigger under the following circumstances:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Hooks</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>onScheduleTask</code></td>\n<td align=\"left\">Triggers when a new asynchronous task is scheduled, such as when you call <code>setTimeout()</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>onInvokeTask</code></td>\n<td align=\"left\">Triggers when an asynchronous task is about to run, such as when the callback of <code>setTimeout()</code> is about to run.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>onHasTask</code></td>\n<td align=\"left\">Triggers when the status of one kind of task inside a zone changes from stable to unstable or from unstable to stable. A status of \"stable\" means there are no tasks inside the zone, while \"unstable\" means a new task is scheduled in the zone.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>onInvoke</code></td>\n<td align=\"left\">Triggers when a synchronous function is going to run in the zone.</td>\n</tr>\n</tbody>\n</table>\n<p>With these hooks, <code>Zone</code> can observe the status of all synchronous and asynchronous operations inside a zone.</p>\n<p>The preceding example returns the following output:</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nthe callback will be invoked: () => {\n  setTimeout(() => {\n    console.log('timeout callback is invoked.');\n  });\n}\nnew task is scheduled: macroTask setTimeout\ntask state changed in the zone: { microTask: false,\n  macroTask: true,\n  eventTask: false,\n  change: 'macroTask' }\ntask will be invoked macroTask: setTimeout\ntimeout callback is invoked.\ntask state changed in the zone: { microTask: false,\n  macroTask: false,\n  eventTask: false,\n  change: 'macroTask' }\n\n</code-example>\n<p>All of the functions of <code>Zone</code> are provided by a library called <a href=\"https://github.com/angular/angular/tree/main/packages/zone.js/README.md\">Zone.js</a>.\nThis library implements those features by intercepting asynchronous APIs through monkey patching.\nMonkey patching is a technique to add or alter the default behavior of a function at runtime without changing the source code.</p>\n<!-- vale Angular.Google_Headings = NO -->\n<h2 id=\"ngzone-1\">NgZone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#ngzone-1\"><i class=\"material-icons\">link</i></a></h2>\n<!-- vale Angular.Google_Headings = YES -->\n<p>While Zone.js can observe all the states of synchronous and asynchronous operations, Angular additionally provides a service called NgZone.\nThis service creates a zone named <code>angular</code> to automatically trigger change detection when the following conditions are satisfied:</p>\n<ol>\n<li>When a sync or async function is executed</li>\n<li>When there is no <code>microTask</code> scheduled</li>\n</ol>\n<!-- vale Angular.Google_Headings = NO -->\n<h3 id=\"ngzone-run-and-runoutsideofangular\">NgZone <code>run()</code> and <code>runOutsideOfAngular()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#ngzone-run-and-runoutsideofangular\"><i class=\"material-icons\">link</i></a></h3>\n<!-- vale Angular.Google_Headings = YES -->\n<p><code>Zone</code> handles most asynchronous APIs such as <code>setTimeout()</code>, <code>Promise.then()</code>, and <code>addEventListener()</code>.\nFor the full list, see the <a href=\"https://github.com/angular/angular/blob/main/packages/zone.js/MODULE.md\">Zone Module document</a>.\nIn those asynchronous APIs, you don't need to trigger change detection manually.</p>\n<p>Some third party APIs are not handled by Zone.\nIn those cases, the <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> service provides a <a href=\"api/core/NgZone#run\"><code>run()</code></a> method that allows you to run a function inside the Angular zone.\nThis function, and all asynchronous operations in that function, triggers change detection automatically at the correct time.</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>) {}\n  ngOnInit() {\n    // New <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> API is not handled by Zone, so you need to use ngZone.run()\n    // to make the asynchronous operation callback in the Angular zone and\n    // <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection automatically.\n    someNewAsyncAPI(() => {\n      this.ngZone.run(() => {\n        // update the data of the component\n      });\n    });\n  }\n}\n\n</code-example>\n<p>By default, all asynchronous operations are inside the Angular zone, which triggers change detection automatically.\nAnother common case is when you don't want to trigger change detection.\nIn that situation, you can use another <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> method: <a href=\"api/core/NgZone#runoutsideangular\"><code>runOutsideAngular()</code></a>.</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>) {}\n  ngOnInit() {\n    // You know no data will be updated,\n    // so you don't want to <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection in this\n    // specified operation. Instead, call ngZone.runOutsideAngular()\n    this.ngZone.runOutsideAngular(() => {\n      setTimeout(() => {\n        // update component data\n        // but don't <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection.\n      });\n    });\n  }\n}\n\n</code-example>\n<!-- vale Angular.Google_Headings = NO -->\n<h3 id=\"setting-up-zonejs\">Setting up Zone.js<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#setting-up-zonejs\"><i class=\"material-icons\">link</i></a></h3>\n<!-- vale Angular.Google_Headings = YES -->\n<p>To make Zone.js available in Angular, you need to import the <code>zone.js</code> package.\nIf you are using the Angular CLI, this step is done automatically, and you can see the following line in the <code>angular.json</code>:</p>\n<code-example format=\"json\" language=\"json\">\n\n\"polyfills\": [\n  \"zone.js\"\n]\n\n</code-example>\n<p>Several <code>zone.js</code> settings can be changed like:</p>\n<ul>\n<li>\n<p>Disabling some asynchronous API monkey patching for better performance.\nFor example, disabling the <code>requestAnimationFrame()</code> monkey patch, so the callback of <code>requestAnimationFrame()</code> does not trigger change detection.\nThis is useful if, in your application, the callback of the <code>requestAnimationFrame()</code> does not update any data.</p>\n</li>\n<li>\n<p>Specify that certain DOM events do not run inside the Angular zone. For example, to prevent a <code>mousemove</code> or <code>scroll</code> event to trigger change detection</p>\n</li>\n</ul>\n<p>To make these changes, you need to create a <code>zone-flags.ts</code> file, such as the following.</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// disable patching requestAnimationFrame\n(window as any).__Zone_disable_requestAnimationFrame = true;\n\n// disable patching specified eventNames\n(window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove'];\n\n</code-example>\n<p>Next, add <code>zone-flags</code> before <code>zone.js</code> in the <code>angular.json</code> file:</p>\n<code-example format=\"json\" language=\"json\">\n\n\"polyfills\": [\n  \"src/zone-flags.ts\",\n  \"zone.js\"\n]\n\n</code-example>\n<p>Lastly, add <code>zone-flags</code> to the <code>include</code> array in the <code>tsconfig.app.json</code> file:</p>\n<code-example format=\"json\" language=\"json\">\n\n\"include\": [\n  \"src/**/*.d.ts\",\n  \"src/zone-flags.ts\"\n]\n\n</code-example>\n<p>For more information about what you can configure, see the <a href=\"https://github.com/angular/angular/tree/main/packages/zone.js\">Zone.js</a> documentation.</p>\n<!-- vale Angular.Google_Headings = NO -->\n<h3 id=\"noopzone\">NoopZone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#noopzone\"><i class=\"material-icons\">link</i></a></h3>\n<!-- vale Angular.Google_Headings = YES -->\n<p><code>Zone</code> helps Angular know when to trigger change detection and let the developers focus on the application development.\nBy default, <code>Zone</code> is loaded and works without further configuration.\nYou don't necessarily have to use <code>Zone</code> to make Angular work.\nInstead, you can opt to trigger change detection on your own.</p>\n<div class=\"callout is-helpful\">\n<header>Disabling Zone</header>\n<p><strong>Disabling <code>Zone</code> requires you to trigger all change detection at the correct timing yourself, which requires comprehensive knowledge of change detection</strong>.</p>\n</div>\n<p>To remove Zone.js, make the following changes.</p>\n<ol>\n<li>\n<p>Remove the <code>zone.js</code> import from <code>polyfills.ts</code>:</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\n// import 'zone.js';  // Included with Angular CLI.\n\n</code-example>\n</li>\n<li>\n<p>Bootstrap Angular with the <code>noop</code> zone in <code>src/main.ts</code>:</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule, { ngZone: 'noop' })\n.catch(err => console.error(err));\n\n</code-example>\n</li>\n</ol>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Tue Sep 26 2023</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/animations/trigger\n - api/common/http/HttpClient\n - api/core/ApplicationRef#tick\n - api/core/Component\n - api/core/NgZone\n - api/core/NgZone#run\n - api/core/NgZone#runoutsideangular\n - api/core/OnInit\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/animations/async\n - guide/zone#detecting-changes-with-plain-javascript\n - guide/zone#displaying-and-updating-data-in-angular\n - guide/zone#fundamentals-of-change-detection\n - guide/zone#ngzone\n - guide/zone#ngzone-1\n - guide/zone#ngzone-run-and-runoutsideofangular\n - guide/zone#noopzone\n - guide/zone#setting-up-zonejs\n - guide/zone#when-apps-update-html\n - guide/zone#zones-and-async-lifecycle-hooks\n - guide/zone#zones-and-execution-contexts\n - https://developer.mozilla.org/docs/Learn/JavaScript/Asynchronous\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/this\n - https://en.wikipedia.org/wiki/Thread-local_storage\n - https://github.com/angular/angular/blob/main/packages/zone.js/MODULE.md\n - https://github.com/angular/angular/blob/main/packages/zone.js/lib/zone.ts\n - https://github.com/angular/angular/tree/main/packages/zone.js\n - https://github.com/angular/angular/tree/main/packages/zone.js/README.md\n-->"
}