{
  "id": "guide/http-send-data-to-server",
  "title": "HTTP: Send data to a server",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"http-send-data-to-a-server\">HTTP: Send data to a server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#http-send-data-to-a-server\"><i class=\"material-icons\">link</i></a></h1>\n<p>In addition to fetching data from a server, <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> supports other HTTP methods such as PUT, POST, and DELETE, which you can use to modify the remote data.</p>\n<p>The sample app for this guide includes an abridged version of the \"Tour of Heroes\" example that fetches heroes and enables users to add, delete, and update them.\nThe following sections show examples of the data-update methods from the sample's <code>HeroesService</code>.</p>\n<h2 id=\"make-a-post-request\">Make a POST request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-post-request\"><i class=\"material-icons\">link</i></a></h2>\n<p>Apps often send data to a server with a POST request when submitting a form.\nIn the following example, the <code>HeroesService</code> makes an HTTP POST request when adding a hero to the database.</p>\n<code-example header=\"app/heroes/heroes.service.ts (addHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"addHero\">\n/** POST: add a new hero to the database */\naddHero(hero: Hero): Observable&#x3C;Hero> {\n  return this.http.post&#x3C;Hero>(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('addHero', hero))\n    );\n}\n\n</code-example>\n<p>The <code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> method is similar to <code>get()</code> in that it has a type parameter, which you can use to specify that you expect the server to return data of a given type.\nThe method takes a resource URL and two additional parameters:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameter</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">body</td>\n<td align=\"left\">The data to POST in the body of the request.</td>\n</tr>\n<tr>\n<td align=\"left\">options</td>\n<td align=\"left\">An object containing method options which, in this case, specify required headers.</td>\n</tr>\n</tbody>\n</table>\n<p>The example catches errors as <a href=\"guide/http-handle-request-errors#error-details\">described above</a>.</p>\n<p>The <code>HeroesComponent</code> initiates the actual POST operation by subscribing to the <code>Observable</code> returned by this service method.</p>\n<code-example header=\"app/heroes/heroes.component.ts (addHero)\" path=\"http/src/app/heroes/heroes.component.ts\" region=\"add-hero-subscribe\">\nthis.heroesService\n  .addHero(newHero)\n  .subscribe(hero => this.heroes.push(hero));\n\n</code-example>\n<p>When the server responds successfully with the newly added hero, the component adds that hero to the displayed <code>heroes</code> list.</p>\n<h2 id=\"make-a-delete-request\">Make a DELETE request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-delete-request\"><i class=\"material-icons\">link</i></a></h2>\n<p>This application deletes a hero with the <code>HttpClient.delete</code> method by passing the hero's ID in the request URL.</p>\n<code-example header=\"app/heroes/heroes.service.ts (deleteHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"deleteHero\">\n/** DELETE: delete the hero from the server */\ndeleteHero(id: number): Observable&#x3C;unknown> {\n  const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\n  return this.http.delete(url, httpOptions)\n    .pipe(\n      catchError(this.handleError('deleteHero'))\n    );\n}\n\n</code-example>\n<p>The <code>HeroesComponent</code> initiates the actual DELETE operation by subscribing to the <code>Observable</code> returned by this service method.</p>\n<code-example header=\"app/heroes/heroes.component.ts (deleteHero)\" path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-subscribe\">\nthis.heroesService\n  .deleteHero(hero.id)\n  .subscribe();\n\n</code-example>\n<p>The component isn't expecting a result from the delete operation, so it subscribes without a callback.\nEven though you are not using the result, you still have to subscribe.\nCalling the <code>subscribe()</code> method <em>executes</em> the observable, which is what initiates the DELETE request.</p>\n<div class=\"alert is-important\">\n<p>You must call <code>subscribe()</code> or nothing happens.\nJust calling <code>HeroesService.deleteHero()</code> does not initiate the DELETE request.</p>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-no-subscribe\">\n// oops ... subscribe() is missing so nothing happens\nthis.heroesService.deleteHero(hero.id);\n\n</code-example>\n</div>\n<h2 id=\"make-a-put-request\">Make a PUT request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-put-request\"><i class=\"material-icons\">link</i></a></h2>\n<p>An app can send PUT requests using the HTTP client service.\nThe following <code>HeroesService</code> example, like the POST example, replaces a resource with updated data.</p>\n<code-example header=\"app/heroes/heroes.service.ts (updateHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"updateHero\">\n/** PUT: update the hero on the server. Returns the updated hero upon success. */\nupdateHero(hero: Hero): Observable&#x3C;Hero> {\n  return this.http.put&#x3C;Hero>(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('updateHero', hero))\n    );\n}\n\n</code-example>\n<p>As for any of the HTTP methods that return an observable, the caller, <code>HeroesComponent.update()</code> <a href=\"guide/http-request-data-from-server#always-subscribe\" title=\"Why you must always subscribe.\">must <code>subscribe()</code></a> to the observable returned from the <code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> in order to initiate the request.</p>\n<h2 id=\"add-and-updating-headers\">Add and updating headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#add-and-updating-headers\"><i class=\"material-icons\">link</i></a></h2>\n<p>Many servers require extra headers for save operations.\nFor example, a server might require an authorization token, or \"Content-Type\" header to explicitly declare the MIME type of the request body.</p>\n<h3 id=\"add-headers\">Add headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#add-headers\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>HeroesService</code> defines such headers in an <code>httpOptions</code> object that are passed to every <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> save method.</p>\n<code-example header=\"app/heroes/heroes.service.ts (httpOptions)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"http-options\">\nimport { <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({\n    'Content-Type':  'application/json',\n    Authorization: 'my-auth-token'\n  })\n};\n\n</code-example>\n<h3 id=\"update-headers\">Update headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#update-headers\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can't directly modify the existing headers within the previous options\nobject because instances of the <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> class are immutable.\nUse the <code>set()</code> method instead, to return a clone of the current instance with the new changes applied.</p>\n<p>The following example shows how, when an old token expires, you can update the authorization header before making the next request.</p>\n<code-example linenums=\"false\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"update-headers\">\nhttpOptions.headers =\n  httpOptions.headers.set('Authorization', 'my-new-auth-token');\n\n</code-example>\n<p><a id=\"url-params\"></a></p>\n\n  <div class=\"reviewed\">Last reviewed on Thu Mar 16 2023</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClient#post\n - api/common/http/HttpClient#put\n - api/common/http/HttpHeaders\n - guide/http-handle-request-errors#error-details\n - guide/http-request-data-from-server#always-subscribe\n - guide/http-send-data-to-server#add-and-updating-headers\n - guide/http-send-data-to-server#add-headers\n - guide/http-send-data-to-server#http-send-data-to-a-server\n - guide/http-send-data-to-server#make-a-delete-request\n - guide/http-send-data-to-server#make-a-post-request\n - guide/http-send-data-to-server#make-a-put-request\n - guide/http-send-data-to-server#update-headers\n-->"
}