{
  "id": "guide/template-reference-variables",
  "title": "Understanding template variables",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"understanding-template-variables\">Understanding template variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#understanding-template-variables\"><i class=\"material-icons\">link</i></a></h1>\n<p>Template variables help you use data from one part of a template in another part of the template.\nUse template variables to perform tasks such as respond to user input or finely tune your application's forms.</p>\n<p>A template variable can refer to the following:</p>\n<ul>\n<li>a DOM element within a template</li>\n<li>a directive or component</li>\n<li>a <a href=\"api/core/TemplateRef\">TemplateRef</a> from an <a href=\"api/core/ng-template\">ng-template</a></li>\n<li>a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN: Web Components\">web component</a></li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n</div>\n<h2 id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li><a href=\"guide/template-overview\">Understanding templates</a></li>\n</ul>\n<h2 id=\"syntax\">Syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#syntax\"><i class=\"material-icons\">link</i></a></h2>\n<p>In the template, you use the hash symbol, <code>#</code>, to declare a template variable.\nThe following template variable, <code>#phone</code>, declares a <code>phone</code> variable with the <code>&#x3C;input></code> element as its value.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n</code-example>\n<p>Refer to a template variable anywhere in the component's template.\nHere, a <code>&#x3C;button></code> further down the template refers to the <code>phone</code> variable.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-phone\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n&#x3C;!-- lots of other elements -->\n\n&#x3C;!-- phone refers to the input element; pass its `value` to an event handler -->\n&#x3C;button type=\"button\" (click)=\"callPhone(phone.value)\">Call&#x3C;/button>\n\n</code-example>\n<h2 id=\"how-angular-assigns-values-to-template-variables\">How Angular assigns values to template variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#how-angular-assigns-values-to-template-variables\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular assigns a template variable a value based on where you declare the variable:</p>\n<ul>\n<li>If you declare the variable on a component, the variable refers to the component instance.</li>\n<li>If you declare the variable on a standard HTML tag, the variable refers to the element.</li>\n<li>If you declare the variable on an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> element, the variable refers to a <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> instance which represents the template.\nFor more information on <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code>, see <a href=\"guide/structural-directives#asterisk\">How Angular uses the asterisk, <code>*</code>, syntax</a> in <a href=\"guide/structural-directives\">Structural directives</a>.</li>\n</ul>\n<h2 id=\"variable-specifying-a-name\">Variable specifying a name<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#variable-specifying-a-name\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>If the variable specifies a name on the right-hand side, such as <code>#var=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>, the variable refers to the directive or component on the element with a matching <code>exportAs</code> name.\n<!-- What does the second half of this mean?^^ Can we explain this more fully? Could I see a working example? -kw -->\n</li>\n</ul>\n<h3 id=\"using-ngform-with-template-variables\">Using <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> with template variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#using-ngform-with-template-variables\"><i class=\"material-icons\">link</i></a></h3>\n<p>In most cases, Angular sets the template variable's value to the element on which it occurs.\nIn the previous example, <code>phone</code> refers to the phone number <code>&#x3C;input></code>.\nThe button's click handler passes the <code>&#x3C;input></code> value to the component's <code>callPhone()</code> method.</p>\n<p>The <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive demonstrates getting a reference to a different value by referencing a directive's <code>exportAs</code> name.\nIn the following example, the template variable, <code>itemForm</code>, appears three times separated by HTML.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ngForm\" header=\"src/app/hero-form.component.html\">\n&#x3C;form #itemForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\" (ngSubmit)=\"onSubmit(itemForm)\">\n  &#x3C;label for=\"name\">Name&#x3C;/label>\n  &#x3C;input type=\"text\" id=\"name\" class=\"form-control\" name=\"name\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> required />\n  &#x3C;button type=\"submit\">Submit&#x3C;/button>\n&#x3C;/form>\n\n&#x3C;div [hidden]=\"!itemForm.form.valid\">\n  &#x3C;p>{{ submitMessage }}&#x3C;/p>\n&#x3C;/div>\n\n\n</code-example>\n<p>Without the <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code> attribute value, the reference value of <code>itemForm</code> would be\nthe <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a>, <code>&#x3C;form></code>.\nIf an element is an Angular Component, a reference with no attribute value will automatically reference the component instance. Otherwise, a reference with no value will reference the DOM element, even if the element has one or more directives applied to it.</p>\n<!-- What is the train of thought from talking about a form element to the difference between a component and a directive? Why is the component directive conversation relevant here?  -kw I agree -alex -->\n<h2 id=\"template-variable-scope\">Template variable scope<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-variable-scope\"><i class=\"material-icons\">link</i></a></h2>\n<p>Just like variables in JavaScript or TypeScript code, template variables are scoped to the template that declares them.</p>\n<p>Similarly, <a href=\"guide/built-in-directives\">Structural directives</a> such as <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>, or <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> declarations create a new nested template scope, much like JavaScript's control flow statements like <code>if</code> and <code>for</code> create new lexical scopes. You cannot access template variables within one of these structural directives from outside of its boundaries.</p>\n<div class=\"alert is-helpful\">\n<p>Define a variable only once in the template so the runtime value remains predictable.</p>\n</div>\n<h3 id=\"accessing-in-a-nested-template\">Accessing in a nested template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#accessing-in-a-nested-template\"><i class=\"material-icons\">link</i></a></h3>\n<p>An inner template can access template variables that the outer template defines.</p>\n<p>In the following example, changing the text in the <code>&#x3C;input></code> changes the value in the <code>&#x3C;span></code> because Angular immediately updates changes through the template variable, <code>ref1</code>.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"template-ref-vars-scope1\" header=\"src/app/app.component.html\">\n&#x3C;input #ref1 type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"firstExample\" />\n&#x3C;span *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"true\">Value: {{ ref1.value }}&#x3C;/span>\n\n</code-example>\n<p>In this case, the <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> on <code>&#x3C;span></code> creates a new template scope, which includes the <code>ref1</code> variable from its parent scope.</p>\n<p>However, accessing a template variable from a child scope in the parent template doesn't work:</p>\n<code-example language=\"html\">\n  &#x3C;input *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"true\" #ref2 type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"secondExample\" />\n  &#x3C;span>Value: {{ ref2?.value }}&#x3C;/span> &#x3C;!-- doesn't work -->\n</code-example>\n<p>Here, <code>ref2</code> is declared in the child scope created by <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>, and is not accessible from the parent template.</p>\n<a id=\"template-input-variable\"></a>\n<a id=\"template-input-variables\"></a>\n<h2 id=\"template-input-variable\">Template input variable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-input-variable\"><i class=\"material-icons\">link</i></a></h2>\n<p>A <em>template input variable</em> is a variable with a value that is set when an instance of that template is created. See: <a href=\"/guide/structural-directives\">Writing structural directives</a></p>\n<p>Template input variables can be seen in action in the long-form usage of <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code>:</p>\n<code-example language=\"html\">\n&#x3C;ul>\n  &#x3C;ng-template <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a> let-hero [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\">\n    &#x3C;li>{{hero.name}}&#x3C;/li>\n  &#x3C;/ng-template>\n&#x3C;/ul>\n</code-example>\n<p>The <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> directive will instantiate this <ng-template> once for each hero in the <code>heroes</code> array, and will set the <code>hero</code> variable for each instance accordingly.</ng-template></p>\n<p>When an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&#x3C;ng-template></a></code> is instantiated, multiple named values can be passed which can be bound to different template input variables. The right-hand side of the <code>let-</code> declaration of an input variable can specify which value should be used for that variable.</p>\n<p><code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> for example also provides access to the <code>index</code> of each hero in the array:</p>\n<code-example language=\"html\">\n&#x3C;ul>\n  &#x3C;ng-template <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a> let-hero let-i=\"index\" [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\">\n    &#x3C;li>Hero number {{i}}: {{hero.name}}&#x3C;/li>\n  &#x3C;/ng-template>\n&#x3C;/ul>\n</code-example>\n<h2 id=\"whats-next\">What’s next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<p><a href=\"/guide/structural-directives\">Writing structural directives</a></p>\n\n  <div class=\"reviewed\">Last reviewed on Thu May 12 2022</div>\n</div>\n\n<!-- links to this doc:\n - api/common/NgFor\n - api/common/NgForOf\n - api/core/ng-template\n - guide/binding-overview\n - guide/example-apps-list\n - guide/forms\n - guide/glossary\n - guide/inputs-outputs\n - guide/template-overview\n - guide/template-statements\n - guide/template-syntax\n - guide/understanding-template-expr-overview\n - guide/user-input\n-->\n<!-- links from this doc:\n - /guide/structural-directives\n - api/common/NgFor\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/TemplateRef\n - api/core/ng-template\n - api/forms/NgForm\n - api/forms/NgModel\n - guide/built-in-directives\n - guide/structural-directives\n - guide/structural-directives#asterisk\n - guide/template-overview\n - guide/template-reference-variables#accessing-in-a-nested-template\n - guide/template-reference-variables#how-angular-assigns-values-to-template-variables\n - guide/template-reference-variables#prerequisites\n - guide/template-reference-variables#syntax\n - guide/template-reference-variables#template-input-variable\n - guide/template-reference-variables#template-variable-scope\n - guide/template-reference-variables#understanding-template-variables\n - guide/template-reference-variables#using-ngform-with-template-variables\n - guide/template-reference-variables#variable-specifying-a-name\n - guide/template-reference-variables#whats-next\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\n - https://developer.mozilla.org/en-US/docs/Web/Web_Components\n-->"
}