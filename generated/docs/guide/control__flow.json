{
  "id": "guide/control_flow",
  "title": "Built-in control flow",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"built-in-control-flow\">Built-in control flow<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/control_flow#built-in-control-flow\"><i class=\"material-icons\">link</i></a></h1>\n<p>Angular templates support <em>control flow blocks</em> that let you conditionally show, hide, and repeat\nelements.</p>\n<div class=\"alert is-important\">\n<p>Angular built-in control flow is in <a href=\"/guide/releases#developer-preview\">developer preview</a>. It is\nready to try, but may change before becoming stable.</p>\n</div>\n<h2 id=\"if-block-conditionals\"><code><a href=\"api/core/if\" class=\"code-anchor\">@if</a></code> block conditionals<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/control_flow#if-block-conditionals\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/core/if\" class=\"code-anchor\">@if</a></code> block conditionally displays its content when its condition expression is truthy:</p>\n<code-example language=\"html\">\n@if (a > b) {\n  {{a}} is greater than {{b}}\n}\n</code-example>\n<p>The <code><a href=\"api/core/if\" class=\"code-anchor\">@if</a></code> block might have one or more associated branches. Immediately after an <code><a href=\"api/core/if\" class=\"code-anchor\">@if</a></code> block,\nyou can optionally specify any number of <code>@else if</code> blocks and one <code>@else</code> block:</p>\n<code-example language=\"html\">\n@if (a > b) {\n  {{a}} is greater than {{b}}\n} @else if (b > a) {\n  {{a}} is less than {{b}}\n} @else {\n  {{a}} is equal to {{b}}\n}\n</code-example>\n<h3 id=\"referencing-the-conditional-expressions-result\">Referencing the conditional expression's result<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/control_flow#referencing-the-conditional-expressions-result\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can create a reference to the result of an <code><a href=\"api/core/if\" class=\"code-anchor\">@if</a></code> block's conditional expression and use that\nreference inside the block's content.</p>\n<code-example language=\"html\">\n@if (users$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a>; as users) {\n  {{ users.length }}\n}\n</code-example>\n<h2 id=\"for-block---repeaters\"><code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> block - repeaters<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/control_flow#for-block---repeaters\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> block renders its content for each item in a collection.</p>\n<code-example language=\"html\">\n@for (item of items; track item.id) {\n  {{ item.name }}\n}\n</code-example>\n<p>The collection can be any\nJavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterable</a>,\nbut standard JavaScript <code>Array</code> values offer performance advantages.</p>\n<h3 id=\"track-for-calculating-difference-of-two-collections\"><code>track</code> for calculating difference of two collections<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/control_flow#track-for-calculating-difference-of-two-collections\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> block requires a <code>track</code> expression. Angular uses the value of this expression\nas a unique identity for each item. This identity allows the framework to perform the minimal\nset of DOM operations necessary after items are added, removed, or reordered.</p>\n<p>For simple cases, you can use <code>track $index</code> as a reasonable default.</p>\n<h3 id=\"index-and-other-contextual-variables\"><code>$index</code> and other contextual variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/control_flow#index-and-other-contextual-variables\"><i class=\"material-icons\">link</i></a></h3>\n<p>Inside <code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> contents, several implicit variables are always available:</p>\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$count</code></td>\n<td>Number of items in a collection iterated over</td>\n</tr>\n<tr>\n<td><code>$index</code></td>\n<td>Index of the current row</td>\n</tr>\n<tr>\n<td><code>$first</code></td>\n<td>Whether the current row is the first row</td>\n</tr>\n<tr>\n<td><code>$last</code></td>\n<td>Whether the current row is the last row</td>\n</tr>\n<tr>\n<td><code>$even</code></td>\n<td>Whether the current row index is even</td>\n</tr>\n<tr>\n<td><code>$odd</code></td>\n<td>Whether the current row index is odd</td>\n</tr>\n</tbody>\n</table>\n<p>These variables are always available with these names, but can be aliased via a <code>let</code> segment:</p>\n<code-example language=\"html\">\n@for (item of items; track item.id; let idx = $index, e = $even) {\n  Item #{{ idx }}: {{ item.name }}\n}\n</code-example>\n<p>Aliasing is useful when nesting <code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> blocks so that you can reference these variable values in\ndeeper blocks.</p>\n<h3 id=\"empty-block\"><code>empty</code> block<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/control_flow#empty-block\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can optionally include an <code>@empty</code> section immediately after the <code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> block content. The\ncontent of the <code>@empty</code> block displays when there are no items:</p>\n<code-example language=\"html\">\n@for (item of items; track item.name) {\n  &#x3C;li> {{ item.name }}&#x3C;/li>\n} @empty {\n  &#x3C;li> There are no items.&#x3C;/li>\n}\n</code-example>\n<h2 id=\"switch-block---selection\"><code><a href=\"api/core/switch\" class=\"code-anchor\">@switch</a></code> block - selection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/control_flow#switch-block---selection\"><i class=\"material-icons\">link</i></a></h2>\n<p>The syntax for <code>switch</code> is similar to <code>if</code>, inspired by the JavaScript <code>switch</code> statement:</p>\n<code-example language=\"html\">\n@switch (condition) {\n  @case (caseA) {\n    Case A.\n  }\n  @case (caseB) {\n    Case B.\n  }\n  @default {\n    Default case.\n  }\n}\n</code-example>\n<p>The value of the conditional expression is compared to the case expression using the <code>===</code> operator.</p>\n<p><strong><code><a href=\"api/core/switch\" class=\"code-anchor\">@switch</a></code> does not have fallthrough</strong>, so you do not need an equivalent to a <code>break</code> or <code>return</code>\nstatement.</p>\n<p>The <code>@default</code> block is optional and can be omitted. If no <code>@case</code> matches the expression and there\nis no <code>@default</code> block, nothing is shown.</p>\n<h2 id=\"comparing-built-in-control-flow-to-ngif-ngswitch-and-ngfor\">Comparing built-in control flow to <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>, <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> and <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/control_flow#comparing-built-in-control-flow-to-ngif-ngswitch-and-ngfor\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/core/if\" class=\"code-anchor\">@if</a></code> block replaces <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> for expressing conditional parts of the UI.</p>\n<p>The <code><a href=\"api/core/switch\" class=\"code-anchor\">@switch</a></code> block replaces <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> with major benefits:</p>\n<ul>\n<li>The <code><a href=\"api/core/switch\" class=\"code-anchor\">@switch</a></code> block does not require a container element for the condition expression or each\nconditional template.</li>\n<li>The <code><a href=\"api/core/switch\" class=\"code-anchor\">@switch</a></code> block supports template type-checking, including type narrowing within each branch.</li>\n</ul>\n<p>The <code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> block replaces <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> for iteration, and has several differences compared to its\nstructural directive <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> predecessor:</p>\n<ul>\n<li>The <code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> block requires a tracking expression to uniquely identify items in the collection.\nWhile <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> requires a <code>trackBy</code> <em>method</em>, however, the <code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> block simplifies tracking by\naccepting a <code>track</code> <em>expression</em>.</li>\n<li>You can specify content to show when the collection is empty with the <code>@empty</code> block.</li>\n<li>The <code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> block uses an optimized algorithm for determining a minimal number of DOM operations\nnecessary after a collection is modified. While <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> allowed developers to provide a custom\n<code><a href=\"api/core/IterableDiffer\" class=\"code-anchor\">IterableDiffer</a></code> implementation, the <code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> block does not support custom differs.</li>\n</ul>\n<p>The <code>track</code> setting replaces <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code>'s concept of a <code>trackBy</code> function. Because <code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> is built-in,\nwe can provide a better experience than passing a <code>trackBy</code> function, and directly use an expression\nrepresenting the key instead. Migrating from <code>trackBy</code> to <code>track</code> is possible by invoking\nthe <code>trackBy</code> function:</p>\n<code-example language=\"html\">\n@for (item of items; track itemId($index, item)) {\n  {{ item.name }}\n}\n</code-example>\n<p>With <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code>, loops over immutable data without <code>trackBy</code> are the most common cause of performance\nbugs across Angular applications.</p>\n\n  \n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /guide/releases#developer-preview\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgSwitch\n - api/core/IterableDiffer\n - api/core/for\n - api/core/if\n - api/core/switch\n - api/platform-browser/animations/async\n - guide/control_flow#built-in-control-flow\n - guide/control_flow#comparing-built-in-control-flow-to-ngif-ngswitch-and-ngfor\n - guide/control_flow#empty-block\n - guide/control_flow#for-block---repeaters\n - guide/control_flow#if-block-conditionals\n - guide/control_flow#index-and-other-contextual-variables\n - guide/control_flow#referencing-the-conditional-expressions-result\n - guide/control_flow#switch-block---selection\n - guide/control_flow#track-for-calculating-difference-of-two-collections\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n-->"
}