{
  "id": "guide/pipe-precedence",
  "title": "Pipe precedence in template expressions",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"pipe-precedence-in-template-expressions\">Pipe precedence in template expressions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipe-precedence#pipe-precedence-in-template-expressions\"><i class=\"material-icons\">link</i></a></h1>\n<p>Sometimes you want to choose between two values, based on some condition, before passing the choice to the pipe. You could use the JavaScript ternary operator (<code>?:</code>) in the template to make that choice.</p>\n<p>Beware! The pipe operator has a higher precedence than the JavaScript ternary operator (<code>?:</code>).</p>\n<p>If you simply write the expression as if it were evaluated left-to-right, you might be surprised by the result. For example, </p>\n<code-example>\ncondition ? a : b | pipe \n</code-example>\n<p>is parsed as </p>\n<code-example>\ncondition ? a : (b | pipe)\n</code-example>\n<p>The value of <code>b</code> passes through <code>pipe</code>; the value of <code>a</code> <em>will not</em>.</p>\n<p>If you want the pipe to apply to the result of the ternary expression, wrap the entire expression in parentheses. For example, </p>\n<code-example>\n(condition ? a : b) | pipe\n</code-example>\n<p>In general, you should always use parentheses to be sure Angular evaluates the expression as you intend.</p>\n<p>The \"Pipes and Precedence\" section of the <live-example nodownload=\"\">pipes example</live-example> explores this issue in more detail.</p>\n\n  <div class=\"reviewed\">Last reviewed on Mon Aug 14 2023</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - guide/pipe-precedence#pipe-precedence-in-template-expressions\n-->"
}