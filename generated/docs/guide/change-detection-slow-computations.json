{
  "id": "guide/change-detection-slow-computations",
  "title": "Slow computations",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"slow-computations\">Slow computations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-slow-computations#slow-computations\"><i class=\"material-icons\">link</i></a></h1>\n<p>On every change detection cycle, Angular synchronously:</p>\n<ul>\n<li>Evaluates all template expressions in all components, unless specified otherwise, based on that each component's detection strategy</li>\n<li>Executes the <code>ngDoCheck</code>, <code>ngAfterContentChecked</code>, <code>ngAfterViewChecked</code>, and <code>ngOnChanges</code> lifecycle hooks.\nA single slow computation within a template or a lifecycle hook can slow down the entire change detection process because Angular runs the computations sequentially.</li>\n</ul>\n<h2 id=\"identifying-slow-computations\">Identifying slow computations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-slow-computations#identifying-slow-computations\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can identify heavy computations with Angular DevToolsâ€™ profiler. In the performance timeline, click a bar to preview a particular change detection cycle. This displays a bar chart, which shows how long the framework spent in change detection for each component. When you click a component, you can preview how long Angular spent  evaluating its template and lifecycle hooks.</p>\n<div class=\"lightbox\">\n  <img alt=\"Angular DevTools profiler preview showing slow computation\" src=\"generated/images/guide/change-detection/slow-computations.png\" width=\"1600\" height=\"887\">\n</div>\n<p>For example, in the preceding screenshot, the second recorded change detection cycle is selected. Angular spent over 573 ms on this cycle, with the most time spent in the <code>EmployeeListComponent</code>. In the details panel, you can see that Angular spent over 297 ms evaluating the template of the <code>EmployeeListComponent</code>.</p>\n<h2 id=\"optimizing-slow-computations\">Optimizing slow computations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-slow-computations#optimizing-slow-computations\"><i class=\"material-icons\">link</i></a></h2>\n<p>Here are several techniques to remove slow computations:</p>\n<ul>\n<li><strong>Optimizing the underlying algorithm</strong>. This is the recommended approach. If you can speed up the algorithm that is causing the problem, you can speed up the entire change detection mechanism.</li>\n<li><strong>Caching using pure pipes</strong>. You can move the heavy computation to a <a href=\"api/core/Pipe#pure\">pure pipe</a>. Angular reevaluates a pure pipe only if it detects that its inputs have changed, compared to the previous time Angular called it.</li>\n<li><strong>Using memoization</strong>. <a href=\"https://en.wikipedia.org/wiki/Memoization\">Memoization</a> is a similar technique to pure pipes, with the difference that pure pipes preserve only the last result from the computation where memoization could store multiple results.</li>\n<li><strong>Avoid repaints/reflows in lifecycle hooks</strong>. Certain <a href=\"https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/\">operations</a> cause the browser to either synchronously recalculate the layout of the page or re-render it. Since reflows and repaints are generally slow, you want to avoid performing them in every change detection cycle.</li>\n</ul>\n<p>Pure pipes and memoization have different trade-offs. Pure pipes are an Angular built-in concept compared to memoization, which is a general software engineering practice for caching function results. The memory overhead of memoization could be significant if you invoke the heavy computation frequently with different arguments.</p>\n\n  <div class=\"reviewed\">Last reviewed on Mon Aug 14 2023</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/core/Pipe#pure\n - guide/change-detection-slow-computations#identifying-slow-computations\n - guide/change-detection-slow-computations#optimizing-slow-computations\n - guide/change-detection-slow-computations#slow-computations\n - https://en.wikipedia.org/wiki/Memoization\n - https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/\n-->"
}