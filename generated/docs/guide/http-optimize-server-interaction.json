{
  "id": "guide/http-optimize-server-interaction",
  "title": "HTTP - Optimize server interaction with debouncing",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"http---optimize-server-interaction-with-debouncing\">HTTP - Optimize server interaction with debouncing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-optimize-server-interaction#http---optimize-server-interaction-with-debouncing\"><i class=\"material-icons\">link</i></a></h1>\n<p>If you need to make an HTTP request in response to user input, it's not efficient to send a request for every keystroke. It's better to wait until the user stops typing and then send a request. This technique is known as debouncing.</p>\n<h2 id=\"implement-debouncing\">Implement debouncing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-optimize-server-interaction#implement-debouncing\"><i class=\"material-icons\">link</i></a></h2>\n<p>Consider the following template, which lets a user enter a search term to find a package by name. When the user enters a name in a search-box, the <code>PackageSearchComponent</code> sends a search request for a package with that name to the package search API.</p>\n<code-example header=\"app/package-search/package-search.component.html (search)\" path=\"http/src/app/package-search/package-search.component.html\" region=\"search\">\n&#x3C;input type=\"text\" (keyup)=\"search(getValue($event))\" id=\"name\" placeholder=\"Search\"/>\n\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let package of packages$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a>\">\n    &#x3C;strong>{{package.name}} v.{{package.version}}&#x3C;/strong> -\n    &#x3C;em>{{package.description}}&#x3C;/em>\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p>Here, the <code>keyup</code> event binding sends every keystroke to the component's <code>search()</code> method.</p>\n<div class=\"alert is-helpful\">\n<p>The type of <code>$event.target</code> is only <code>EventTarget</code> in the template.\nIn the <code>getValue()</code> method, the target is cast to an <code>HTMLInputElement</code> to let type-safe have access to its <code>value</code> property.</p>\n<code-example path=\"http/src/app/package-search/package-search.component.ts\" region=\"getValue\">\ngetValue(event: <a href=\"api/router/Event\" class=\"code-anchor\">Event</a>): string {\n  return (event.target as HTMLInputElement).value;\n}\n\n</code-example>\n</div>\n<p>The following snippet implements debouncing for this input using RxJS operators.</p>\n<code-example header=\"app/package-search/package-search.component.ts (excerpt)\" path=\"http/src/app/package-search/package-search.component.ts\" region=\"debounce\">\nwithRefresh = false;\npackages$!: Observable&#x3C;NpmPackageInfo[]>;\nprivate searchText$ = new Subject&#x3C;string>();\n\nsearch(packageName: string) {\n  this.searchText$.next(packageName);\n}\n\nngOnInit() {\n  this.packages$ = this.searchText$.pipe(\n    debounceTime(500),\n    distinctUntilChanged(),\n    switchMap(packageName =>\n      this.searchService.search(packageName, this.withRefresh))\n  );\n}\n\nconstructor(private searchService: PackageSearchService) { }\n\n\n</code-example>\n<p>The <code>searchText$</code> is the sequence of search-box values coming from the user.\nIt's defined as an RxJS <code>Subject</code>, which means it is a multicasting <code>Observable</code> that can also emit values for itself by calling <code>next(value)</code>, as happens in the <code>search()</code> method.</p>\n<p>Rather than forward every <code>searchText</code> value directly to the injected <code>PackageSearchService</code>, the code in <code>ngOnInit()</code> pipes search values through three operators, so that a search value reaches the service only if it's a new value and the user stopped typing.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">RxJS operators</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>debounceTime(500)</code>⁠</td>\n<td align=\"left\">Wait for the user to stop typing, which is 1/2 second in this case.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>distinctUntilChanged()</code></td>\n<td align=\"left\">Wait until the search text changes.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>switchMap()</code>⁠</td>\n<td align=\"left\">Send the search request to the service.</td>\n</tr>\n</tbody>\n</table>\n<p>The code sets <code>packages$</code> to this re-composed <code>Observable</code> of search results.\nThe template subscribes to <code>packages$</code> with the <a href=\"api/common/AsyncPipe\">AsyncPipe</a> and displays search results as they arrive.</p>\n<div class=\"alert is-helpful\">\n<p>See <a href=\"guide/http-interceptor-use-cases#cache-refresh\">Using interceptors to request multiple values</a> for more about the <code>withRefresh</code> option.</p>\n</div>\n<h2 id=\"using-the-switchmap-operator\">Using the <code>switchMap()</code> operator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-optimize-server-interaction#using-the-switchmap-operator\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>switchMap()</code> operator takes a function argument that returns an <code>Observable</code>.\nIn the example, <code>PackageSearchService.search</code> returns an <code>Observable</code>, as other data service methods do.\nIf a previous search request is still in-flight, such as when the network connection is poor, the operator cancels that request and sends a new one.</p>\n<div class=\"alert is-helpful\">\n<p><strong>NOTE</strong>: <br>\n<code>switchMap()</code> returns service responses in their original request order, even if the server returns them out of order.</p>\n</div>\n<div class=\"alert is-helpful\">\n<p>If you think you'll reuse this debouncing logic, consider moving it to a utility function or into the <code>PackageSearchService</code> itself.</p>\n</div>\n\n  <div class=\"reviewed\">Last reviewed on Mon Feb 27 2023</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/NgFor\n - api/platform-browser/animations/async\n - api/router/Event\n - guide/http-interceptor-use-cases#cache-refresh\n - guide/http-optimize-server-interaction#http---optimize-server-interaction-with-debouncing\n - guide/http-optimize-server-interaction#implement-debouncing\n - guide/http-optimize-server-interaction#using-the-switchmap-operator\n-->"
}