{
  "id": "guide/http-pass-metadata-to-interceptors",
  "title": "HTTP - Pass metadata to interceptors",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"http---pass-metadata-to-interceptors\">HTTP - Pass metadata to interceptors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-pass-metadata-to-interceptors#http---pass-metadata-to-interceptors\"><i class=\"material-icons\">link</i></a></h1>\n<p>Many interceptors require or benefit from configuration.\nConsider an interceptor that retries failed requests.\nBy default, the interceptor might retry a request three times, but you might want to override this retry count for particularly error-prone or sensitive requests.</p>\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> requests contain a <em>context</em> that can carry metadata about the request.\nThis context is available for interceptors to read or modify, though it is not transmitted to the backend server when the request is sent.\nThis lets applications or other interceptors tag requests with configuration parameters, such as how many times to retry a request.</p>\n<h2 id=\"create-a-context-token\">Create a context token<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-pass-metadata-to-interceptors#create-a-context-token\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular stores and retrieves a value in the context using an <code><a href=\"api/common/http/HttpContextToken\" class=\"code-anchor\">HttpContextToken</a></code>.\nYou can create a context token using the <code>new</code> operator, as in the following example:</p>\n<code-example header=\"creating a context token\" path=\"http/src/app/http-interceptors/retry-interceptor.ts\" region=\"context-token\">\nexport const RETRY_COUNT = new <a href=\"api/common/http/HttpContextToken\" class=\"code-anchor\">HttpContextToken</a>(() => 3);\n\n</code-example>\n<p>The lambda function <code>() => 3</code> passed during the creation of the <code><a href=\"api/common/http/HttpContextToken\" class=\"code-anchor\">HttpContextToken</a></code> serves two purposes:</p>\n<ol>\n<li>\n<p>It lets TypeScript infer the type of this token:\n<code><a href=\"api/common/http/HttpContextToken\" class=\"code-anchor\">HttpContextToken</a>&#x3C;number></code>\nThe request context is type-safe â€”reading a token from a request's context returns a value of the appropriate type.</p>\n</li>\n<li>\n<p>It sets the default value for the token.\nThis is the value that the request context returns if no other value was set for this token.\nUsing a default value avoids the need to check if a particular value is set.</p>\n</li>\n</ol>\n<h2 id=\"set-context-values-when-making-a-request\">Set context values when making a request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-pass-metadata-to-interceptors#set-context-values-when-making-a-request\"><i class=\"material-icons\">link</i></a></h2>\n<p>When making a request, you can provide an <code><a href=\"api/common/http/HttpContext\" class=\"code-anchor\">HttpContext</a></code> instance, in which you have already set the context values.</p>\n<code-example header=\"setting context values\" path=\"http/src/app/http-interceptors/retry-interceptor.ts\" region=\"set-context\">\nthis.httpClient\n    .get('/data/feed', {\n      context: new <a href=\"api/common/http/HttpContext\" class=\"code-anchor\">HttpContext</a>().set(RETRY_COUNT, 5),\n    })\n    .subscribe(results => {/* ... */});\n\n</code-example>\n<h2 id=\"read-context-values-in-an-interceptor\">Read context values in an interceptor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-pass-metadata-to-interceptors#read-context-values-in-an-interceptor\"><i class=\"material-icons\">link</i></a></h2>\n<p>Within an interceptor, you can read the value of a token in a given request's context with <code><a href=\"api/common/http/HttpContext#get\" class=\"code-anchor\">HttpContext.get()</a></code>.\nIf you have not explicitly set a value for the token, Angular returns the default value specified in the token.</p>\n<code-example header=\"reading context values in an interceptor\" path=\"http/src/app/http-interceptors/retry-interceptor.ts\" region=\"reading-context\">\nimport {retry} from 'rxjs';\n\nexport class RetryInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>): Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>> {\n    const retryCount = req.context.get(RETRY_COUNT);\n\n    return next.handle(req).pipe(\n        // Retry the request a configurable number of times.\n        retry(retryCount),\n    );\n  }\n}\n\n</code-example>\n<h2 id=\"contexts-are-mutable\">Contexts are mutable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-pass-metadata-to-interceptors#contexts-are-mutable\"><i class=\"material-icons\">link</i></a></h2>\n<p>Unlike most other aspects of <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> instances, the request context is mutable and persists across other immutable transformations of the request.\nThis lets interceptors coordinate operations through the context.\nFor instance, the <code>RetryInterceptor</code> example could use a second context token to track how many errors occur during the execution of a given request:</p>\n<code-example header=\"coordinating operations through the context\" path=\"http/src/app/http-interceptors/retry-interceptor.ts\" region=\"mutable-context\">\nimport {retry, tap} from 'rxjs/operators';\nexport const RETRY_COUNT = new <a href=\"api/common/http/HttpContextToken\" class=\"code-anchor\">HttpContextToken</a>(() => 3);\nexport const ERROR_COUNT = new <a href=\"api/common/http/HttpContextToken\" class=\"code-anchor\">HttpContextToken</a>(() => 0);\n\nexport class RetryInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>): Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>> {\n    const retryCount = req.context.get(RETRY_COUNT);\n\n    return next.handle(req).pipe(\n        tap({\n              // An error has occurred, so increment this request's ERROR_COUNT.\n             error: () => req.context.set(ERROR_COUNT, req.context.get(ERROR_COUNT) + 1)\n            }),\n        // Retry the request a configurable number of times.\n        retry(retryCount),\n    );\n  }\n}\n\n</code-example>\n\n  <div class=\"reviewed\">Last reviewed on Tue Nov 15 2022</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient\n - api/common/http/HttpContext\n - api/common/http/HttpContext#get\n - api/common/http/HttpContextToken\n - api/common/http/HttpEvent\n - api/common/http/HttpHandler\n - api/common/http/HttpInterceptor\n - api/common/http/HttpRequest\n - guide/http-pass-metadata-to-interceptors#contexts-are-mutable\n - guide/http-pass-metadata-to-interceptors#create-a-context-token\n - guide/http-pass-metadata-to-interceptors#http---pass-metadata-to-interceptors\n - guide/http-pass-metadata-to-interceptors#read-context-values-in-an-interceptor\n - guide/http-pass-metadata-to-interceptors#set-context-values-when-making-a-request\n-->"
}