{
  "id": "guide/cheatsheet",
  "title": "Cheat Sheet",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <div class=\"center-layout-wide\">\n<h1 class=\"no-toc\" id=\"cheat-sheet\">Cheat Sheet<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cheatsheet#cheat-sheet\"><i class=\"material-icons\">link</i></a></h1>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Bootstrapping</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a></code> from <code>@angular/platform-browser-dynamic</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule); </code-example></td>\n<td align=\"left\">Bootstraps the application, using the root component from the specified <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">NgModules</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> from <code>@angular/core</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ \n  declarations: …, \n  imports: …, \n  exports: …, \n  providers: …, \n  bootstrap: … \n}) \nclass MyModule {} </code-example></td>\n<td align=\"left\">Defines a module that contains components, directives, pipes, and providers.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> declarations: [ \n  MyRedComponent, \n  MyBlueComponent, \n  MyDatePipe \n] </code-example></td>\n<td align=\"left\">List of components, directives, and pipes that belong to this module.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> imports: [ \n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, \n  SomeOtherModule \n] </code-example></td>\n<td align=\"left\">List of modules to import into this module. Everything from the imported modules is available to <code>declarations</code> of this module.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> exports: [ \n  MyRedComponent, \n  MyDatePipe \n] </code-example></td>\n<td align=\"left\">List of components, directives, and pipes visible to modules that import this module.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> providers: [ \n  MyService, \n  { provide: … } \n] </code-example></td>\n<td align=\"left\">List of dependency injection providers visible both to the contents of this module and to importers of this module.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> bootstrap: [MyAppComponent] </code-example></td>\n<td align=\"left\">List of components to bootstrap when this module is bootstrapped.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Template syntax</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;input [value]=\"firstName\"> </code-example></td>\n<td align=\"left\">Binds property <code>value</code> to the result of expression <code>firstName</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [attr.role]=\"myAriaRole\"> </code-example></td>\n<td align=\"left\">Binds attribute <code>role</code> to the result of expression <code>myAriaRole</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [class.extra-sparkle]=\"isDelightful\"> </code-example></td>\n<td align=\"left\">Binds the presence of the CSS class <code>extra-sparkle</code> on the element to the truthiness of the expression <code>isDelightful</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [style.width.px]=\"mySize\"> </code-example></td>\n<td align=\"left\">Binds style property <code>width</code> to the result of expression <code>mySize</code> in pixels. Units are optional.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;button (click)=\"readRainbow($event)\"> </code-example></td>\n<td align=\"left\">Calls method <code>readRainbow</code> when a click event is triggered on this button element (or its children) and passes in the event object.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div title=\"Hello {{ponyName}}\"> </code-example></td>\n<td align=\"left\">Binds a property to an interpolated string, for example, \"Hello Seabiscuit\". Equivalent to: <code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [title]=\"'Hello ' + ponyName\"> </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;p> \n  Hello {{ponyName}} \n&#x3C;/p> </code-example></td>\n<td align=\"left\">Binds text content to an interpolated string, for example, \"Hello Seabiscuit\".</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;my-cmp [(title)]=\"name\"> </code-example></td>\n<td align=\"left\">Sets up two-way data binding. Equivalent to: <code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;my-cmp [title]=\"name\" (titleChange)=\"name=$event\"> </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;video #movieplayer …>&#x3C;/video> \n&#x3C;button (click)=\"movieplayer.play()\"> \n  Play \n&#x3C;/button> </code-example></td>\n<td align=\"left\">Creates a local variable <code>movieplayer</code> that provides access to the <code>video</code> element instance in data-binding and event-binding expressions in the current template.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;p *myUnless=\"myExpression\"> \n  … \n&#x3C;/p> </code-example></td>\n<td align=\"left\">The asterisk (<code>*</code>) character turns the current element into an embedded template. Equivalent to: <code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;ng-template [myUnless]=\"myExpression\"> \n  &#x3C;p> \n    … \n  &#x3C;/p> \n&#x3C;/ng-template> </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;p> \n  Card No.: {{cardNumber | myCardNumberFormatter}} \n&#x3C;/p> </code-example></td>\n<td align=\"left\">Transforms the current value of expression <code>cardNumber</code> using the pipe called <code>myCardNumberFormatter</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;p> \n  Employer: {{employer?.companyName}} \n&#x3C;/p> </code-example></td>\n<td align=\"left\">The safe navigation operator (<code>?</code>) means that the <code>employer</code> field is optional and if <code>undefined</code>, the rest of the expression should be ignored.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;svg:rect x=\"0\" \n          y=\"0\" \n          width=\"100\" \n          height=\"100\"/> </code-example></td>\n<td align=\"left\">An SVG snippet template needs an <code>svg:</code> prefix on its root element to disambiguate the SVG element from an HTML component.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;svg> \n  &#x3C;rect x=\"0\" \n        y=\"0\" \n        width=\"100\" \n        height=\"100\"/> \n&#x3C;/svg> </code-example></td>\n<td align=\"left\">An <code>&#x3C;svg></code> root element is detected as an SVG element automatically, without the prefix.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Built-in directives</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> from <code>@angular/common</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;section *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSection\"> </code-example></td>\n<td align=\"left\">Removes or recreates a portion of the DOM tree based on the <code>showSection</code> expression.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of list\"> </code-example></td>\n<td align=\"left\">Turns the <code>li</code> element and its contents into a template, and uses that to instantiate a view for each item in list.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"conditionExpression\">\n  &#x3C;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"case1Exp\"> \n    … \n  &#x3C;/ng-template>\n  &#x3C;ng-template <a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"case2LiteralString\"> \n    … \n  &#x3C;/ng-template>\n  &#x3C;ng-template <a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>> \n    … \n  &#x3C;/ng-template> \n&#x3C;/div> </code-example></td>\n<td align=\"left\">Conditionally swaps the contents of the <code>div</code> by selecting one of the embedded templates based on the current value of <code>conditionExpression</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive, \n                 'disabled': isDisabled}\"> </code-example></td>\n<td align=\"left\">Binds the presence of CSS classes on the element to the truthiness of the associated map values. The right-hand expression should return <code>{class-name: true/false}</code> map.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"{'property': 'value'}\"> \n&#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"dynamicStyles()\"> </code-example></td>\n<td align=\"left\">Allows you to assign styles to an HTML element using CSS. You can use CSS directly, as in the first example, or you can call a method from the component.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Forms</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> from <code>@angular/forms</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"userName\"> </code-example></td>\n<td align=\"left\">Provides two-way data-binding, parsing, and validation for form controls.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Class decorators</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, … } from '@angular/core'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, &#x26;hellip;</code> from <code>@angular/core';</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({…}) \nclass MyComponent() {} </code-example></td>\n<td align=\"left\">Declares that a class is a component and provides metadata about the component.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({…}) \nclass MyDirective() {} </code-example></td>\n<td align=\"left\">Declares that a class is a directive and provides metadata about the directive.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({…}) \nclass MyPipe() {} </code-example></td>\n<td align=\"left\">Declares that a class is a pipe and provides metadata about the pipe.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nclass MyService() {} </code-example></td>\n<td align=\"left\">Declares that a class can be provided and injected by other classes. Without this decorator, the compiler won't generate enough metadata to allow the class to be created properly when it's injected somewhere.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Directive configuration</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ \n  property1: value1, \n  … \n}) </code-example></td>\n<td align=\"left\">Add <code>property1</code> property with <code>value1</code> value to Directive.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> selector: '.cool-button:not(a)' </code-example></td>\n<td align=\"left\">Specifies a CSS selector that identifies this directive within a template. Supported selectors include <code>element</code>, <code>[attribute]</code>, <code>.class</code>, and <code>:not()</code>. <br> Does not support parent-child relationship selectors.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> providers: [ \n  MyService, \n  { provide: … } \n] </code-example></td>\n<td align=\"left\">List of dependency injection providers for this directive and its children.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Component configuration <br> <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> extends <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>, so the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> configuration applies to components as well</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> viewProviders: [MyService, { provide: … }] </code-example></td>\n<td align=\"left\">List of dependency injection providers scoped to this component's view.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> template: 'Hello {{name}}' \ntemplateUrl: 'my-component.html' </code-example></td>\n<td align=\"left\">Inline template or external template URL of the component's view.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> styles: ['.primary {color: red}'] \nstyleUrls: ['my-component.css'] </code-example></td>\n<td align=\"left\">List of inline CSS styles or external stylesheet URLs for styling the component's view.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Class field decorators for directives and components</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, … } from '@angular/core'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, ...</code> from <code>@angular/core</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() myProperty; </code-example></td>\n<td align=\"left\">Declares an input property that you can update using property binding (example: <code>&#x3C;my-cmp [myProperty]=\"someExpression\"></code>).</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() myEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>(); </code-example></td>\n<td align=\"left\">Declares an output property that fires events that you can subscribe to with an event binding (example: <code>&#x3C;my-cmp (myEvent)=\"doSomething()\"></code>).</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('class.valid') isValid; </code-example></td>\n<td align=\"left\">Binds a host element property (here, the CSS class <code>valid</code>) to a directive/component property (<code>isValid</code>).</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('click', ['$event']) onClick(e) {…} </code-example></td>\n<td align=\"left\">Subscribes to a host element event (<code>click</code>) with a directive/component method (<code>onClick</code>), optionally passing an argument (<code>$event</code>).</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(myPredicate) myChildComponent; </code-example></td>\n<td align=\"left\">Binds the first result of the component content query (<code>myPredicate</code>) to a property (<code>myChildComponent</code>) of the class.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a>(myPredicate) myChildComponents; </code-example></td>\n<td align=\"left\">Binds the results of the component content query (<code>myPredicate</code>) to a property (<code>myChildComponents</code>) of the class.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(myPredicate) myChildComponent; </code-example></td>\n<td align=\"left\">Binds the first result of the component view query (<code>myPredicate</code>) to a property (<code>myChildComponent</code>) of the class. Not available for directives.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ViewChildren\" class=\"code-anchor\">ViewChildren</a>(myPredicate) myChildComponents; </code-example></td>\n<td align=\"left\">Binds the results of the component view query (<code>myPredicate</code>) to a property (<code>myChildComponents</code>) of the class. Not available for directives.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Directive and component change detection and lifecycle hooks (implemented as class methods)</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> constructor(myService: MyService, …) { … } </code-example></td>\n<td align=\"left\">Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnChanges(changeRecord) { … } </code-example></td>\n<td align=\"left\">Called after every change to input properties and before processing content or child views.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnInit() { … } </code-example></td>\n<td align=\"left\">Called after the constructor, initializing input properties, and the first call to <code>ngOnChanges</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngDoCheck() { … } </code-example></td>\n<td align=\"left\">Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterContentInit() { … } </code-example></td>\n<td align=\"left\">Called after <code>ngOnInit</code> when the component's or directive's content has been initialized.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterContentChecked() { … } </code-example></td>\n<td align=\"left\">Called after every check of the component's or directive's content.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterViewInit() { … } </code-example></td>\n<td align=\"left\">Called after <code>ngAfterContentInit</code> when the component's views and child views / the view that a directive is in has been initialized.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterViewChecked() { … } </code-example></td>\n<td align=\"left\">Called after every check of the component's views and child views / the view that a directive is in.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnDestroy() { … } </code-example></td>\n<td align=\"left\">Called once, before the instance is destroyed.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Dependency injection configuration</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyService, useClass: MyMockService } </code-example></td>\n<td align=\"left\">Sets or overrides the provider for <code>MyService</code> to the <code>MyMockService</code> class.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyService, useFactory: myFactory } </code-example></td>\n<td align=\"left\">Sets or overrides the provider for <code>MyService</code> to the <code>myFactory</code> factory function.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyValue, useValue: 41 } </code-example></td>\n<td align=\"left\">Sets or overrides the provider for <code>MyValue</code> to the value <code>41</code>.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Routing and navigation</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, … } from '@angular/router'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, ...</code> from <code>@angular/router</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> const routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [ \n  { path: '', component: HomeComponent }, \n  { path: 'path/:routeParam', component: MyComponent }, \n  { path: 'staticPath', component: … }, \n  { path: '**', component: … }, \n  { path: 'oldPath', redirectTo: '/staticPath' }, \n  { path: …, component: …, data: { message: 'Custom' } } \n]); \n \nconst routing = RouterModule.forRoot(routes); </code-example></td>\n<td align=\"left\">Configures routes for the application. Supports static, parameterized, redirect, and wildcard routes. Also supports custom route data and resolve.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>> \n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"aux\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>> </code-example></td>\n<td align=\"left\">Marks the location to load the component of the active route.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/path\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path', routeParam ]\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path', { matrixParam: 'value' } ]\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" [queryParams]=\"{ page: 1 }\"> \n&#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" fragment=\"anchor\"> </code-example></td>\n<td align=\"left\">Creates a link to a different view based on a route instruction consisting of a route path, required and optional parameters, query parameters, and a fragment. To navigate to a root route, use the <code>/</code> prefix; for a child route, use the <code>./</code>prefix; for a sibling or parent, use the <code>../</code> prefix.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"> </code-example></td>\n<td align=\"left\">The provided classes are added to the element when the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> becomes the current active route.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"> </code-example></td>\n<td align=\"left\">The provided classes and <code>aria-current</code> attribute are added to the element when the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> becomes the current active route.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canActivateGuard: <a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a> = \n  ( \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ) => { … } \n \n{ path: …, canActivate: [canActivateGuard] } </code-example></td>\n<td align=\"left\">An interface for defining a function that the router should call first to determine if it should activate this component. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canDeactivateGuard: <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a>&#x3C;T> = \n  ( \n    component: T, \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ) => { … } \n \n{ path: …, canDeactivate: [canDeactivateGuard] } </code-example></td>\n<td align=\"left\">An interface for defining a function that the router should call first to determine if it should deactivate this component after a navigation. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canActivateChildGuard: <a href=\"api/router/CanActivateChildFn\" class=\"code-anchor\">CanActivateChildFn</a> = \n  ( \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ) => { … } \n \n{ path: …, canActivateChild: [canActivateGuard], children: … } </code-example></td>\n<td align=\"left\">An interface for defining a function that the router should call first to determine if it should activate the child route. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function resolveGuard implements <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>&#x3C;T> = \n  ( \n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n  ) => { … }  \n \n{ path: …, resolve: [resolveGuard] } </code-example></td>\n<td align=\"left\">An interface for defining a function that the router should call first to resolve route data before rendering the route. Should return a value or an Observable/Promise that resolves to a value.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canLoadGuard: <a href=\"api/router/CanLoadFn\" class=\"code-anchor\">CanLoadFn</a> = \n  ( \n    route: <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> \n  ) => { … } \n \n{ path: …, canLoad: [canLoadGuard], loadChildren: … } </code-example></td>\n<td align=\"left\">An interface for defining a function that the router should call first to check if the lazy loaded module should be loaded. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Mon Feb 28 2022</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgClass\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/core/Component\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/Directive\n - api/core/EventEmitter\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/Output\n - api/core/Pipe\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivateChildFn\n - api/router/CanActivateFn\n - api/router/CanDeactivateFn\n - api/router/CanLoadFn\n - api/router/ResolveFn\n - api/router/Route\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/RouterStateSnapshot\n - api/router/Routes\n - api/router/UrlTree\n - guide/cheatsheet#cheat-sheet\n-->"
}