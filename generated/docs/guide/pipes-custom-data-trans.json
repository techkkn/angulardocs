{
  "id": "guide/pipes-custom-data-trans",
  "title": "Creating pipes for custom data transformations",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"creating-pipes-for-custom-data-transformations\">Creating pipes for custom data transformations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#creating-pipes-for-custom-data-transformations\"><i class=\"material-icons\">link</i></a></h1>\n<p>Create custom pipes to encapsulate transformations that are not provided with the built-in pipes.\nThen, use your custom pipe in template expressions, the same way you use built-in pipesâ€”to transform input values to output values for display.</p>\n<h2 id=\"marking-a-class-as-a-pipe\">Marking a class as a pipe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#marking-a-class-as-a-pipe\"><i class=\"material-icons\">link</i></a></h2>\n<p>To mark a class as a pipe and supply configuration metadata, apply the <a href=\"/api/core/Pipe\" title=\"API reference for Pipe\"><code>@Pipe</code></a> <a href=\"/guide/glossary#decorator--decoration\" title=\"Definition for decorator\">decorator</a> to the class.</p>\n<p>Use <a href=\"guide/glossary#case-types\" title=\"Definition of case types\">UpperCamelCase</a> (the general convention for class names) for the pipe class name, and <a href=\"guide/glossary#case-types\" title=\"Definition of case types\">camelCase</a> for the corresponding <code>name</code> string.\nDo not use hyphens in the <code>name</code>.</p>\n<p>For details and more examples, see <a href=\"guide/styleguide#pipe-names\" title=\"Pipe names in the Angular coding style guide\">Pipe names</a>.</p>\n<p>Use <code>name</code> in template expressions as you would for a built-in pipe.</p>\n<div class=\"alert is-important\">\n<ul>\n<li>Include your pipe in the <code>declarations</code> field of the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata in order for it to be available to a template. See the <code>app.module.ts</code> file in the example application (<live-example></live-example>). For details, see <a href=\"guide/ngmodules\" title=\"NgModules introduction\">NgModules</a>.</li>\n<li>Register your custom pipes. The <a href=\"cli\" title=\"CLI Overview and Command Reference\">Angular CLI</a> <a href=\"cli/generate#pipe\" title=\"ng generate pipe in the CLI Command Reference\"><code>ng generate pipe</code></a> command registers the pipe automatically.</li>\n</ul>\n</div>\n<h2 id=\"using-the-pipetransform-interface\">Using the PipeTransform interface<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#using-the-pipetransform-interface\"><i class=\"material-icons\">link</i></a></h2>\n<p>Implement the <a href=\"/api/core/PipeTransform\" title=\"API reference for PipeTransform\"><code>PipeTransform</code></a> interface in your custom pipe class to perform the transformation.</p>\n<p>Angular invokes the <code>transform</code> method with the value of a binding as the first argument, and any parameters as the second argument in list form, and returns the transformed value.</p>\n<h2 id=\"example-transforming-a-value-exponentially\">Example: Transforming a value exponentially<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#example-transforming-a-value-exponentially\"><i class=\"material-icons\">link</i></a></h2>\n<p>In a game, you might want to implement a transformation that raises a value exponentially to increase a hero's power.\nFor example, if the hero's score is 2, boosting the hero's power exponentially by 10 produces a score of 1024.\nUse a custom pipe for this transformation.</p>\n<p>The following code example shows two component definitions:</p>\n<ul>\n<li>The <code>exponential-strength.pipe.ts</code> component defines a custom pipe named <code>exponentialStrength</code> with the <code>transform</code> method that performs the transformation.\nIt defines an argument to the <code>transform</code> method (<code>exponent</code>) for a parameter passed to the pipe.</li>\n<li>The <code>power-booster.component.ts</code> component demonstrates how to use the pipe, specifying a value (<code>2</code>) and the exponent parameter (<code>10</code>).</li>\n</ul>\n<code-tabs>\n    <code-pane header=\"src/app/exponential-strength.pipe.ts\" path=\"pipes/src/app/exponential-strength.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n/*\n * Raise the value exponentially\n * Takes an exponent argument that defaults to 1.\n * Usage:\n *   value | exponentialStrength:exponent\n * Example:\n *   {{ 2 | exponentialStrength:10 }}\n *   formats to: 1024\n*/\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  standalone: true,\n  name: 'exponentialStrength'\n})\nexport class ExponentialStrengthPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(value: number, exponent = 1): number {\n    return Math.pow(value, exponent);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/power-booster.component.ts\" path=\"pipes/src/app/power-booster.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { ExponentialStrengthPipe } from './exponential-strength.pipe';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-power-booster',\n  template: `\n    &#x3C;h2>Power Booster&#x3C;/h2>\n    &#x3C;p>Super power boost: {{2 | exponentialStrength: 10}}&#x3C;/p>\n  `,\n  imports: [ExponentialStrengthPipe]\n})\nexport class PowerBoosterComponent { }\n\n\n</code-pane>\n</code-tabs>\n<p>The browser displays the following:</p>\n<code-example language=\"none\">\n\nPower Booster\n\nSuperpower boost: 1024\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>To examine the behavior of the <code>exponentialStrength</code> pipe in the <live-example name=\"pipes\"></live-example>, change the value and optional exponent in the template.</p>\n</div>\n\n  <div class=\"reviewed\">Last reviewed on Fri Jan 06 2023</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /api/core/Pipe\n - /api/core/PipeTransform\n - /guide/glossary#decorator--decoration\n - api/core/Component\n - api/core/NgModule\n - api/core/Pipe\n - api/core/PipeTransform\n - cli\n - cli/generate#pipe\n - guide/glossary#case-types\n - guide/ngmodules\n - guide/pipes-custom-data-trans#creating-pipes-for-custom-data-transformations\n - guide/pipes-custom-data-trans#example-transforming-a-value-exponentially\n - guide/pipes-custom-data-trans#marking-a-class-as-a-pipe\n - guide/pipes-custom-data-trans#using-the-pipetransform-interface\n - guide/styleguide#pipe-names\n-->"
}