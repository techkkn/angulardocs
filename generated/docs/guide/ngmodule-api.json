{
  "id": "guide/ngmodule-api",
  "title": "NgModule API",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"ngmodule-api\">NgModule API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-api\"><i class=\"material-icons\">link</i></a></h1>\n<p>At a high level, NgModules are a way to organize Angular applications and they accomplish this through the metadata in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator.\nThe metadata falls into three categories:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Category</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Static</td>\n<td align=\"left\">Compiler configuration which tells the compiler about directive selectors and where in templates the directives should be applied through selector matching. This is configured using the <code>declarations</code> array.</td>\n</tr>\n<tr>\n<td align=\"left\">Runtime</td>\n<td align=\"left\">Injector configuration using the <code>providers</code> array.</td>\n</tr>\n<tr>\n<td align=\"left\">Composability / Grouping</td>\n<td align=\"left\">Bringing NgModules together and making them available using the <code>imports</code> and <code>exports</code> arrays.</td>\n</tr>\n</tbody>\n</table>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  // Static, that is compiler configuration\n  declarations: [], // Configure the selectors\n\n  // Runtime, or injector configuration\n  providers: [], // Runtime injector configuration\n\n  // Composability / Grouping\n  imports: [], // composing NgModules together\n  exports: [] // making NgModules available to other parts of the app\n})\n\n</code-example>\n<h2 id=\"ngmodule-metadata\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-metadata\"><i class=\"material-icons\">link</i></a></h2>\n<p>The following table summarizes the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata properties.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Property</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>declarations</code></td>\n<td align=\"left\">A list of <a href=\"guide/ngmodule-faq#q-declarable\">declarable</a> classes (<em>components</em>, <em>directives</em>, and <em>pipes</em>) that <em>belong to this module</em>. <ol> <li> When compiling a template, you need to determine a set of selectors which should be used for triggering their corresponding directives. </li> <li> The template is compiled within the context of an NgModule —the NgModule within which the template's component is declared— which determines the set of selectors using the following rules: <ul> <li> All selectors of directives listed in <code>declarations</code>. </li> <li> All selectors of directives exported from imported NgModules. </li> </ul> </li> </ol> Components, directives, and pipes must belong to <em>exactly</em> one module. The compiler emits an error if you try to declare the same class in more than one module. Be careful not to re-declare a class that is imported directly or indirectly from another module.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>providers</code></td>\n<td align=\"left\">A list of dependency-injection providers. <br> Angular registers these providers with the NgModule's injector. If it is the NgModule used for bootstrapping then it is the root injector. <br> These services become available for injection into any component, directive, pipe or service which is a child of this injector. <br> A lazy-loaded module has its own injector which is typically a child of the application root injector. <br> Lazy-loaded services are scoped to the lazy module's injector. If a lazy-loaded module also provides the <code>UserService</code>, any component created within that module's context (such as by router navigation) gets the local instance of the service, not the instance in the root application injector. <br> Components in external modules continue to receive the instance provided by their injectors. <br> For more information on injector hierarchy and scoping, see <a href=\"guide/providers\">Providers</a> and the <a href=\"guide/dependency-injection\">DI Guide</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>imports</code></td>\n<td align=\"left\">A list of modules which should be folded into this module. Folded means it is as if all the imported NgModule's exported properties were declared here. <br> Specifically, it is as if the list of modules whose exported components, directives, or pipes are referenced by the component templates were declared in this module. <br> A component template can <a href=\"guide/ngmodule-faq#q-template-reference\">reference</a> another component, directive, or pipe when the reference is declared in this module or if the imported module has exported it. For example, a component can use the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> directives only if the module has imported the Angular <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> (perhaps indirectly by importing <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>). <br> You can import many standard directives from the <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> but some familiar directives belong to other modules. For example, you can use <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> only after importing the Angular <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>exports</code></td>\n<td align=\"left\">A list of declarations —<em>component</em>, <em>directive</em>, and <em>pipe</em> classes— that an importing module can use. <br> Exported declarations are the module's <em>public API</em>. A component in another module can <a href=\"guide/ngmodule-faq#q-template-reference\">use</a> <em>this</em> module's <code>UserComponent</code> if it imports this module and this module exports <code>UserComponent</code>. <br> Declarations are private by default. If this module does <em>not</em> export <code>UserComponent</code>, then only the components within <em>this</em> module can use <code>UserComponent</code>. <br> Importing a module does <em>not</em> automatically re-export the imported module's imports. Module 'B' can't use <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> just because it imported module 'A' which imported <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>. Module 'B' must import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> itself. <br> A module can list another module among its <code>exports</code>, in which case all of that module's public components, directives, and pipes are exported. <br> <a href=\"guide/ngmodule-faq#q-reexport\">Re-export</a> makes module transitivity explicit. If Module 'A' re-exports <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> and Module 'B' imports Module 'A', Module 'B' components can use <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> even though 'B' itself didn't import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>bootstrap</code></td>\n<td align=\"left\">A list of components that are automatically bootstrapped. <br> Usually there's only one component in this list, the <em>root component</em> of the application. <br> Angular can launch with multiple bootstrap components, each with its own location in the host web page.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"more-on-ngmodules\">More on NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p>You may also be interested in the following:</p>\n<ul>\n<li><a href=\"guide/feature-modules\">Feature Modules</a></li>\n<li><a href=\"guide/providers\">Providers</a></li>\n<li><a href=\"guide/module-types\">Types of Feature Modules</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Mon Feb 28 2022</div>\n</div>\n\n<!-- links to this doc:\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgIf\n - api/core/NgModule\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/dependency-injection\n - guide/feature-modules\n - guide/module-types\n - guide/ngmodule-api#more-on-ngmodules\n - guide/ngmodule-api#ngmodule-api\n - guide/ngmodule-api#ngmodule-metadata\n - guide/ngmodule-faq#q-declarable\n - guide/ngmodule-faq#q-reexport\n - guide/ngmodule-faq#q-template-reference\n - guide/providers\n-->"
}