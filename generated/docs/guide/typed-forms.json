{
  "id": "guide/typed-forms",
  "title": "Typed Forms",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"typed-forms\">Typed Forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#typed-forms\"><i class=\"material-icons\">link</i></a></h1>\n<p>As of Angular 14, reactive forms are strictly typed by default.</p>\n<p><a id=\"prerequisites\"></a></p>\n<h2 id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p>As background for this guide, you should already be familiar with <a href=\"guide/reactive-forms\" title=\"Reactive Forms\">Angular Reactive Forms</a>.</p>\n<p><a id=\"intro\"></a></p>\n<h2 id=\"overview-of-typed-forms\">Overview of Typed Forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#overview-of-typed-forms\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"video-container\">\n<iframe src=\"https://www.youtube.com/embed/L-odCf4MfJc\" title=\"Angular Typed Forms\" frameborder=\"0\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<p>With Angular reactive forms, you explicitly specify a <em>form model</em>. As a simple example, consider this basic user login form:</p>\n<code-example language=\"ts\">\nconst login = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    password: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n});\n</code-example>\n<p>Angular provides many APIs for interacting with this <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>. For example, you may call <code>login.value</code>, <code>login.controls</code>, <code>login.patchValue</code>, etc. (For a full API reference, see the <a href=\"api/forms/FormGroup\">API documentation</a>.)</p>\n<p>In previous Angular versions, most of these APIs included <code>any</code> somewhere in their types, and interacting with the structure of the controls, or the values themselves, was not type-safe. For example: you could write the following invalid code:</p>\n<code-example language=\"ts\">\nconst emailDomain = login.value.email.domain;\n</code-example>\n<p>With strictly typed reactive forms, the above code does not compile, because there is no <code>domain</code> property on <code><a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a></code>.</p>\n<p>In addition to the added safety, the types enable a variety of other improvements, such as better autocomplete in IDEs, and an explicit way to specify form structure.</p>\n<p>These improvements currently apply only to <em>reactive</em> forms (not <a href=\"guide/forms\" title=\"Forms Guide\"><em>template-driven</em> forms</a>).</p>\n<p><a id=\"automated-migration\"></a></p>\n<h2 id=\"automated-untyped-forms-migration\">Automated Untyped Forms Migration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#automated-untyped-forms-migration\"><i class=\"material-icons\">link</i></a></h2>\n<p>When upgrading to Angular 14, an included migration will automatically replace all the forms classes in your code with corresponding untyped versions. For example, the snippet from above would become:</p>\n<code-example language=\"ts\">\nconst login = new <a href=\"api/forms/UntypedFormGroup\" class=\"code-anchor\">UntypedFormGroup</a>({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/UntypedFormControl\" class=\"code-anchor\">UntypedFormControl</a>(''),\n    password: new <a href=\"api/forms/UntypedFormControl\" class=\"code-anchor\">UntypedFormControl</a>(''),\n});\n</code-example>\n<p>Each <code>Untyped</code> symbol has exactly the same semantics as in previous Angular versions, so your application should continue to compile as before. By removing the <code>Untyped</code> prefixes, you can incrementally enable the types.</p>\n<p><a id=\"form-control-inference\"></a></p>\n<h2 id=\"formcontrol-getting-started\"><code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>: Getting Started<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formcontrol-getting-started\"><i class=\"material-icons\">link</i></a></h2>\n<p>The simplest possible form consists of a single control:</p>\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('angularrox@gmail.com');\n</code-example>\n<p>This control will be automatically inferred to have the type <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;string|null></code>. TypeScript will automatically enforce this type throughout the <a href=\"api/forms/FormControl\"><code>FormControl</code> API</a>, such as <code>email.value</code>, <code>email.valueChanges</code>, <code>email.setValue(...)</code>, etc.</p>\n<h3 id=\"nullability\">Nullability<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#nullability\"><i class=\"material-icons\">link</i></a></h3>\n<p>You might wonder: why does the type of this control include <code>null</code>?  This is because the control can become <code>null</code> at any time, by calling reset:</p>\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('angularrox@gmail.com');\nemail.reset();\nconsole.log(email.value); // null\n</code-example>\n<p>TypeScript will enforce that you always handle the possibility that the control has become <code>null</code>. If you want to make this control non-nullable, you may use the <code>nonNullable</code> option. This will cause the control to reset to its initial value, instead of <code>null</code>:</p>\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('angularrox@gmail.com', {nonNullable: true});\nemail.reset();\nconsole.log(email.value); // angularrox@gmail.com\n</code-example>\n<p>To reiterate, this option affects the runtime behavior of your form when <code>.reset()</code> is called, and should be flipped with care.</p>\n<h3 id=\"specifying-an-explicit-type\">Specifying an Explicit Type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#specifying-an-explicit-type\"><i class=\"material-icons\">link</i></a></h3>\n<p>It is possible to specify the type, instead of relying on inference. Consider a control that is initialized to <code>null</code>. Because the initial value is <code>null</code>, TypeScript will infer <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;null></code>, which is narrower than we want.</p>\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(null);\nemail.setValue('angularrox@gmail.com'); // Error!\n</code-example>\n<p>To prevent this, we explicitly specify the type as <code>string|null</code>:</p>\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;string|null>(null);\nemail.setValue('angularrox@gmail.com');\n</code-example>\n<p><a id=\"form-array\"></a></p>\n<h2 id=\"formarray-dynamic-homogenous-collections\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>: Dynamic, Homogenous Collections<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formarray-dynamic-homogenous-collections\"><i class=\"material-icons\">link</i></a></h2>\n<p>A <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> contains an open-ended list of controls. The type parameter corresponds to the type of each inner control:</p>\n<code-example language=\"ts\">\nconst names = new <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>([new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('Alex')]);\nnames.push(new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('Jess'));\n</code-example>\n<p>This <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> will have the inner controls type <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;string|null></code>.</p>\n<p>If you want to have multiple different element types inside the array, you must use <code><a href=\"api/forms/UntypedFormArray\" class=\"code-anchor\">UntypedFormArray</a></code>, because TypeScript cannot infer which element type will occur at which position.</p>\n<p><a id=\"form-group-record\"></a></p>\n<h2 id=\"formgroup-and-formrecord\"><code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> and <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formgroup-and-formrecord\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular provides the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> type for forms with an enumerated set of keys, and a type called <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code>, for open-ended or dynamic groups.</p>\n<h3 id=\"partial-values\">Partial Values<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#partial-values\"><i class=\"material-icons\">link</i></a></h3>\n<p>Consider again a login form:</p>\n<code-example language=\"ts\">\nconst login = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n    password: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n});\n</code-example>\n<p>On any <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>, it is <a href=\"api/forms/FormGroup\">possible to disable controls</a>. Any disabled control will not appear in the group's value.</p>\n<p>As a consequence, the type of <code>login.value</code> is <code>Partial&#x3C;{<a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: string, password: string}></code>. The <code>Partial</code> in this type means that each member might be undefined.</p>\n<p>More specifically, the type of <code>login.value.email</code> is <code>string|undefined</code>, and TypeScript will enforce that you handle the possibly <code>undefined</code> value (if you have <code>strictNullChecks</code> enabled).</p>\n<p>If you want to access the value <em>including</em> disabled controls, and thus bypass possible <code>undefined</code> fields, you can use <code>login.getRawValue()</code>.</p>\n<h3 id=\"optional-controls-and-dynamic-groups\">Optional Controls and Dynamic Groups<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#optional-controls-and-dynamic-groups\"><i class=\"material-icons\">link</i></a></h3>\n<p>Some forms have controls that may or may not be present, which can be added and removed at runtime. You can represent these controls using <em>optional fields</em>:</p>\n<code-example language=\"ts\">\ninterface LoginForm {\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;string>;\n    password?: <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;string>;\n}\n\nconst login = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>&#x3C;LoginForm>({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n    password: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n});\n\nlogin.removeControl('password');\n</code-example>\n<p>In this form, we explicitly specify the type, which allows us to make the <code>password</code> control optional. TypeScript will enforce that only optional controls can be added or removed.</p>\n<h3 id=\"formrecord\"><code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formrecord\"><i class=\"material-icons\">link</i></a></h3>\n<p>Some <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> usages do not fit the above pattern because the keys are not known ahead of time. The <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code> class is designed for that case:</p>\n<code-example language=\"ts\">\nconst addresses = new <a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a>&#x3C;<a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;string|null>>({});\naddresses.addControl('Andrew', new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('2340 Folsom St'));\n</code-example>\n<p>Any control of type <code>string|null</code> can be added to this <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code>.</p>\n<p>If you need a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> that is both dynamic (open-ended) and heterogeneous (the controls are different types), no improved type safety is possible, and you should use <code><a href=\"api/forms/UntypedFormGroup\" class=\"code-anchor\">UntypedFormGroup</a></code>.</p>\n<p>A <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code> can also be built with the <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>:</p>\n<code-example language=\"ts\">\nconst addresses = fb.record({'Andrew': '2340 Folsom St'});\n</code-example>\n<h2 id=\"formbuilder-and-nonnullableformbuilder\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> and <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formbuilder-and-nonnullableformbuilder\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> class has been upgraded to support the new types as well, in the same manner as the above examples.</p>\n<p>Additionally, an additional builder is available: <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code>. This type is shorthand for specifying <code>{nonNullable: true}</code> on every control, and can eliminate significant boilerplate from large non-nullable forms. You can access it using the <code>nonNullable</code> property on a <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>:</p>\n<code-example language=\"ts\">\nconst fb = new <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>();\nconst login = fb.nonNullable.group({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: '',\n    password: '',\n});\n</code-example>\n<p>On the above example, both inner controls will be non-nullable (i.e. <code>nonNullable</code> will be set).</p>\n<p>You can also inject it using the name <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code>.</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Tue May 10 2022</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/forms/EmailValidator\n - api/forms/FormArray\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormGroup\n - api/forms/FormRecord\n - api/forms/NonNullableFormBuilder\n - api/forms/UntypedFormArray\n - api/forms/UntypedFormControl\n - api/forms/UntypedFormGroup\n - guide/forms\n - guide/reactive-forms\n - guide/typed-forms#automated-untyped-forms-migration\n - guide/typed-forms#formarray-dynamic-homogenous-collections\n - guide/typed-forms#formbuilder-and-nonnullableformbuilder\n - guide/typed-forms#formcontrol-getting-started\n - guide/typed-forms#formgroup-and-formrecord\n - guide/typed-forms#formrecord\n - guide/typed-forms#nullability\n - guide/typed-forms#optional-controls-and-dynamic-groups\n - guide/typed-forms#overview-of-typed-forms\n - guide/typed-forms#partial-values\n - guide/typed-forms#prerequisites\n - guide/typed-forms#specifying-an-explicit-type\n - guide/typed-forms#typed-forms\n-->"
}