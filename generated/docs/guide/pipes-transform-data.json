{
  "id": "guide/pipes-transform-data",
  "title": "Transforming data with parameters and chained pipes",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"transforming-data-with-parameters-and-chained-pipes\">Transforming data with parameters and chained pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-transform-data#transforming-data-with-parameters-and-chained-pipes\"><i class=\"material-icons\">link</i></a></h1>\n<p>Some pipes have <em>optional</em> parameters to fine-tune the pipe's output.</p>\n<p>For example, the <a href=\"api/common/CurrencyPipe\" title=\"API reference\"><code>CurrencyPipe</code></a> accepts a country code as a parameter.\nTo specify the parameter, follow the pipe name (<code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code>) with a colon (<code>:</code>) and the parameter value (a country code).</p>\n<p>The template expression <code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR' }}</code> displays the amount, prefixed with the Euros symbol (â‚¬).</p>\n<p>Some pipes accept multiple <em>optional</em> parameters. Pass each parameter to the pipe, separated by colons.</p>\n<p>For example, <code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR':'Euros '}}</code> displays the amount with the label \"Euros\" (the second parameter) instead of the Euros symbol.</p>\n<p>Some pipes, such as <a href=\"/api/common/SlicePipe\" title=\"API reference for SlicePipe\"><code>SlicePipe</code></a>, <em>require</em> at least one parameter and may allow more <em>optional</em> parameters.</p>\n<p>The expression <code>{{ anArray | <a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a>:1:5 }}</code> displays a new string containing a subset of the elements starting with element <code>1</code> and ending with element <code>5</code>.</p>\n<h2 id=\"example-formatting-a-date\">Example: Formatting a date<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-transform-data#example-formatting-a-date\"><i class=\"material-icons\">link</i></a></h2>\n<p>The following example demonstrates two ways to format a hero's birthdate with the <a href=\"api/common/DatePipe\" title=\"API reference\"><code>DatePipe</code></a>.</p>\n<code-tabs>\n    <code-pane header=\"birthday-formatting.component.html (template)\" path=\"pipes/src/app/birthday-formatting.component.html\">\n&#x3C;p>The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:\"shortDate\" }} in the \"shortDate\" format.&#x3C;/p>\n\n&#x3C;p>The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:format }} in \"{{format}}\" format.\n  Click the toggle button to change formats.&#x3C;/p>\n\n&#x3C;button type=\"button\" (click)=\"toggleFormat()\">Toggle Format&#x3C;/button>\n\n\n</code-pane>\n    <code-pane header=\"birthday-formatting.component.ts (class)\" path=\"pipes/src/app/birthday-formatting.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a> } from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-birthday-formatting',\n  templateUrl: './birthday-formatting.component.html',\n  imports: [<a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a>],\n})\nexport class BirthdayFormattingComponent {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- since month parameter is zero-based\n  toggle = true;\n\n  get format()   { return this.toggle ? 'mediumDate' : 'fullDate'; }\n\n  toggleFormat() { this.toggle = !this.toggle; }\n}\n\n\n</code-pane>\n</code-tabs>\n<p>In the template, the first expression passes the birthdate to the <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code> <em>with a literal</em> date format parameter, \"shortDate\". The output is <strong>04/15/88</strong>.</p>\n<p>The second expression passes the birthdate to the <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code> with a date format parameter <em>bound to a component property</em> (<code>format</code>).</p>\n<p>Clicking the \"Toggle\" button switches that property value between two of the <a href=\"api/common/DatePipe#pre-defined-format-options\">many possible pre-defined formats</a>, <code>'mediumDate'</code> and <code>'fullDate'</code>. The output is either <strong>April 15, 1988</strong> or <strong>Friday, April 15, 1988</strong>.</p>\n<p>The page displays the birthdate in the specified format.</p>\n<h2 id=\"example-chaining-two-pipes-together\">Example: Chaining two pipes together<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-transform-data#example-chaining-two-pipes-together\"><i class=\"material-icons\">link</i></a></h2>\n<p>Connect multiple pipes, using \"pipe chaining syntax\", so that the output of one pipe becomes the input to the next.</p>\n<p>The following example passes the birthdate to the <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code> and then forwards the result to the <a href=\"api/common/UpperCasePipe\" title=\"API reference\"><code>UpperCasePipe</code></a> pipe, using \"pipe chaining syntax\".</p>\n<p>Once again, it demonstrates the <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code> both <em>with</em> and <em>without</em> a format parameter. Note that both results (<strong>APR 15, 1988</strong> and <strong>FRIDAY, APRIL 15, 1988</strong>) are in uppercase.</p>\n<code-tabs>\n    <code-pane header=\"birthday-pipe-chaining.component.html (template)\" path=\"pipes/src/app/birthday-pipe-chaining.component.html\">\n&#x3C;p>\n  The chained hero's uppercase birthday is\n  {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a> | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}\n&#x3C;/p>\n\n&#x3C;p>\n  The chained hero's uppercase birthday in \"fullDate\" format is\n  {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'fullDate' | uppercase}}\n&#x3C;/p>\n\n\n</code-pane>\n    <code-pane header=\"birthday-pipe-chaining.component.ts (class)\" path=\"pipes/src/app/birthday-pipe-chaining.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a>, <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>} from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-birthday-pipe-chaining',\n  templateUrl: './birthday-pipe-chaining.component.html',\n  imports: [<a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a>, <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>],\n})\nexport class BirthdayPipeChainingComponent {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- since month parameter is zero-based\n}\n\n\n</code-pane>\n</code-tabs>\n<p>Switch to the class file to see that this is a <a href=\"guide/standalone-components\">standalone component</a>; it imports the two pipes from <code>@angular/common</code>, the source of all built-in pipes.</p>\n\n  <div class=\"reviewed\">Last reviewed on Mon Aug 14 2023</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /api/common/SlicePipe\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/DatePipe#pre-defined-format-options\n - api/common/SlicePipe\n - api/common/UpperCasePipe\n - api/core/Component\n - guide/pipes-transform-data#example-chaining-two-pipes-together\n - guide/pipes-transform-data#example-formatting-a-date\n - guide/pipes-transform-data#transforming-data-with-parameters-and-chained-pipes\n - guide/standalone-components\n-->"
}