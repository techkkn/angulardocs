{
  "id": "guide/http-track-show-request-progress",
  "title": "HTTP - Track and show request progress",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"http---track-and-show-request-progress\">HTTP - Track and show request progress<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-track-show-request-progress#http---track-and-show-request-progress\"><i class=\"material-icons\">link</i></a></h1>\n<p>Sometimes applications transfer large amounts of data and those transfers can take a long time. File uploads are a typical example. You can give the users a better experience by providing feedback on the progress of such transfers.</p>\n<h2 id=\"make-a-request\">Make a request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-track-show-request-progress#make-a-request\"><i class=\"material-icons\">link</i></a></h2>\n<p>To make a request with progress events enabled, create an instance of <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> with the <code>reportProgress</code> option set true to enable tracking of progress events.</p>\n<code-example header=\"app/uploader/uploader.service.ts (upload request)\" path=\"http/src/app/uploader/uploader.service.ts\" region=\"upload-request\">\nconst req = new <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>('POST', '/upload/file', file, {\n  reportProgress: true\n});\n\n</code-example>\n<div class=\"alert is-important\">\n<p><strong>TIP</strong>: <br>\nEvery progress event triggers change detection, so only turn them on if you need to report progress in the UI.</p>\n<p>When using <code><a href=\"api/common/http/HttpClient#request\" class=\"code-anchor\">HttpClient.request()</a></code> with an HTTP method, configure the method with <code>observe: 'events'</code> to see all events, including the progress of transfers.</p>\n</div>\n<h2 id=\"track-request-progress\">Track request progress<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-track-show-request-progress#track-request-progress\"><i class=\"material-icons\">link</i></a></h2>\n<p>Next, pass this request object to the <code><a href=\"api/common/http/HttpClient#request\" class=\"code-anchor\">HttpClient.request()</a></code> method, which returns an <code>Observable</code> of <code>HttpEvents</code> (the same events processed by <a href=\"guide/http-intercept-requests-and-responses#interceptor-events\">interceptors</a>).</p>\n<code-example header=\"app/uploader/uploader.service.ts (upload body)\" path=\"http/src/app/uploader/uploader.service.ts\" region=\"upload-body\">\n// The `HttpClient.request` API produces a raw event stream\n// which includes start (sent), progress, and response events.\nreturn this.http.request(req).pipe(\n  map(event => this.getEventMessage(event, file)),\n  tap(message => this.showProgress(message)),\n  last(), // return last (completed) message to caller\n  catchError(this.handleError(file))\n);\n\n</code-example>\n<p>The <code>getEventMessage</code> method interprets each type of <code><a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a></code> in the event stream.</p>\n<code-example header=\"app/uploader/uploader.service.ts (getEventMessage)\" path=\"http/src/app/uploader/uploader.service.ts\" region=\"getEventMessage\">\n/** Return distinct message for sent, upload progress, &#x26; response events */\nprivate getEventMessage(event: <a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>, file: File) {\n  switch (event.type) {\n    case <a href=\"api/common/http/HttpEventType#Sent\" class=\"code-anchor\">HttpEventType.Sent</a>:\n      return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n    case <a href=\"api/common/http/HttpEventType#UploadProgress\" class=\"code-anchor\">HttpEventType.UploadProgress</a>:\n      // Compute and show the % done:\n      const percentDone = event.total ? Math.round(100 * event.loaded / event.total) : 0;\n      return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n    case <a href=\"api/common/http/HttpEventType#Response\" class=\"code-anchor\">HttpEventType.Response</a>:\n      return `File \"${file.name}\" was completely uploaded!`;\n\n    default:\n      return `File \"${file.name}\" surprising upload event: ${event.type}.`;\n  }\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The sample app for this guide doesn't have a server that accepts uploaded files.\nThe <code>UploadInterceptor</code> in <code>app/http-interceptors/upload-interceptor.ts</code> intercepts and short-circuits upload requests by returning an observable of simulated events.</p>\n</div>\n\n  <div class=\"reviewed\">Last reviewed on Mon Feb 27 2023</div>\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient#request\n - api/common/http/HttpEvent\n - api/common/http/HttpEventType#Response\n - api/common/http/HttpEventType#Sent\n - api/common/http/HttpEventType#UploadProgress\n - api/common/http/HttpRequest\n - guide/http-intercept-requests-and-responses#interceptor-events\n - guide/http-track-show-request-progress#http---track-and-show-request-progress\n - guide/http-track-show-request-progress#make-a-request\n - guide/http-track-show-request-progress#track-request-progress\n-->"
}