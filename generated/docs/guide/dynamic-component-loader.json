{
  "id": "guide/dynamic-component-loader",
  "title": "Dynamic component loader",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"dynamic-component-loader\">Dynamic component loader<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#dynamic-component-loader\"><i class=\"material-icons\">link</i></a></h1>\n<p>Component templates are not always fixed.\nAn application might need to load new components at runtime.\nThis cookbook shows you how to add components dynamically.</p>\n<p>See the <live-example name=\"dynamic-component-loader\"></live-example> of the code in this cookbook.</p>\n<p><a id=\"dynamic-loading\"></a></p>\n<h2 id=\"rendering-components-dynamically\">Rendering components dynamically<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#rendering-components-dynamically\"><i class=\"material-icons\">link</i></a></h2>\n<p>The following example shows how to build a dynamic ad banner.</p>\n<p>The hero agency is planning an ad campaign with several different ads cycling through the banner.\nNew ad components are added frequently by several different teams.\nThis makes it impractical to use a template with a static component structure.</p>\n<p>Instead, you need a way to load a new component without a fixed reference to the component in the ad banner's template.</p>\n<p>The <code><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">NgComponentOutlet</a></code> directive can be used to instantiate components and insert them into the current view. This directive allows you to provide a component class that should be rendered, as well as component inputs to be used during initialization.</p>\n<code-example header=\"src/app/ad-banner.component.ts\" path=\"dynamic-component-loader/src/app/ad-banner.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-ad-banner',\n  standalone: true,\n  imports: [<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">NgComponentOutlet</a>, <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a>],\n  template: `\n    &#x3C;div class=\"ad-banner-example\">\n      &#x3C;h3>Advertisements&#x3C;/h3>\n      &#x3C;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"\n        currentAd.component;\n        inputs: currentAd.inputs;\n      \" />\n      &#x3C;button (click)=\"displayNextAd()\">Next&#x3C;/button>\n    &#x3C;/div>\n  `\n})\nexport class AdBannerComponent {\n  private adList = inject(AdService).getAds();\n\n  private currentAdIndex = 0;\n\n  get currentAd() {\n    return this.adList[this.currentAdIndex];\n  }\n\n  displayNextAd() {\n    this.currentAdIndex++;\n    // Reset the current ad index back to `0` when we reach the end of an array.\n    if (this.currentAdIndex === this.adList.length) {\n      this.currentAdIndex = 0;\n    }\n  }\n}\n\n</code-example>\n<p>The <code>AdBannerComponent</code> class injects the <code>AdService</code> service and requests a list of ads.\nThe \"current ad\" index is set to <code>0</code> initially to indicate that the first ad should be displayed.\nWhen a user clicks the \"Next\" button, the index is increased by one.\nOnce the index reaches the length of the ads array, the index is reset back to <code>0</code>.</p>\n<p>In the template, the <code>currentAd</code> getter is used to retrieve a current ad.\nIf the value changes, Angular picks it up and reflects the changes in the UI.</p>\n<h2 id=\"different-components-from-the-service\">Different components from the service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#different-components-from-the-service\"><i class=\"material-icons\">link</i></a></h2>\n<p>Components returned from the <code>AdService</code> service and used in <code><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">NgComponentOutlet</a></code> in the <code>AdBannerComponent</code> template can be different.\nAngular detects if a component class has changed and updates the UI accordingly.</p>\n<p>Here are two sample components and the service providing them with their inputs:</p>\n<code-tabs>\n    <code-pane header=\"hero-job-ad.component.ts\" path=\"dynamic-component-loader/src/app/hero-job-ad.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  template: `\n    &#x3C;div class=\"job-ad\">\n      &#x3C;h4>{{ headline }}&#x3C;/h4>\n      {{ body }}\n    &#x3C;/div>\n  `,\n})\nexport class HeroJobAdComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() headline!: string;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() body!: string;\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-profile.component.ts\" path=\"dynamic-component-loader/src/app/hero-profile.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  template: `\n    &#x3C;div class=\"hero-profile\">\n      &#x3C;h3>Featured Hero Profile&#x3C;/h3>\n      &#x3C;h4>{{ name }}&#x3C;/h4>\n      &#x3C;p>{{ bio }}&#x3C;/p>\n      &#x3C;strong>Hire this hero today!&#x3C;/strong>\n    &#x3C;/div>\n  `,\n})\nexport class HeroProfileComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() name!: string;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() bio!: string;\n}\n\n\n</code-pane>\n    <code-pane header=\"ad.service.ts\" path=\"dynamic-component-loader/src/app/ad.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>, <a href=\"api/core/Type\" class=\"code-anchor\">Type</a> } from '@angular/core';\nimport { HeroProfileComponent } from './hero-profile.component';\nimport { HeroJobAdComponent } from './hero-job-ad.component';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({ providedIn: 'root' })\nexport class AdService {\n  getAds() {\n    return [\n      {\n        component: HeroProfileComponent,\n        inputs: { name: 'Dr. IQ', bio: 'Smart as they come' },\n      },\n      {\n        component: HeroProfileComponent,\n        inputs: { name: 'Bombasto', bio: 'Brave as they come' },\n      },\n      {\n        component: HeroJobAdComponent,\n        inputs: {\n          headline: 'Hiring for several positions',\n          body: 'Submit your resume today!',\n        },\n      },\n      {\n        component: HeroJobAdComponent,\n        inputs: {\n          headline: 'Openings in all departments',\n          body: 'Apply today',\n        },\n      },\n    ] as {component: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;any>, inputs: Record&#x3C;string, unknown>}[];\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"final-ad-baner\"></a></p>\n<h2 id=\"final-ad-banner\">Final ad banner<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#final-ad-banner\"><i class=\"material-icons\">link</i></a></h2>\n<p>The final ad banner looks like this:</p>\n<div class=\"lightbox\">\n<img alt=\"Ads\" src=\"generated/images/guide/dynamic-component-loader/ads-example.gif\" width=\"480\" height=\"222\">\n</div>\n<p>See the <live-example name=\"dynamic-component-loader\"></live-example>.</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Tue Apr 18 2023</div>\n</div>\n\n<!-- links to this doc:\n - guide/elements\n - guide/example-apps-list\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/NgComponentOutlet\n - api/core/Component\n - api/core/Injectable\n - api/core/Input\n - api/core/Type\n - guide/dynamic-component-loader#different-components-from-the-service\n - guide/dynamic-component-loader#dynamic-component-loader\n - guide/dynamic-component-loader#final-ad-banner\n - guide/dynamic-component-loader#rendering-components-dynamically\n-->"
}