{
  "id": "guide/glossary",
  "title": "Glossary",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"glossary\">Glossary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#glossary\"><i class=\"material-icons\">link</i></a></h1>\n<p>Angular has its own vocabulary.\nMost Angular terms are common English words or computing terms that have a specific meaning within the Angular system.</p>\n<p>This glossary lists the most prominent terms and a few less familiar ones with unusual or unexpected definitions.</p>\n<p><a href=\"guide/glossary#ahead-of-time-aot-compilation\" title=\"A - Glossary | Angular\">A</a>\n<a href=\"guide/glossary#binding\" title=\"B - Glossary | Angular\">B</a>\n<a href=\"guide/glossary#case-types\" title=\"C - Glossary | Angular\">C</a>\n<a href=\"guide/glossary#data-binding\" title=\"D - Glossary | Angular\">D</a>\n<a href=\"guide/glossary#eager-loading\" title=\"E - Glossary | Angular\">E</a>\n<a href=\"guide/glossary#form-control\" title=\"F - Glossary | Angular\">F</a>\n<a href=\"guide/glossary#immutability\" title=\"G - Glossary | Angular\">G</a>\n<a href=\"guide/glossary#immutability\" title=\"H - Glossary | Angular\">H</a>\n<a href=\"guide/glossary#immutability\" title=\"I - Glossary | Angular\">I</a>\n<a href=\"guide/glossary#javascript\" title=\"J - Glossary | Angular\">J</a>\n<a href=\"guide/glossary#lazy-loading\" title=\"K - Glossary | Angular\">K</a>\n<a href=\"guide/glossary#lazy-loading\" title=\"L - Glossary | Angular\">L</a>\n<a href=\"guide/glossary#module\" title=\"M - Glossary | Angular\">M</a>\n<a href=\"guide/glossary#ngmodule\" title=\"N - Glossary | Angular\">N</a>\n<a href=\"guide/glossary#observable\" title=\"O - Glossary | Angular\">O</a>\n<a href=\"guide/glossary#pipe\" title=\"P - Glossary | Angular\">P</a>\n<a href=\"guide/glossary#reactive-forms\" title=\"Q - Glossary | Angular\">Q</a>\n<a href=\"guide/glossary#reactive-forms\" title=\"R - Glossary | Angular\">R</a>\n<a href=\"guide/glossary#schematic\" title=\"S - Glossary | Angular\">S</a>\n<a href=\"guide/glossary#target\" title=\"T - Glossary | Angular\">T</a>\n<a href=\"guide/glossary#unidirectional-data-flow\" title=\"U - Glossary | Angular\">U</a>\n<a href=\"guide/glossary#view\" title=\"V - Glossary | Angular\">V</a>\n<a href=\"guide/glossary#web-component\" title=\"W - Glossary | Angular\">W</a>\n<a href=\"guide/glossary#zone\" title=\"X - Glossary | Angular\">X</a>\n<a href=\"guide/glossary#zone\" title=\"Y - Glossary | Angular\">Y</a>\n<a href=\"guide/glossary#zone\" title=\"Z - Glossary | Angular\">Z</a></p>\n<!-- vale Angular.Google_Headings = NO -->\n<p><a id=\"aot\"></a></p>\n<h2 id=\"ahead-of-time-aot-compilation\">ahead-of-time (AOT) compilation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ahead-of-time-aot-compilation\"><i class=\"material-icons\">link</i></a></h2>\n<p>The Angular ahead-of-time (AOT) compiler converts Angular HTML and TypeScript code into efficient JavaScript code during the build phase. The build phase occurs before the browser downloads and runs the rendered code.\nThis is the best compilation mode for production environments, with decreased load time and increased performance compared to <a href=\"guide/glossary#just-in-time-jit-compilation\" title=\"just-in-time (JIT) compilation - Glossary | Angular\">just-in-time (JIT) compilation</a>.</p>\n<p>By compiling your application using the <code>ngc</code> command-line tool, you can bootstrap directly to a module factory, so you do not need to include the Angular compiler in your JavaScript bundle.</p>\n<h2 id=\"angular-element\">Angular element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#angular-element\"><i class=\"material-icons\">link</i></a></h2>\n<p>An Angular <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">component</a> packaged as a <a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">custom element</a>.</p>\n<p>Learn more in <a href=\"guide/elements\" title=\"Angular elements overview | Angular\">Angular Elements Overview</a>.</p>\n<h2 id=\"angular-package-format-apf\">Angular package format (APF)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#angular-package-format-apf\"><i class=\"material-icons\">link</i></a></h2>\n<p>An Angular specific specification for layout of npm packages that is used by all first-party Angular packages, and most third-party Angular libraries.</p>\n<p>Learn more in the <a href=\"guide/angular-package-format\" title=\"Angular Package Format | Angular\">Angular Package Format specification</a>.</p>\n<h2 id=\"annotation\">annotation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#annotation\"><i class=\"material-icons\">link</i></a></h2>\n<p>A structure that provides metadata for a class.\nTo learn more, see <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a>.</p>\n<h2 id=\"app-shell\">app-shell<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#app-shell\"><i class=\"material-icons\">link</i></a></h2>\n<p>App shell is a way to render a portion of your application using a route at build time.\nThis gives users a meaningful first paint of your application that appears quickly because the browser can render static HTML and CSS without the need to initialize JavaScript.\nTo learn more, see <a href=\"https://developers.google.com/web/fundamentals/architecture/app-shell\" title=\"The App Shell Model | Web Fundamentals | Google Developers\">The App Shell Model</a>.</p>\n<p>You can use the Angular CLI to <a href=\"cli/generate#app-shell\" title=\"app-shell - ng generate | CLI | Angular\">generate</a> an app shell.\nThis can improve the user experience by quickly launching a static rendered page while the browser downloads the full client version and switches to it automatically after the code loads.\nA static rendered page is a skeleton common to all pages.\nTo learn more, see <a href=\"guide/service-worker-intro\" title=\"Angular service worker introduction | Angular\">Service Worker and PWA</a>.</p>\n<h2 id=\"architect\">Architect<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#architect\"><i class=\"material-icons\">link</i></a></h2>\n<p>The tool that the Angular CLI uses to perform complex tasks such as compilation and test running, according to a provided configuration.\nArchitect is a shell that runs a <a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">builder</a> with a given <a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">target configuration</a>.\nThe <a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">builder</a> is defined in an <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm package</a>.</p>\n<p>In the <a href=\"guide/workspace-config#project-tool-configuration-options\" title=\"Project tool configuration options - Angular workspace configuration | Angular\">workspace configuration file</a>, an \"architect\" section provides configuration options for Architect builders.</p>\n<p>For example, a built-in builder for linting is defined in the package <code>@angular-devkit/build_angular:tslint</code>, which uses the <a href=\"https://palantir.github.io/tslint\" title=\"TSLint | Palantir | GitHub\">TSLint</a> tool to perform linting, with a configuration specified in a <code>tslint.json</code> file.</p>\n<p>Use the <a href=\"cli/run\" title=\"ng run | CLI | Angular\"><code>ng run</code></a> Angular CLI command to invoke a builder by specifying a <a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">target configuration</a> associated with that builder.\nIntegrators can add builders to enable tools and workflows to run through the Angular CLI.\nFor example, a custom builder can replace the third-party tools used by the built-in implementations for Angular CLI commands, such as <code>ng build</code> or <code>ng test</code>.</p>\n<h2 id=\"attribute-directive\">attribute directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#attribute-directive\"><i class=\"material-icons\">link</i></a></h2>\n<p>A category of <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directive</a> that can listen to and modify the behavior of other HTML elements, attributes, properties, and components.\nThey are usually represented as HTML attributes, hence the name.</p>\n<p>Learn more in <a href=\"guide/attribute-directives\" title=\"Attribute directives | Angular\">Attribute Directives</a>.</p>\n<h2 id=\"binding\">binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#binding\"><i class=\"material-icons\">link</i></a></h2>\n<p>Generally, the practice of setting a variable or property to a data value.\nWithin Angular, typically refers to <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">data binding</a>, which coordinates DOM object properties with data object properties.</p>\n<p>Sometimes refers to a <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">dependency-injection</a> binding between a <a href=\"guide/glossary#token\" title=\"token - Glossary | Angular\">token</a> and a dependency <a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">provider</a>.</p>\n<h2 id=\"bootstrap\">bootstrap<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#bootstrap\"><i class=\"material-icons\">link</i></a></h2>\n<p>A way to initialize and launch an application or system.</p>\n<p>In Angular, the <code>AppModule</code> root NgModule of an application has a <code>bootstrap</code> property that identifies the top-level <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">components</a> of the application.\nDuring the bootstrap process, Angular creates and inserts these components into the <code>index.html</code> host web page.\nYou can bootstrap multiple applications in the same <code>index.html</code>.\nEach application contains its own components.</p>\n<p>Learn more in <a href=\"guide/bootstrapping\" title=\"Launching your app with a root module | Angular\">Bootstrapping</a>.</p>\n<h2 id=\"builder\">builder<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#builder\"><i class=\"material-icons\">link</i></a></h2>\n<p>A function that uses the <a href=\"guide/glossary#architect\" title=\"Architect - Glossary | Angular\">Architect</a> API to perform a complex process such as <code>build</code> or <code>test</code>.\nThe builder code is defined in an <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm package</a>.</p>\n<p>For example, <a href=\"https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/browser\" title=\"packages/angular_devkit/build_angular/src/builders/browser | angular/angular-cli | GitHub\">BrowserBuilder</a> runs a <a href=\"https://webpack.js.org\" title=\"webpack | JS.ORG\">webpack</a> build for a browser target and <a href=\"https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/karma\" title=\"packages/angular_devkit/build_angular/src/builders/karma | angular/angular-cli | GitHub\">KarmaBuilder</a> starts the Karma server and runs a webpack build for unit tests.</p>\n<p>The <a href=\"cli/run\" title=\"ng run | CLI | Angular\"><code>ng run</code></a> Angular CLI command invokes a builder with a specific <a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">target configuration</a>.\nThe <a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">workspace configuration</a> file, <code>angular.json</code>, contains default configurations for built-in builders.</p>\n<p><a id=\"camelcase\"></a></p>\n<p><a id=\"case-conventions\"></a>\n<a id=\"dash-case\"></a></p>\n<h2 id=\"case-types\">case types<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#case-types\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular uses capitalization conventions to distinguish the names of various types, as described in the <a href=\"guide/styleguide#02-01\" title=\"Style 02-01 - Angular coding style guide | Angular\">naming guidelines section</a> of the Style Guide.\nHere is a summary of the case types:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">Details</th>\n<th align=\"left\">example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">camelCase</td>\n<td align=\"left\">Symbols, properties, methods, pipe names, non-component directive selectors, constants. <br> Standard or lower camel case uses lowercase on the first letter of the item.</td>\n<td align=\"left\"><code>selectedHero</code></td>\n</tr>\n<tr>\n<td align=\"left\">UpperCamelCase <br> PascalCase</td>\n<td align=\"left\">Class names, including classes that define components, interfaces, NgModules, directives, and pipes. <br> Upper camel case uses uppercase on the first letter of the item.</td>\n<td align=\"left\"><code>HeroComponent</code></td>\n</tr>\n<tr>\n<td align=\"left\">dash-case <br> kebab-case</td>\n<td align=\"left\">Descriptive part of file names, component selectors.</td>\n<td align=\"left\"><code>app-hero-list</code></td>\n</tr>\n<tr>\n<td align=\"left\">underscore_case <br> snake_case</td>\n<td align=\"left\">Not typically used in Angular. <br> Snake case uses words connected with underscores.</td>\n<td align=\"left\"><code>convert_link_mode</code></td>\n</tr>\n<tr>\n<td align=\"left\">UPPER_UNDERSCORE_CASE <br> UPPER_SNAKE_CASE <br> SCREAMING_SNAKE_CASE</td>\n<td align=\"left\">Traditional for constants. <br> This case is acceptable, but camelCase is preferred. <br> Upper snake case uses words in all capital letters connected with underscores.</td>\n<td align=\"left\"><code>FIX_ME</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"change-detection\">change detection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#change-detection\"><i class=\"material-icons\">link</i></a></h2>\n<p>The mechanism by which the Angular framework synchronizes the state of the UI of an application with the state of the data.\nThe change detector checks the current state of the data model whenever it runs, and maintains it as the previous state to compare on the next iteration.</p>\n<p>As the application logic updates component data, values that are bound to DOM properties in the view can change.\nThe change detector is responsible for updating the view to reflect the current data model.\nSimilarly, the user can interact with the UI, causing events that change the state of the data model.\nThese events can trigger change detection.</p>\n<p>Using the default change-detection strategy, the change detector goes through the <a href=\"guide/glossary#view-hierarchy\" title=\"view hierarchy - Glossary | Angular\">view hierarchy</a> on each VM turn to check every <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">data-bound property</a> in the template.\nIn the first phase, it compares the current state of the dependent data with the previous state, and collects changes.\nIn the second phase, it updates the page DOM to reflect any new data values.</p>\n<p>If you set the <code>OnPush</code> change-detection strategy, the change detector runs only when <a href=\"api/core/ChangeDetectorRef\" title=\"ChangeDetectorRef | @angular/core - API | Angular\">explicitly invoked</a>, or when it is triggered by an <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> reference change or event handler.\nThis typically improves performance.\nTo learn more, see <a href=\"https://web.dev/faster-angular-change-detection\" title=\"Optimize Angular&#x27;s change detection | web.dev\">Optimize the change detection in Angular</a>.</p>\n<p><a id=\"decorator\"></a></p>\n<h2 id=\"class-decorator\">class decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#class-decorator\"><i class=\"material-icons\">link</i></a></h2>\n<p>A <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a> that appears immediately before a class definition, which declares the class to be of the given type, and provides metadata suitable to the type.</p>\n<p>The following decorators can declare Angular class types.</p>\n<ul>\n<li><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code></li>\n<li><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code></li>\n<li><code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>()</code></li>\n<li><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code></li>\n<li><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code></li>\n</ul>\n<h2 id=\"class-field-decorator\">class field decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#class-field-decorator\"><i class=\"material-icons\">link</i></a></h2>\n<p>A <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a> statement immediately before a field in a class definition that declares the type of that field.\nSome examples are <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code>.</p>\n<h2 id=\"collection\">collection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#collection\"><i class=\"material-icons\">link</i></a></h2>\n<p>In Angular, a set of related <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematics</a> collected in an <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm package</a>.</p>\n<p><a id=\"cli\"></a></p>\n<h2 id=\"command-line-interface-cli\">command-line interface (CLI)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#command-line-interface-cli\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">Angular CLI</a> is a command-line tool for managing the Angular development cycle.\nUse it to create the initial filesystem scaffolding for a <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">workspace</a> or <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">project</a>, and to run <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematics</a> that add and modify code for initial generic versions of various elements.\nThe Angular CLI supports all stages of the development cycle, including building, testing, bundling, and deployment.</p>\n<ul>\n<li>To begin using the Angular CLI for a new project, see <a href=\"guide/setup-local\" title=\"Setting up the local environment and workspace | Angular\">Local Environment Setup</a>.</li>\n<li>To learn more about the full capabilities of the Angular CLI, see the <a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">Angular CLI command reference</a>.</li>\n</ul>\n<p>See also <a href=\"guide/glossary#schematics-cli\" title=\"Schematics CLI - Glossary | Angular\">Schematics CLI</a>.</p>\n<h2 id=\"component\">component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#component\"><i class=\"material-icons\">link</i></a></h2>\n<p>A class with the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a> that associates it with a companion <a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">template</a>.\nTogether, the component class and template define a <a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">view</a>.\nA component is a special type of <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directive</a>.\nThe <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator extends the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> decorator with template-oriented features.</p>\n<p>An Angular component class is responsible for exposing data and handling most of the display and user-interaction logic of the view through <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">data binding</a>.</p>\n<p>Read more about component classes, templates, and views in <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">Introduction to Angular concepts</a>.</p>\n<h2 id=\"configuration\">configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#configuration\"><i class=\"material-icons\">link</i></a></h2>\n<p>See <a href=\"guide/glossary#workspace-configuration\" title=\"workspace configuration - Glossary | Angular\">workspace configuration</a></p>\n<h2 id=\"content-projection\">content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<p>A way to insert DOM content from outside a component into the view of the component in a designated spot.</p>\n<p>To learn more, see <a href=\"guide/lifecycle-hooks#responding-to-projected-content-changes\" title=\"Responding to projected content changes - Lifecycle Hooks | Angular\">Responding to changes in content</a>.</p>\n<h2 id=\"custom-element\">custom element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#custom-element\"><i class=\"material-icons\">link</i></a></h2>\n<p>A web platform feature, currently supported by most browsers and available in other browsers through polyfills.\nSee <a href=\"guide/browser-support\" title=\"Browser support | Angular\">Browser support</a>.</p>\n<p>The custom element feature extends HTML by allowing you to define a tag whose content is created and controlled by JavaScript code.\nA custom element is recognized by a browser when it is added to the <a href=\"https://developer.mozilla.org/docs/Web/API/CustomElementRegistry\" title=\"CustomElementRegistry | MDN\">CustomElementRegistry</a>.\nA custom element is also referenced as a <em>web component</em>.</p>\n<p>You can use the API to transform an Angular component so that it can be registered with the browser and used in any HTML that you add directly to the DOM within an Angular application.\nThe custom element tag inserts the view of the component, with change-detection and data-binding functionality, into content that would otherwise be displayed without Angular processing.\nSee <a href=\"guide/glossary#angular-element\" title=\"Angular element - Glossary | Angular\">Angular element</a>.\nSee also <a href=\"guide/glossary#dynamic-component-loading\" title=\"dynamic component loading - Glossary | Angular\">dynamic component loading</a>.</p>\n<h2 id=\"data-binding\">data binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#data-binding\"><i class=\"material-icons\">link</i></a></h2>\n<p>A process that allows applications to display data values to a user and respond to user actions.\nUser actions include clicks, touches, keystrokes, and so on.</p>\n<p>In data binding, you declare the relationship between an HTML widget and a data source and let the framework handle the details.\nData binding is an alternative to manually pushing application data values into HTML, attaching event listeners, pulling changed values from the screen, and updating application data values.</p>\n<p>Read about the following forms of binding of the <a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">Template Syntax</a> in Angular:</p>\n<ul>\n<li><a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">Interpolation</a></li>\n<li><a href=\"guide/property-binding\" title=\"Property binding | Angular\">Property binding</a></li>\n<li><a href=\"guide/event-binding\" title=\"Event binding | Angular\">Event binding</a></li>\n<li><a href=\"guide/attribute-binding\" title=\"Attribute binding | Angular\">Attribute binding</a></li>\n<li><a href=\"guide/class-binding\" title=\"Class and style binding | Angular\">Class and style binding</a></li>\n<li><a href=\"guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\" title=\"Displaying and updating properties with ngModel - Built-in directives | Angular\">Two-way data binding with ngModel</a></li>\n</ul>\n<h2 id=\"declarable\">declarable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#declarable\"><i class=\"material-icons\">link</i></a></h2>\n<p>A class that you can add to the <code>declarations</code> list of an <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a>.\nYou can declare <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">components</a>, <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directives</a>, and <a href=\"guide/glossary#pipe\" title=\"pipe - Glossary | Angular\">pipes</a>, unless they have the <code>standalone</code> flag in their decorators set to <code>true</code>, which makes them standalone. Note: standalone components/directives/pipes are <strong>not</strong> declarables. More info about standalone classes can be found <a href=\"guide/glossary#standalone\" title=\"standalone - Glossary | Angular\">below</a>.</p>\n<p>Do not declare the following:</p>\n<ul>\n<li>A class already declared as <a href=\"guide/glossary#standalone\" title=\"standalone - Glossary | Angular\">standalone</a>.</li>\n<li>A class that is already declared in another NgModule.</li>\n<li>An array of directives imported from another package.\nFor example, do not declare <code>FORMS_DIRECTIVES</code> from <code>@angular/forms</code>.</li>\n<li>NgModule classes.</li>\n<li>Service classes.</li>\n<li>Non-Angular classes and objects, such as strings, numbers, functions, entity models, configurations, business logic, and helper classes.</li>\n</ul>\n<p>Note that declarables can also be declared as standalone and simply be imported inside other standalone components or existing NgModules, to learn more, see the <a href=\"guide/standalone-components\" title=\"Getting started with standalone components | Angular\">Standalone components guide</a>.</p>\n<h2 id=\"decorator--decoration\">decorator | decoration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#decorator--decoration\"><i class=\"material-icons\">link</i></a></h2>\n<p>A function that modifies a class or property definition.\nDecorators are an experimental (stage 3) <a href=\"https://github.com/tc39/proposal-decorators\" title=\"tc39/proposal-decorators | GitHub\">JavaScript language feature</a>.\nA decorator is also referenced as an <em>annotation</em>.\nTypeScript adds support for decorators.</p>\n<p>Angular defines decorators that attach metadata to classes or properties so that it knows what those classes or properties mean and how they should work.</p>\n<p>To learn more, see <a href=\"guide/glossary#class-decorator\" title=\"class decorator - Glossary | Angular\">class decorator</a>.\nSee also <a href=\"guide/glossary#class-field-decorator\" title=\"class field decorator - Glossary | Angular\">class field decorator</a>.</p>\n<h2 id=\"dependency-injection-di\">dependency injection (DI)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#dependency-injection-di\"><i class=\"material-icons\">link</i></a></h2>\n<p>A design pattern and mechanism for creating and delivering some parts of an application (dependencies) to other parts of an application that require them.</p>\n<p>In Angular, dependencies are typically services, but they also can be values, such as strings or functions.\nAn <a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">injector</a> for an application (created automatically during bootstrap) instantiates dependencies when needed, using a configured <a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">provider</a> of the service or value.\nLearn more in <a href=\"guide/dependency-injection\" title=\"Dependency injection in Angular | Angular\">Dependency Injection in Angular</a>.</p>\n<h2 id=\"di-token\">DI token<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#di-token\"><i class=\"material-icons\">link</i></a></h2>\n<p>A lookup token associated with a dependency <a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">provider</a>, for use with the <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">dependency injection</a> system.</p>\n<h2 id=\"directive\">directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#directive\"><i class=\"material-icons\">link</i></a></h2>\n<p>A class that can modify the structure of the DOM or modify attributes in the DOM and component data model.\nA directive class definition is immediately preceded by a <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a> that supplies metadata.</p>\n<p>A directive class is usually associated with an HTML element or attribute, and that element or attribute is often referred to as the directive itself.\nWhen Angular finds a directive in an HTML <a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">template</a>, it creates the matching directive class instance and gives the instance control over that portion of the browser DOM.</p>\n<p>Angular has three categories of directive:</p>\n<ul>\n<li>\n<p><a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">Components</a> use <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> to associate a template with a class.\n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> is an extension of <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code>.</p>\n</li>\n<li>\n<p><a href=\"guide/glossary#attribute-directive\" title=\"attribute directive - Glossary | Angular\">Attribute directives</a> modify behavior and appearance of page elements.</p>\n</li>\n<li>\n<p><a href=\"guide/glossary#structural-directive\" title=\"structural directive - Glossary | Angular\">Structural directives</a> modify the structure of the DOM.</p>\n</li>\n</ul>\n<p>Angular supplies a number of built-in directives that begin with the <code>ng</code> prefix.\nYou can also create new directives to implement your own functionality.\nYou associate a <em>selector</em> with a custom directive; this extends the <a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">template syntax</a> that you can use in your applications.\nA <em>selector</em> is an HTML tag, such as <code>&#x3C;my-directive></code>.</p>\n<p><strong>UpperCamelCase</strong>, such as <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>, refers to a directive class.\nYou can use <strong>UpperCamelCase</strong> when describing properties and directive behavior.</p>\n<p><strong>lowerCamelCase</strong>, such as <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> refers to the attribute name of a directive.\nYou can use <strong>lowerCamelCase</strong> when describing how to apply the directive to an element in the HTML template.</p>\n<h2 id=\"domain-specific-language-dsl\">domain-specific language (DSL)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#domain-specific-language-dsl\"><i class=\"material-icons\">link</i></a></h2>\n<p>A special-purpose library or API.\nTo learn more, see <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\" title=\"Domain-specific language | Wikipedia\">Domain-specific language</a>.\nAngular extends TypeScript with domain-specific languages for a number of domains relevant to Angular applications, defined in NgModules such as <a href=\"guide/animations\" title=\"Introduction to Angular animations | Angular\">animations</a>, <a href=\"guide/forms\" title=\"Building a template-driven form | Angular\">forms</a>, and <a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">routing and navigation</a>.</p>\n<h2 id=\"dynamic-component-loading\">dynamic component loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#dynamic-component-loading\"><i class=\"material-icons\">link</i></a></h2>\n<p>A technique for adding a component to the DOM at run time.\nRequires that you exclude the component from compilation and then connect it to the change-detection and event-handling framework of Angular when you add it to the DOM.</p>\n<p>See also <a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">custom element</a>, which provides an easier path with the same result.</p>\n<h2 id=\"eager-loading\">eager loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#eager-loading\"><i class=\"material-icons\">link</i></a></h2>\n<p>NgModules or components that are loaded on launch are referenced as eager-loaded, to distinguish them from those that are loaded at run time that are referenced as lazy-loaded.\nSee also <a href=\"guide/glossary#lazy-loading\" title=\"lazy loading - Glossary | Angular\">lazy loading</a>.</p>\n<h2 id=\"ecmascript\">ECMAScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ecmascript\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <a href=\"https://en.wikipedia.org/wiki/ECMAScript\" title=\"ECMAScript | Wikipedia\">official JavaScript language specification</a>.</p>\n<p>Not all browsers support the latest ECMAScript standard, but you can use a <a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">transpiler</a> to write code using the latest features, which will then be transpiled to code that runs on versions that are supported by browsers.\nAn example of a <a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">transpiler</a> is <a href=\"guide/glossary#typescript\" title=\"TypeScript - Glossary | Angular\">TypeScript</a>.\nTo learn more, see <a href=\"guide/browser-support\" title=\"Browser support | Angular\">Browser Support</a>.</p>\n<h2 id=\"element\">element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#element\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular defines an <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> class to wrap render-specific native UI elements.\nIn most cases, this allows you to use Angular templates and data binding to access DOM elements without reference to the native element.</p>\n<p>The documentation generally refers to <em>elements</em> as distinct from <em>DOM elements</em>.\n<em>Elements</em> are instances of a <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> class.\n<em>DOM elements</em> are able to be accessed directly, if necessary.</p>\n<p>To learn more, see also <a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">custom element</a>.</p>\n<h2 id=\"entry-point\">entry point<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#entry-point\"><i class=\"material-icons\">link</i></a></h2>\n<p>A <a href=\"guide/glossary#module\" title=\"module - Glossary | Angular\">JavaScript module</a> that is intended to be imported by a user of an <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">npm package</a>.\nAn entry-point module typically re-exports symbols from other internal modules.\nA package can contain multiple entry points.\nFor example, the <code>@angular/core</code> package has two entry-point modules, which can be imported using the module names <code>@angular/core</code> and <code>@angular/core/testing</code>.</p>\n<h2 id=\"form-control\">form control<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-control\"><i class=\"material-icons\">link</i></a></h2>\n<p>An instance of <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>, which is a fundamental building block for Angular forms.\nTogether with <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> and <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>, tracks the value, validation, and status of a form input element.</p>\n<p>Read more forms in the <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Introduction to forms in Angular</a>.</p>\n<h2 id=\"form-model\">form model<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-model\"><i class=\"material-icons\">link</i></a></h2>\n<p>The \"source of truth\" for the value and validation status of a form input element at a given point in time.\nWhen using <a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">reactive forms</a>, the form model is created explicitly in the component class.\nWhen using <a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">template-driven forms</a>, the form model is implicitly created by directives.</p>\n<p>Learn more about reactive and template-driven forms in the <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Introduction to forms in Angular</a>.</p>\n<h2 id=\"form-validation\">form validation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-validation\"><i class=\"material-icons\">link</i></a></h2>\n<p>A check that runs when form values change and reports whether the given values are correct and complete, according to the defined constraints.\nReactive forms apply <a href=\"guide/form-validation#adding-custom-validators-to-reactive-forms\" title=\"Adding custom validators to reactive forms - Validating form input | Angular\">validator functions</a>.\nTemplate-driven forms use <a href=\"guide/form-validation#adding-custom-validators-to-template-driven-forms\" title=\"Adding custom validators to template-driven forms - Validating form input | Angular\">validator directives</a>.</p>\n<p>To learn more, see <a href=\"guide/form-validation\" title=\"Validating form input | Angular\">Form Validation</a>.</p>\n<h2 id=\"immutability\">immutability<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#immutability\"><i class=\"material-icons\">link</i></a></h2>\n<p>The inability to alter the state of a value after its creation.\n<a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">Reactive forms</a> perform immutable changes in that each change to the data model produces a new data model rather than modifying the existing one.\n<a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">Template-driven forms</a> perform mutable changes with <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> and <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">two-way data binding</a> to modify the existing data model in place.</p>\n<h2 id=\"injectable\">injectable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#injectable\"><i class=\"material-icons\">link</i></a></h2>\n<p>An Angular class or other definition that provides a dependency using the <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">dependency injection</a> mechanism.\nAn injectable <a href=\"guide/glossary#service\" title=\"service - Glossary | Angular\">service</a> class must be marked by the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a>.\nOther items, such as constant values, can also be injectable.</p>\n<h2 id=\"injector\">injector<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#injector\"><i class=\"material-icons\">link</i></a></h2>\n<p>An object in the Angular <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">dependency-injection</a> system that can find a named dependency in its cache or create a dependency using a configured <a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">provider</a>.\nInjectors are created for NgModules automatically as part of the bootstrap process and are inherited through the component hierarchy.</p>\n<ul>\n<li>An injector provides a singleton instance of a dependency, and can inject this same instance in multiple components.</li>\n<li>A hierarchy of injectors at the NgModule and component level can provide different instances of a dependency to their own components and child components.</li>\n<li>You can configure injectors with different providers that can provide different implementations of the same dependency.</li>\n</ul>\n<p>Learn more about the injector hierarchy in <a href=\"guide/hierarchical-dependency-injection\" title=\"Hierarchical injectors | Angular\">Hierarchical Dependency Injectors</a>.</p>\n<h2 id=\"input\">input<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#input\"><i class=\"material-icons\">link</i></a></h2>\n<p>When defining a <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directive</a>, the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator on a directive property makes that property available as a <em>target</em> of a <a href=\"guide/property-binding\" title=\"Property binding | Angular\">property binding</a>.\nData values flow into an input property from the data source identified in the <a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">template expression</a> to the right of the equal sign.</p>\n<p>To learn more, see <a href=\"guide/inputs-outputs\" title=\"Sharing data between child and parent directives and components | Angular\"><code>@Input()</code> and <code>@Output()</code> decorator functions</a>.</p>\n<h2 id=\"interpolation\">interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#interpolation\"><i class=\"material-icons\">link</i></a></h2>\n<p>A form of property <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">data binding</a> in which a <a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">template expression</a> between double-curly braces renders as text.\nThat text can be concatenated with neighboring text before it is assigned to an element property or displayed between element tags, as in this example.</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;label>My current hero is {{hero.name}}&#x3C;/label>\n\n</code-example>\n<p>Read more in the <a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">Interpolation</a> guide.</p>\n<h2 id=\"ivy\">Ivy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ivy\"><i class=\"material-icons\">link</i></a></h2>\n<p>Ivy is the historical code name for the current <a href=\"https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7\" title=\"A plan for version 8.0 and Ivy | Angular Blog\">compilation and rendering pipeline</a> in Angular.\nIt is now the only supported engine, so everything uses Ivy.</p>\n<h2 id=\"javascript\">JavaScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#javascript\"><i class=\"material-icons\">link</i></a></h2>\n<p>To learn more, see <a href=\"guide/glossary#ecmascript\" title=\"ECMAScript - Glossary | Angular\">ECMAScript</a>.\nTo learn more, see also <a href=\"guide/glossary#typescript\" title=\"TypeScript - Glossary | Angular\">TypeScript</a>.</p>\n<p><a id=\"jit\"></a></p>\n<h2 id=\"just-in-time-jit-compilation\">just-in-time (JIT) compilation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#just-in-time-jit-compilation\"><i class=\"material-icons\">link</i></a></h2>\n<p>The Angular just-in-time (JIT) compiler converts your Angular HTML and TypeScript code into efficient JavaScript code at run time, as part of bootstrapping.</p>\n<p>JIT was the default compilation mode until Angular 8 (see <a href=\"https://angular.io/guide/aot-compiler#choosing-a-compiler\">Choosing a compiler</a> to learn more).\nJIT mode is strongly discouraged for production use because it results in large application payloads that hinder the bootstrap performance.</p>\n<p>Compare to <a href=\"guide/glossary#ahead-of-time-aot-compilation\" title=\"ahead-of-time (AOT) compilation - Glossary | Angular\">ahead-of-time (AOT) compilation</a>.</p>\n<h2 id=\"lazy-loading\">lazy loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#lazy-loading\"><i class=\"material-icons\">link</i></a></h2>\n<p>A process that speeds up application load time by splitting the application into multiple bundles and loading them on demand.\nFor example, dependencies can be lazy loaded as needed.\nThe example differs from <a href=\"guide/glossary#eager-loading\" title=\"eager loading - Glossary | Angular\">eager-loaded</a> modules that are required by the root module and are loaded on launch.</p>\n<p>The <a href=\"guide/glossary#router\" title=\"router - Glossary | Angular\">router</a> makes use of lazy loading to load child views only when the parent view is activated.\nSimilarly, you can build custom elements that can be loaded into an Angular application when needed.</p>\n<h2 id=\"library\">library<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#library\"><i class=\"material-icons\">link</i></a></h2>\n<p>In Angular, a <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">project</a> that provides functionality that can be included in other Angular applications.\nA library is not a complete Angular application and cannot run independently.</p>\n<p>To add re-usable Angular functionality to non-Angular web applications, use Angular <a href=\"guide/glossary#angular-element\" title=\"Angular element - Glossary | Angular\">custom elements</a>.</p>\n<ul>\n<li>Library developers can use the <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a> to <code>generate</code> scaffolding for a new library in an existing <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">workspace</a>, and can publish a library as an <code>npm</code> package.</li>\n<li>Application developers can use the <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a> to <code>add</code> a published library for use with an application in the same <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">workspace</a>.</li>\n</ul>\n<p>See also <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematic</a>.</p>\n<h2 id=\"lifecycle-hook\">lifecycle hook<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#lifecycle-hook\"><i class=\"material-icons\">link</i></a></h2>\n<p>An interface that allows you to tap into the lifecycle of <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directives</a> and <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">components</a> as they are created, updated, and destroyed.</p>\n<p>Each interface has a single hook method whose name is the interface name prefixed with <code>ng</code>.\nFor example, the <code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> interface has a hook method named <code>ngOnInit</code>.</p>\n<p>Angular runs these hook methods in the following order:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">hook method</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><code>ngOnChanges</code></td>\n<td align=\"left\">When an <a href=\"guide/glossary#input\" title=\"input - Glossary | Angular\">input</a> or <a href=\"guide/glossary#output\" title=\"output - Glossary | Angular\">output</a> binding value changes.</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><code>ngOnInit</code></td>\n<td align=\"left\">After the first <code>ngOnChanges</code>.</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><code>ngDoCheck</code></td>\n<td align=\"left\">Developer's custom change detection.</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><code>ngAfterContentInit</code></td>\n<td align=\"left\">After component content initialized.</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><code>ngAfterContentChecked</code></td>\n<td align=\"left\">After every check of component content.</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><code>ngAfterViewInit</code></td>\n<td align=\"left\">After the views of a component are initialized.</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><code>ngAfterViewChecked</code></td>\n<td align=\"left\">After every check of the views of a component.</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><code>ngOnDestroy</code></td>\n<td align=\"left\">Just before the directive is destroyed.</td>\n</tr>\n</tbody>\n</table>\n<p>To learn more, see <a href=\"guide/lifecycle-hooks\" title=\"Lifecycle Hooks | Angular\">Lifecycle Hooks</a>.</p>\n<h2 id=\"module\">module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#module\"><i class=\"material-icons\">link</i></a></h2>\n<p>In general, a module collects a block of code dedicated to a single purpose.\nAngular uses standard JavaScript modules and also defines an Angular module, <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.</p>\n<p>In JavaScript, or ECMAScript, each file is a module and all objects defined in the file belong to that module.\nObjects can be exported, making them public, and public objects can be imported for use by other modules.</p>\n<p>Angular ships as a collection of JavaScript modules.\nA collection of JavaScript modules are also referenced as a library.\nEach Angular library name begins with the <code>@angular</code> prefix.\nInstall Angular libraries with the <a href=\"https://docs.npmjs.com/about-npm\" title=\"About npm | npm\">npm package manager</a> and import parts of them with JavaScript <code>import</code> declarations.</p>\n<p>Compare to <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a>.</p>\n<h2 id=\"ngmodule\">NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ngmodule\"><i class=\"material-icons\">link</i></a></h2>\n<p>A class definition preceded by the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a>, which declares and serves as a manifest for a block of code dedicated to an application domain, a workflow, or a closely related set of capabilities.</p>\n<p>Like a <a href=\"guide/glossary#module\" title=\"module - Glossary | Angular\">JavaScript module</a>, an NgModule can export functionality for use by other NgModules and import public functionality from other NgModules.\nThe metadata for an NgModule class collects components, directives, and pipes that the application uses along with the list of imports and exports.\nSee also <a href=\"guide/glossary#declarable\" title=\"declarable - Glossary | Angular\">declarable</a>.</p>\n<p>NgModules are typically named after the file in which the exported thing is defined.\nFor example, the Angular <a href=\"api/common/DatePipe\" title=\"DatePipe | @angular/common - API | Angular\">DatePipe</a> class belongs to a feature module named <code>date_pipe</code> in the file <code>date_pipe.ts</code>.\nYou import them from an Angular <a href=\"guide/glossary#scoped-package\" title=\"scoped package - Glossary | Angular\">scoped package</a> such as <code>@angular/core</code>.</p>\n<p>Every Angular application has a root module.\nBy convention, the class is named <code>AppModule</code> and resides in a file named <code>app.module.ts</code>.</p>\n<p>To learn more, see <a href=\"guide/ngmodules\" title=\"NgModules | Angular\">NgModules</a>.</p>\n<h2 id=\"npm-package\">npm package<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#npm-package\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <a href=\"https://docs.npmjs.com/about-npm\" title=\"About npm | npm\">npm package manager</a> is used to distribute and load Angular modules and libraries.</p>\n<p>Learn more about how Angular uses <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">Npm Packages</a>.</p>\n<h2 id=\"ngc\">ngc<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ngc\"><i class=\"material-icons\">link</i></a></h2>\n<p><code>ngc</code> is a Typescript-to-Javascript transpiler that processes Angular decorators, metadata, and templates, and emits JavaScript code.\nThe most recent implementation is internally referred to as <code>ngtsc</code> because it is a minimalistic wrapper around the TypeScript compiler <code>tsc</code> that adds a transform for processing Angular code.</p>\n<h2 id=\"observable\">observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#observable\"><i class=\"material-icons\">link</i></a></h2>\n<p>A producer of multiple values, which it pushes to <a href=\"guide/glossary#subscriber\" title=\"subscriber - Glossary | Angular\">subscribers</a>.\nUsed for asynchronous event handling throughout Angular.\nYou execute an observable by subscribing to it with its <code>subscribe()</code> method, passing callbacks for notifications of new values, errors, or completion.</p>\n<p>Observables can deliver in one the following ways a single value or multiple values of any type to subscribers.</p>\n<ul>\n<li>Synchronously as a function delivers a value to the requester</li>\n<li>Scheduled</li>\n</ul>\n<p>A subscriber receives notification of new values as they are produced and notification of either normal completion or error completion.</p>\n<p>Angular uses a third-party library named <a href=\"https://rxjs.dev\" title=\"RxJS\">Reactive Extensions (RxJS)</a>.\nTo learn more, see <a href=\"guide/observables\" title=\"Using observables to pass values | Angular\">Observables</a>.</p>\n<h2 id=\"observer\">observer<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#observer\"><i class=\"material-icons\">link</i></a></h2>\n<p>An object passed to the <code>subscribe()</code> method for an <a href=\"guide/glossary#observable\" title=\"observable - Glossary | Angular\">observable</a>.\nThe object defines the callbacks for the <a href=\"guide/glossary#subscriber\" title=\"subscriber - Glossary | Angular\">subscriber</a>.</p>\n<h2 id=\"output\">output<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#output\"><i class=\"material-icons\">link</i></a></h2>\n<p>When defining a <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directive</a>, the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>{}</code> decorator on a directive property makes that property available as a <em>target</em> of <a href=\"guide/event-binding\" title=\"Event binding | Angular\">event binding</a>.\nEvents stream <em>out</em> of this property to the receiver identified in the <a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">template expression</a> to the right of the equal sign.</p>\n<p>To learn more, see <a href=\"guide/inputs-outputs\" title=\"Sharing data between child and parent directives and components | Angular\"><code>@Input()</code> and <code>@Output()</code> decorator functions</a>.</p>\n<h2 id=\"pipe\">pipe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#pipe\"><i class=\"material-icons\">link</i></a></h2>\n<p>A class which is preceded by the <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>{}</code> decorator and which defines a function that transforms input values to output values for display in a <a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">view</a>.\nAngular defines various pipes, and you can define new pipes.</p>\n<p>To learn more, see <a href=\"guide/pipes-overview\" title=\"Transforming Data Using Pipes | Angular\">Pipes</a>.</p>\n<h2 id=\"platform\">platform<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#platform\"><i class=\"material-icons\">link</i></a></h2>\n<p>In Angular terminology, a platform is the context in which an Angular application runs.\nThe most common platform for Angular applications is a web browser, but it can also be an operating system for a mobile device, or a web server.</p>\n<p>Support for the various Angular run-time platforms is provided by the <code>@angular/platform-*</code> packages.\nThese packages allow applications that make use of <code>@angular/core</code> and <code>@angular/common</code> to execute in different environments by providing implementation for gathering user input and rendering UIs for the given platform.\nIsolating platform-specific functionality allows the developer to make platform-independent use of the rest of the framework.</p>\n<ul>\n<li>\n<p>When running in a web browser, <a href=\"api/platform-browser/BrowserModule\" title=\"BrowserModule | @angular/platform-browser - API | Angular\"><code>BrowserModule</code></a> is imported from the <code>platform-browser</code> package, and supports services that simplify security and event processing, and allows applications to access browser-specific features, such as interpreting keyboard input and controlling the title of the document being displayed.\nAll applications running in the browser use the same platform service.</p>\n</li>\n<li>\n<p>When <a href=\"guide/glossary#server-side-rendering\" title=\"server-side rendering - Glossary | Angular\">server-side rendering (SSR)</a> is used, the <a href=\"api/platform-server\" title=\"@angular/platform-server | API | Angular\"><code>platform-server</code></a> package provides web server implementations of the <code>DOM</code>, <code>XMLHttpRequest</code>, and other low-level features that do not rely on a browser.</p>\n</li>\n</ul>\n<h2 id=\"polyfill\">polyfill<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#polyfill\"><i class=\"material-icons\">link</i></a></h2>\n<p>An <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">npm package</a> that plugs gaps in the JavaScript implementation of a browser.\nSee <a href=\"guide/browser-support\" title=\"Browser support | Angular\">Browser Support</a> for polyfills that support particular functionality for particular platforms.</p>\n<h2 id=\"project\">project<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#project\"><i class=\"material-icons\">link</i></a></h2>\n<p>In the Angular CLI, a standalone application or <a href=\"guide/glossary#library\" title=\"library - Glossary | Angular\">library</a> that can be created or modified by an Angular CLI command.</p>\n<p>A project, as generated by the <a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code></a>, contains the set of source files, resources, and configuration files that you need to develop and test the application using the Angular CLI.\nProjects can also be created with the <code>ng generate application</code> and <code>ng generate library</code> commands.</p>\n<p>To learn more, see <a href=\"guide/file-structure\" title=\"Workspace and project file structure | Angular\">Project File Structure</a>.</p>\n<p>The <a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\"><code>angular.json</code></a> file configures all projects in a <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">workspace</a>.</p>\n<h2 id=\"provider\">provider<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#provider\"><i class=\"material-icons\">link</i></a></h2>\n<p>An object that implements one of the <a href=\"api/core/Provider\" title=\"Provider | @angular/core - API | Angular\"><code>Provider</code></a> interfaces.\nA provider object defines how to obtain an injectable dependency associated with a <a href=\"guide/glossary#di-token\" title=\"DI token - Glossary | Angular\">DI token</a>.\nAn <a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">injector</a> uses the provider to create a new instance of a dependency for a class that requires it.</p>\n<p>Angular registers its own providers with every injector, for services that Angular defines.\nYou can register your own providers for services that your application needs.</p>\n<p>See also <a href=\"guide/glossary#service\" title=\"service - Glossary | Angular\">service</a>.\nSee also <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">dependency injection</a>.</p>\n<p>Learn more in <a href=\"guide/dependency-injection\" title=\"Dependency injection in Angular | Angular\">Dependency Injection</a>.</p>\n<h2 id=\"reactive-forms\">reactive forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#reactive-forms\"><i class=\"material-icons\">link</i></a></h2>\n<p>A framework for building Angular forms through code in a component.\nThe alternative is a <a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">template-driven form</a>.</p>\n<p>When using reactive forms:</p>\n<ul>\n<li>The \"source of truth\", the form model, is defined in the component class.</li>\n<li>Validation is set up through validation functions rather than validation directives.</li>\n<li>Each control is explicitly created in the component class by creating a <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> instance manually or with <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>.</li>\n<li>The template input elements do <em>not</em> use <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>.</li>\n<li>The associated Angular directives are prefixed with <code>form</code>, such as <code>formControl</code>, <code>formGroup</code>, and <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code>.</li>\n</ul>\n<p>The alternative is a template-driven form.\nFor an introduction and comparison of both forms approaches, see <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Introduction to Angular Forms</a>.</p>\n<h2 id=\"resolver\">resolver<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#resolver\"><i class=\"material-icons\">link</i></a></h2>\n<p>A class that implements the <a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\">Resolve</a> interface that you use to produce or retrieve data that is needed before navigation to a requested route can be completed.\nYou may use a function with the same signature as the <a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\">resolve()</a> method in place of the <a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\">Resolve</a> interface.\nResolvers run after all <a href=\"guide/glossary#route-guard\" title=\"route guard - Glossary | Angular\">route guards</a> for a route tree have been executed and have succeeded.</p>\n<p>See an example of using a <a href=\"guide/router-tutorial-toh#resolve-pre-fetching-component-data\" title=\"Resolve: pre-fetching component data - Router tutorial: tour of heroes | Angular\">resolve guard</a> to retrieve dynamic data.</p>\n<h2 id=\"route-guard\">route guard<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#route-guard\"><i class=\"material-icons\">link</i></a></h2>\n<p>A method that controls navigation to a requested route in a routing application.\nGuards determine whether a route can be activated or deactivated, and whether a lazy-loaded module can be loaded.</p>\n<p>Learn more in the <a href=\"guide/router#preventing-unauthorized-access\" title=\"Preventing unauthorized access - Common Routing Tasks | Angular\">Routing and Navigation</a> guide.</p>\n<h2 id=\"router\">router<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#router\"><i class=\"material-icons\">link</i></a></h2>\n<p>A tool that configures and implements navigation among states and <a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">views</a> within an Angular application.</p>\n<p>The <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> module is an <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a> that provides the necessary service providers and directives for navigating through application views.\nA <a href=\"guide/glossary#routing-component\" title=\"routing component - Glossary | Angular\">routing component</a> is one that imports the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> module and whose template contains a <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> element where it can display views produced by the router.</p>\n<p>The router defines navigation among views on a single page, as opposed to navigation among pages.\nIt interprets URL-like links to determine which views to create or destroy, and which components to load or unload.\nIt allows you to take advantage of <a href=\"guide/glossary#lazy-loading\" title=\"lazy loading - Glossary | Angular\">lazy loading</a> in your Angular applications.</p>\n<p>To learn more, see <a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">Routing and Navigation</a>.</p>\n<h2 id=\"router-outlet\">router outlet<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#router-outlet\"><i class=\"material-icons\">link</i></a></h2>\n<p>A <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directive</a> that acts as a placeholder in the template of a routing component.\nAngular dynamically renders the template based on the current router state.</p>\n<h2 id=\"routing-component\">routing component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#routing-component\"><i class=\"material-icons\">link</i></a></h2>\n<p>An Angular <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">component</a> with a <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> directive in its template that displays views based on router navigations.</p>\n<p>To learn more, see <a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">Routing and Navigation</a>.</p>\n<h2 id=\"rule\">rule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#rule\"><i class=\"material-icons\">link</i></a></h2>\n<p>In <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematics</a>, a function that operates on a <a href=\"guide/glossary#tree\" title=\"tree - Glossary | Angular\">file tree</a> to create, delete, or modify files in a specific manner.</p>\n<h2 id=\"schematic\">schematic<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#schematic\"><i class=\"material-icons\">link</i></a></h2>\n<p>A scaffolding library that defines how to generate or transform a programming project by creating, modifying, refactoring, or moving files and code.\nA schematic defines <a href=\"guide/glossary#rule\" title=\"rule - Glossary | Angular\">rules</a> that operate on a virtual file system referenced as a <a href=\"guide/glossary#tree\" title=\"tree - Glossary | Angular\">tree</a>.</p>\n<p>The <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a> uses schematics to generate and modify <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">Angular projects</a> and parts of projects.</p>\n<ul>\n<li>\n<p>Angular provides a set of schematics for use with the Angular CLI.\nSee the <a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">Angular CLI command reference</a>.\nThe <a href=\"cli/add\" title=\"ng add | CLI | Angular\"><code>ng add</code></a> Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> command runs schematics as part of adding a library to your project.\nThe <a href=\"cli/generate\" title=\"ng generate | CLI | Angular\"><code>ng generate</code></a> Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> command runs schematics to create applications, libraries, and Angular code constructs.</p>\n</li>\n<li>\n<p><a href=\"guide/glossary#library\" title=\"library - Glossary | Angular\">Library</a> developers can create schematics that enable the Angular CLI to add and update their published libraries, and to generate artifacts the library defines.\nAdd these schematics to the npm package that you use to publish and share your library.</p>\n</li>\n</ul>\n<p>To learn more, see <a href=\"guide/schematics\" title=\"Generating code using schematics | Angular\">Schematics</a>.\nTo learn more, see also <a href=\"guide/creating-libraries#integrating-with-the-cli-using-code-generation-schematics\" title=\"Integrating with the CLI using code-generation schematics - Creating libraries | Angular\">Integrating Libraries with the CLI</a>.</p>\n<h2 id=\"schematics-cli\">Schematics CLI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#schematics-cli\"><i class=\"material-icons\">link</i></a></h2>\n<p>Schematics come with their own command-line tool.\nUse Node 6.9 or above to install the Schematics CLI globally.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install -g @angular-devkit/schematics-cli\n\n</code-example>\n<p>This installs the <code>schematics</code> executable, which you can use to create a new schematics <a href=\"guide/glossary#collection\" title=\"collection - Glossary | Angular\">collection</a> with an initial named schematic.\nThe collection directory is a workspace for schematics.\nYou can also use the <code>schematics</code> command to add a new schematic to an existing collection, or extend an existing schematic.</p>\n<h2 id=\"scoped-package\">scoped package<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#scoped-package\"><i class=\"material-icons\">link</i></a></h2>\n<p>A way to group related <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">npm packages</a>.\nAngular objects are delivered from npm packages whose names begin with the Angular <em>scope name</em> <code>@angular</code>.\nFor example, <code>@angular/core</code>, <code>@angular/common</code>, <code>@angular/forms</code>, and <code>@angular/router</code>.</p>\n<p>Import a scoped package in the same way that you import a normal package.</p>\n<code-example path=\"architecture/src/app/app.component.ts\" header=\"architecture/src/app/app.component.ts (import)\" region=\"import\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n</code-example>\n<h2 id=\"server-side-rendering\">server-side rendering<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#server-side-rendering\"><i class=\"material-icons\">link</i></a></h2>\n<p>A technique that generates static application pages on the server, and can generate and serve those pages in response to requests from browsers.\nIt can also pre-generate pages as HTML files that you serve later.</p>\n<p>This technique can improve performance on mobile and low-powered devices and improve the user experience by showing a static first page quickly while the client-side application is loading.\nThe static version can also make your application more visible to web crawlers.</p>\n<p>You can easily prepare an application for server-side rendering by using the <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a>  <code>ng add @angular/ssr</code> command.</p>\n<h2 id=\"service\">service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#service\"><i class=\"material-icons\">link</i></a></h2>\n<p>In Angular, a class with the <a href=\"guide/glossary#injectable\" title=\"injectable - Glossary | Angular\">@Injectable()</a> decorator that encapsulates non-UI logic and code that can be reused across an application.\nAngular distinguishes components from services to increase modularity and reusability.</p>\n<p>The <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> metadata allows the service class to be used with the <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">dependency injection</a> mechanism.\nThe injectable class is instantiated by a <a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">provider</a>.\n<a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">Injectors</a> maintain lists of providers and use them to provide service instances when they are required by components or other services.</p>\n<p>To learn more, see <a href=\"guide/architecture-services\" title=\"Introduction to services and dependency injection | Angular\">Introduction to Services and Dependency Injection</a>.</p>\n<h2 id=\"standalone\">standalone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#standalone\"><i class=\"material-icons\">link</i></a></h2>\n<p>A configuration of <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">components</a>, <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directives</a>, and <a href=\"guide/glossary#pipe\" title=\"pipe - Glossary | Angular\">pipes</a> to indicate that this class can be imported directly without declaring it in any <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a>.</p>\n<p>Standalone components, directives, and pipes differ from non-standalone ones by:</p>\n<ul>\n<li>having the <code>standalone</code> field of their decorator set to <code>true</code>.</li>\n<li>allowing their direct importing without the need to pass through NgModules.</li>\n<li>specifying their dependencies directly in their decorator.</li>\n</ul>\n<p>To learn more, see the <a href=\"guide/standalone-components\" title=\"Getting started with standalone components | Angular\">Standalone components guide</a>.</p>\n<h2 id=\"structural-directive\">structural directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#structural-directive\"><i class=\"material-icons\">link</i></a></h2>\n<p>A category of <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directive</a> that is responsible for shaping HTML layout by modifying the DOM.\nModification of the DOM includes, adding, removing, or manipulating elements and the associated children.</p>\n<p>To learn more, see <a href=\"guide/structural-directives\" title=\"Structural directives | Angular\">Structural Directives</a>.</p>\n<h2 id=\"subscriber\">subscriber<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#subscriber\"><i class=\"material-icons\">link</i></a></h2>\n<p>A function that defines how to obtain or generate values or messages to be published.\nThis function is executed when a consumer runs the <code>subscribe()</code> method of an <a href=\"guide/glossary#observable\" title=\"observable - Glossary | Angular\">observable</a>.</p>\n<p>The act of subscribing to an observable triggers its execution, associates callbacks with it, and creates a <code>Subscription</code> object that lets you unsubscribe.</p>\n<p>The <code>subscribe()</code> method takes an <a href=\"guide/glossary#observer\" title=\"observer - Glossary | Angular\">observer</a> JavaScript object with up to three callbacks, one for each type of notification that an observable can deliver.</p>\n<ul>\n<li>The <code>next</code> notification sends a value such as a number, a string, or an object.</li>\n<li>The <code>error</code> notification sends a JavaScript Error or exception.</li>\n<li>The <code>complete</code> notification does not send a value, but the handler is run when the method completes.\nScheduled values can continue to be returned after the method completes.</li>\n</ul>\n<h2 id=\"target\">target<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#target\"><i class=\"material-icons\">link</i></a></h2>\n<p>A buildable or runnable subset of a <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">project</a>, configured as an object in the <a href=\"guide/workspace-config#project-tool-configuration-options\" title=\"Project tool configuration options - Angular workspace configuration | Angular\">workspace configuration file</a>, and executed by an <a href=\"guide/glossary#architect\" title=\"Architect - Glossary | Angular\">Architect</a> <a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">builder</a>.</p>\n<p>In the <code>angular.json</code> file, each project has an \"architect\" section that contains targets which configure builders.\nSome of these targets correspond to Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> command, such as <code>build</code>, <code>serve</code>, <code>test</code>, and <code>lint</code>.</p>\n<p>For example, the Architect builder invoked by the <code>ng build</code> command to compile a project uses a particular build tool, and has a default configuration with values that you can override on the command line.\nThe <code>build</code> target also defines an alternate configuration for a \"development\" build, which you can invoke with the <code>--configuration development</code> flag on the <code>build</code> command.</p>\n<p>The Architect tool provides a set of builders.\nThe <a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code></a> Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> command provides a set of targets for the initial application project.\nThe <a href=\"cli/generate#application\" title=\"application - ng generate | CLI | Angular\"><code>ng generate application</code></a> and <a href=\"cli/generate#library\" title=\"library - ng generate | CLI | Angular\"><code>ng generate library</code></a> Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> commands provide a set of targets for each new <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">project</a>.\nThese targets, their options and configurations, can be customized to meet the needs of your project.\nFor example, you may want to add a \"staging\" or \"testing\" configuration to the \"build\" target of a project.</p>\n<p>You can also define a custom builder, and add a target to the project configuration that uses your custom builder.\nYou can then run the target using the <a href=\"cli/run\" title=\"ng run | CLI | Angular\"><code>ng run</code></a> Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> command.</p>\n<h2 id=\"template\">template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template\"><i class=\"material-icons\">link</i></a></h2>\n<p>Code that defines how to render the <a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">view</a> of a component.</p>\n<p>A template combines straight HTML with Angular <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">data-binding</a> syntax, <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directives</a>, and <a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">template expressions</a> (logical constructs).\nThe Angular elements insert or calculate values that modify the HTML elements before the page is displayed.\nLearn more about Angular template language in the <a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">Template Syntax</a> guide.</p>\n<p>A template is associated with a <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">component class</a> through the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a>.\nThe template code can be provided inline, as the value of the <code>template</code> property, or in a separate HTML file linked through the <code>templateUrl</code> property.</p>\n<p>Additional templates, represented by <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> objects, can define alternative or <em>embedded</em> views, which can be referenced from multiple components.</p>\n<h2 id=\"template-driven-forms\">template-driven forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-driven-forms\"><i class=\"material-icons\">link</i></a></h2>\n<p>A format for building Angular forms using HTML forms and input elements in the view.\nThe alternative format uses the <a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">reactive forms</a> framework.</p>\n<p>When using template-driven forms:</p>\n<ul>\n<li>\n<p>The \"source of truth\" is the template.\nThe validation is defined using attributes on the individual input elements.</p>\n</li>\n<li>\n<p><a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">Two-way binding</a> with <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> keeps the component model synchronized with the user's entry into the input elements.</p>\n</li>\n<li>\n<p>Behind the scenes, Angular creates a new control for each input element, provided you have set up a <code>name</code> attribute and two-way binding for each input.</p>\n</li>\n<li>\n<p>The associated Angular directives are prefixed with <code>ng</code> such as <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code>, <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>, and <code><a href=\"api/forms/NgModelGroup\" class=\"code-anchor\">ngModelGroup</a></code>.</p>\n</li>\n</ul>\n<p>The alternative is a reactive form.\nFor an introduction and comparison of both forms approaches, see <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Introduction to Angular Forms</a>.</p>\n<h2 id=\"template-expression\">template expression<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-expression\"><i class=\"material-icons\">link</i></a></h2>\n<p>A TypeScript-like syntax that Angular evaluates within a <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">data binding</a>.</p>\n<!--todo: have Alex review this -->\n<!-- Read about how to write template expressions in the [template expressions][AioGuideInterpolationTemplateExpressions] section of the [Interpolation][AioGuideInterpolation] guide. -->\n<h2 id=\"template-reference-variable\">template reference variable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-reference-variable\"><i class=\"material-icons\">link</i></a></h2>\n<p>A variable defined in a template that references an instance associated with an element, such as a directive instance, component instance, template as in <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>, or DOM element.\nAfter declaring a template reference variable on an element in a template, you can access values from that variable elsewhere within the same template.\nThe following example defines a template reference variable named <code>#phone</code>.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n</code-example>\n<p>To learn more, see <a href=\"guide/template-reference-variables\" title=\"Template variables | Angular\">Template reference variable</a>.</p>\n<h2 id=\"template-input-variable\">template input variable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-input-variable\"><i class=\"material-icons\">link</i></a></h2>\n<p>A template input variable is a variable you can reference within a single instance of the template.\nYou declare a template input variable using the <code>let</code> keyword as in <code>let customer</code>.</p>\n<code-example format=\"html\" language=\"html\">\n\n&#x3C;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let customer of customers;\">\n    &#x3C;td>{{customer.customerNo}}&#x3C;/td>\n    &#x3C;td>{{customer.name}}&#x3C;/td>\n    &#x3C;td>{{customer.address}}&#x3C;/td>\n    &#x3C;td>{{customer.city}}&#x3C;/td>\n    &#x3C;td>{{customer.state}}&#x3C;/td>\n    &#x3C;button (click)=\"selectedCustomer=customer\">Select&#x3C;/button>\n&#x3C;/tr>\n\n</code-example>\n<p>Read and learn more about <a href=\"guide/template-reference-variables#template-input-variable\" title=\"Template input variable - Template variables | Angular\">template input variables</a>.</p>\n<h2 id=\"token\">token<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#token\"><i class=\"material-icons\">link</i></a></h2>\n<p>An opaque identifier used for efficient table lookup.\nIn Angular, a <a href=\"guide/glossary#di-token\" title=\"DI token - Glossary | Angular\">DI token</a> is used to find <a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">providers</a> of dependencies in the <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">dependency injection</a> system.</p>\n<h2 id=\"transpile\">transpile<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#transpile\"><i class=\"material-icons\">link</i></a></h2>\n<p>The translation process that transforms one version of JavaScript to another version; for example, down-leveling ES2015 to the older ES5 version.</p>\n<h2 id=\"tree\">tree<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#tree\"><i class=\"material-icons\">link</i></a></h2>\n<p>In <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematics</a>, a virtual file system represented by the <code>Tree</code> class.\nSchematic <a href=\"guide/glossary#rule\" title=\"rule - Glossary | Angular\">rules</a> take a tree object as input, operate on them, and return a new tree object.</p>\n<h2 id=\"typescript\">TypeScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#typescript\"><i class=\"material-icons\">link</i></a></h2>\n<p>A programming language based on JavaScript that is notable for its optional typing system.\nTypeScript provides compile-time type checking and strong tooling support\nThe type checking and tooling support include code completion, refactoring, inline documentation, and intelligent search.\nMany code editors and IDEs support TypeScript either natively or with plug-ins.</p>\n<p>TypeScript is the preferred language for Angular development.\nTo learn more about TypeScript, see <a href=\"https://www.typescriptlang.org\" title=\"TypeScript\">typescriptlang.org</a>.</p>\n<h2 id=\"typescript-configuration-file\">TypeScript configuration file<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#typescript-configuration-file\"><i class=\"material-icons\">link</i></a></h2>\n<p>A file specifies the root files and the compiler options required to compile a TypeScript project.\nTo learn more, see <a href=\"guide/typescript-configuration\" title=\"TypeScript configuration | Angular\">TypeScript configuration</a>.</p>\n<h2 id=\"unidirectional-data-flow\">unidirectional data flow<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#unidirectional-data-flow\"><i class=\"material-icons\">link</i></a></h2>\n<p>A data flow model where the component tree is always checked for changes in one direction from parent to child, which prevents cycles in the change detection graph.</p>\n<p>In practice, this means that data in Angular flows downward during change detection.\nA parent component can easily change values in its child components because the parent is checked first.\nA failure could occur, however, if a child component tries to change a value in its parent during change detection (inverting the expected data flow), because the parent component has already been rendered.\nIn development mode, Angular throws the <code>ExpressionChangedAfterItHasBeenCheckedError</code> error if your application attempts to do this, rather than silently failing to render the new value.</p>\n<p>To avoid this error, a <a href=\"guide/lifecycle-hooks\" title=\"Lifecycle Hooks | Angular\">lifecycle hook</a> method that seeks to make such a change should trigger a new change detection run.\nThe new run follows the same direction as before, but succeeds in picking up the new value.</p>\n<h2 id=\"server-side-rendering-1\">Server-side rendering<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#server-side-rendering-1\"><i class=\"material-icons\">link</i></a></h2>\n<p>A tool for implementing <a href=\"guide/glossary#server-side-rendering\" title=\"server-side rendering - Glossary | Angular\">server-side rendering</a> of an Angular application.\nWhen integrated with an app, Universal generates and serves static pages on the server in response to requests from browsers.\nThe initial static page serves as a fast-loading placeholder while the full application is being prepared for normal execution in the browser.\nTo learn more, see <a href=\"guide/ssr\" title=\"Server-side rendering (SSR) with Angular | Angular\">Angular server-side rendering</a>.</p>\n<h2 id=\"view\">view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view\"><i class=\"material-icons\">link</i></a></h2>\n<p>The smallest grouping of display elements that can be created and destroyed together.\nAngular renders a view under the control of one or more <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directives</a>.</p>\n<p>A <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">component</a> class and its associated <a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">template</a> define a view.\nA view is specifically represented by a <code><a href=\"api/core/ViewRef\" class=\"code-anchor\">ViewRef</a></code> instance associated with a component.\nA view that belongs immediately to a component is referenced as a <em>host view</em>.\nViews are typically collected into <a href=\"guide/glossary#view-hierarchy\" title=\"view hierarchy - Glossary | Angular\">view hierarchies</a>.</p>\n<p>Properties of elements in a view can change dynamically, in response to user actions; the structure (number and order) of elements in a view cannot.\nYou can change the structure of elements by inserting, moving, or removing nested views within their view containers.</p>\n<p>View hierarchies can be loaded and unloaded dynamically as the user navigates through the application, typically under the control of a <a href=\"guide/glossary#router\" title=\"router - Glossary | Angular\">router</a>.</p>\n<p><a id=\"ve\"></a></p>\n<h2 id=\"view-engine\">View Engine<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view-engine\"><i class=\"material-icons\">link</i></a></h2>\n<p>A previous compilation and rendering pipeline used by Angular.\nIt has since been replaced by <a href=\"guide/glossary#ivy\" title=\"Ivy - Glossary | Angular\">Ivy</a> and is no longer in use.\nView Engine was deprecated in version 9 and removed in version 13.</p>\n<p><a id=\"view-tree\"></a></p>\n<h2 id=\"view-hierarchy\">view hierarchy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view-hierarchy\"><i class=\"material-icons\">link</i></a></h2>\n<p>A tree of related views that can be acted on as a unit.\nThe root view is referenced as the <em>host view</em> of a component.\nA host view is the root of a tree of <em>embedded views</em>, collected in a <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> view container attached to an anchor element in the hosting component.\nThe view hierarchy is a key part of Angular <a href=\"guide/glossary#change-detection\" title=\" change detection - Glossary | Angular\">change detection</a>.</p>\n<p>The view hierarchy does not imply a component hierarchy.\nViews that are embedded in the context of a particular hierarchy can be host views of other components.\nThose components can be in the same NgModule as the hosting component, or belong to other NgModules.</p>\n<h2 id=\"web-component\">web component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#web-component\"><i class=\"material-icons\">link</i></a></h2>\n<p>See <a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">custom element</a>.</p>\n<h2 id=\"workspace\">workspace<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#workspace\"><i class=\"material-icons\">link</i></a></h2>\n<p>A collection of Angular <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">projects</a> (that is, applications and libraries) powered by the Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> that are typically co-located in a single source-control repository (such as <a href=\"https://git-scm.com\" title=\"Git\">git</a>).</p>\n<p>The <a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code></a> Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> command creates a file system directory (the \"workspace root\").\nIn the workspace root, it also creates the workspace <a href=\"guide/glossary#configuration\" title=\"configuration - Glossary | Angular\">configuration file</a> (<code>angular.json</code>) and, by default, an initial application project with the same name.</p>\n<p>Commands that create or operate on applications and libraries (such as <code>add</code> and <code>generate</code>) must be executed from within a workspace directory.\nTo learn more, see <a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">Workspace Configuration</a>.</p>\n<h2 id=\"workspace-configuration\">workspace configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#workspace-configuration\"><i class=\"material-icons\">link</i></a></h2>\n<p>A file named <code>angular.json</code> at the root level of an Angular <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">workspace</a> provides workspace-wide and project-specific configuration defaults for build and development tools that are provided by or integrated with the <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a>.\nTo learn more, see <a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">Workspace Configuration</a>.</p>\n<p>Additional project-specific configuration files are used by tools, such as <code>package.json</code> for the <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm package manager</a>, <code>tsconfig.json</code> for <a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">TypeScript transpilation</a>, and <code>tslint.json</code> for <a href=\"https://palantir.github.io/tslint\" title=\"TSLint | Palantir | GitHub\">TSLint</a>.\nTo learn more, see <a href=\"guide/file-structure\" title=\"Workspace and project file structure | Angular\">Workspace and Project File Structure</a>.</p>\n<h2 id=\"zone\">zone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#zone\"><i class=\"material-icons\">link</i></a></h2>\n<p>An execution context for a set of asynchronous tasks.\nUseful for debugging, profiling, and testing applications that include asynchronous operations such as event processing, promises, and runs to remote servers.</p>\n<p>An Angular application runs in a zone where it can respond to asynchronous events by checking for data changes and updating the information it displays by resolving <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">data bindings</a>.</p>\n<p>A zone client can take action before and after an async operation completes.</p>\n<p>Learn more about zones in this <a href=\"https://www.youtube.com/watch?v=3IqtmUscE_U\" title=\"Brian Ford - Zones - NG-Conf 2014 | YouTube\">Brian Ford video</a>.</p>\n<!-- vale Angular.Google_Headings = YES -->\n<!-- links -->\n<!-- [AioGuideInterpolationTemplateExpressions]: guide/interpolation#template-expressions \"Template expressions - Text interpolation | Angular\" -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Mon Aug 14 2023</div>\n</div>\n\n<!-- links to this doc:\n - api/common\n - api/common/APP_BASE_HREF\n - api/common/http\n - api/common/http/HttpClientJsonpModule\n - api/common/http/HttpClientModule\n - api/core\n - api/core/APP_BOOTSTRAP_LISTENER\n - api/core/APP_ID\n - api/core/APP_INITIALIZER\n - api/core/Component\n - api/core/ComponentRef\n - api/core/Directive\n - api/core/EmbeddedViewRef\n - api/core/Inject\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/core/PACKAGE_ROOT_URL\n - api/core/Pipe\n - api/core/ViewContainerRef\n - api/core/ViewRef\n - api/platform-browser\n - api/platform-browser-dynamic\n - api/platform-browser/REMOVE_STYLES_ON_COMPONENT_DESTROY\n - api/platform-browser/animations\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/platform-browser/animations/async\n - api/platform-browser/animations/async/provideAnimationsAsync\n - api/platform-browser/animations/provideAnimations\n - api/platform-browser/animations/provideNoopAnimations\n - api/platform-server\n - api/router\n - api/router/provideRoutes\n - api/service-worker/SwUpdate\n - cli\n - guide/animate-state-style\n - guide/animations\n - guide/aot-compiler\n - guide/architecture\n - guide/architecture-components\n - guide/architecture-next-steps\n - guide/binding-overview\n - guide/bootstrapping\n - guide/build\n - guide/cli-builder\n - guide/creating-libraries\n - guide/defer\n - guide/dependency-injection\n - guide/dependency-injection-navtree\n - guide/event-binding\n - guide/file-structure\n - guide/forms\n - guide/http-request-data-from-server\n - guide/http-server-communication\n - guide/i18n-common-format-data-locale\n - guide/i18n-common-merge\n - guide/i18n-common-overview\n - guide/i18n-common-prepare\n - guide/i18n-optional-overview\n - guide/interpolation\n - guide/libraries\n - guide/lifecycle-hooks\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n - guide/npm-packages\n - guide/pipes\n - guide/pipes-custom-data-trans\n - guide/pipes-overview\n - guide/property-binding\n - guide/reactive-forms\n - guide/roadmap\n - guide/routing-overview\n - guide/schematics\n - guide/service-worker-communications\n - guide/setup-local\n - guide/styleguide\n - guide/template-statements\n - guide/understanding-template-expr-overview\n - guide/upgrade\n - guide/upgrade-setup\n - guide/workspace-config\n - presskit\n - start/start-data\n - tutorial\n - tutorial/tour-of-heroes\n - tutorial/tour-of-heroes/toh-pt0\n-->\n<!-- links from this doc:\n - api/common/DatePipe\n - api/common/NgFor\n - api/common/NgIf\n - api/core/ChangeDetectorRef\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnInit\n - api/core/Output\n - api/core/Pipe\n - api/core/Provider\n - api/core/TemplateRef\n - api/core/ViewContainerRef\n - api/core/ViewRef\n - api/forms/FormArray\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/NgForm\n - api/forms/NgModel\n - api/forms/NgModelGroup\n - api/platform-browser/BrowserModule\n - api/platform-server\n - api/router/Resolve\n - api/router/Router\n - api/router/RouterOutlet\n - cli\n - cli/add\n - cli/generate\n - cli/generate#app-shell\n - cli/generate#application\n - cli/generate#library\n - cli/new\n - cli/run\n - guide/angular-package-format\n - guide/animations\n - guide/architecture\n - guide/architecture-services\n - guide/attribute-binding\n - guide/attribute-directives\n - guide/bootstrapping\n - guide/browser-support\n - guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\n - guide/class-binding\n - guide/creating-libraries#integrating-with-the-cli-using-code-generation-schematics\n - guide/dependency-injection\n - guide/elements\n - guide/event-binding\n - guide/file-structure\n - guide/form-validation\n - guide/form-validation#adding-custom-validators-to-reactive-forms\n - guide/form-validation#adding-custom-validators-to-template-driven-forms\n - guide/forms\n - guide/forms-overview\n - guide/glossary#ahead-of-time-aot-compilation\n - guide/glossary#angular-element\n - guide/glossary#angular-package-format-apf\n - guide/glossary#annotation\n - guide/glossary#app-shell\n - guide/glossary#architect\n - guide/glossary#attribute-directive\n - guide/glossary#binding\n - guide/glossary#bootstrap\n - guide/glossary#builder\n - guide/glossary#case-types\n - guide/glossary#change-detection\n - guide/glossary#class-decorator\n - guide/glossary#class-field-decorator\n - guide/glossary#collection\n - guide/glossary#command-line-interface-cli\n - guide/glossary#component\n - guide/glossary#configuration\n - guide/glossary#content-projection\n - guide/glossary#custom-element\n - guide/glossary#data-binding\n - guide/glossary#declarable\n - guide/glossary#decorator--decoration\n - guide/glossary#dependency-injection-di\n - guide/glossary#di-token\n - guide/glossary#directive\n - guide/glossary#domain-specific-language-dsl\n - guide/glossary#dynamic-component-loading\n - guide/glossary#eager-loading\n - guide/glossary#ecmascript\n - guide/glossary#element\n - guide/glossary#entry-point\n - guide/glossary#form-control\n - guide/glossary#form-model\n - guide/glossary#form-validation\n - guide/glossary#glossary\n - guide/glossary#immutability\n - guide/glossary#injectable\n - guide/glossary#injector\n - guide/glossary#input\n - guide/glossary#interpolation\n - guide/glossary#ivy\n - guide/glossary#javascript\n - guide/glossary#just-in-time-jit-compilation\n - guide/glossary#lazy-loading\n - guide/glossary#library\n - guide/glossary#lifecycle-hook\n - guide/glossary#module\n - guide/glossary#ngc\n - guide/glossary#ngmodule\n - guide/glossary#npm-package\n - guide/glossary#observable\n - guide/glossary#observer\n - guide/glossary#output\n - guide/glossary#pipe\n - guide/glossary#platform\n - guide/glossary#polyfill\n - guide/glossary#project\n - guide/glossary#provider\n - guide/glossary#reactive-forms\n - guide/glossary#resolver\n - guide/glossary#route-guard\n - guide/glossary#router\n - guide/glossary#router-outlet\n - guide/glossary#routing-component\n - guide/glossary#rule\n - guide/glossary#schematic\n - guide/glossary#schematics-cli\n - guide/glossary#scoped-package\n - guide/glossary#server-side-rendering\n - guide/glossary#server-side-rendering-1\n - guide/glossary#service\n - guide/glossary#standalone\n - guide/glossary#structural-directive\n - guide/glossary#subscriber\n - guide/glossary#target\n - guide/glossary#template\n - guide/glossary#template-driven-forms\n - guide/glossary#template-expression\n - guide/glossary#template-input-variable\n - guide/glossary#template-reference-variable\n - guide/glossary#token\n - guide/glossary#transpile\n - guide/glossary#tree\n - guide/glossary#typescript\n - guide/glossary#typescript-configuration-file\n - guide/glossary#unidirectional-data-flow\n - guide/glossary#view\n - guide/glossary#view-engine\n - guide/glossary#view-hierarchy\n - guide/glossary#web-component\n - guide/glossary#workspace\n - guide/glossary#workspace-configuration\n - guide/glossary#zone\n - guide/hierarchical-dependency-injection\n - guide/inputs-outputs\n - guide/interpolation\n - guide/lifecycle-hooks\n - guide/lifecycle-hooks#responding-to-projected-content-changes\n - guide/ngmodules\n - guide/npm-packages\n - guide/observables\n - guide/pipes-overview\n - guide/property-binding\n - guide/router\n - guide/router#preventing-unauthorized-access\n - guide/router-tutorial-toh#resolve-pre-fetching-component-data\n - guide/schematics\n - guide/service-worker-intro\n - guide/setup-local\n - guide/ssr\n - guide/standalone-components\n - guide/structural-directives\n - guide/styleguide#02-01\n - guide/template-reference-variables\n - guide/template-reference-variables#template-input-variable\n - guide/template-syntax\n - guide/typescript-configuration\n - guide/workspace-config\n - guide/workspace-config#project-tool-configuration-options\n - https://angular.io/guide/aot-compiler#choosing-a-compiler\n - https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7\n - https://developer.mozilla.org/docs/Web/API/CustomElementRegistry\n - https://developers.google.com/web/fundamentals/architecture/app-shell\n - https://docs.npmjs.com/about-npm\n - https://en.wikipedia.org/wiki/Domain-specific_language\n - https://en.wikipedia.org/wiki/ECMAScript\n - https://git-scm.com\n - https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/browser\n - https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/karma\n - https://github.com/tc39/proposal-decorators\n - https://palantir.github.io/tslint\n - https://rxjs.dev\n - https://web.dev/faster-angular-change-detection\n - https://webpack.js.org\n - https://www.typescriptlang.org\n - https://www.youtube.com/watch?v=3IqtmUscE_U\n-->"
}