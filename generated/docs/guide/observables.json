{
  "id": "guide/observables",
  "title": "Using observables for streams of values",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <p><a id=\"using-observables-to-pass-values\"></a></p>\n<h1 id=\"using-observables-for-streams-of-values\">Using observables for streams of values<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables#using-observables-for-streams-of-values\"><i class=\"material-icons\">link</i></a></h1>\n<p>Observables are a technique for event handling, asynchronous programming, and handling multiple values emitted over time.</p>\n<p>The observer pattern is a software design pattern in which an object, called the <em>subject</em>, maintains a list of its dependents, called <em>observers</em>, and notifies them automatically of state changes.\nThis pattern is similar (but not identical) to the <a href=\"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern\">publish/subscribe</a> design pattern.</p>\n<p>Angular apps tend to use the <a href=\"https://rxjs.dev/\">RxJS library for Observables</a>. This overview covers just the basics of observables as implemented by that library.</p>\n<h2 id=\"basic-usage-and-terms\">Basic usage and terms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables#basic-usage-and-terms\"><i class=\"material-icons\">link</i></a></h2>\n<p>Observables are declarative.  You define a function for publishing values — the <em>source</em> — but that function is not executed until a consumer subscribes to the observable by calling the observable's <code>subscribe</code> method.</p>\n<p>This <em>subscriber</em> then receives notifications from the observable until it completes, emits an error, or the consumer unsubscribes.</p>\n<p>An observable can deliver multiple values of any type — literals, messages, or events — depending on the context. A stream of keystrokes, an HTTP response, and the ticks of an interval timer are among the typical observable sources. The observable API applies consistently across all of these diverse sources.</p>\n<p>An observable can emit one, many, or no values while subscribed. It can emit synchronously (emit the first value immediately) or asynchronously (emit values over time).</p>\n<p>Because setup and teardown logic are both handled by the observable, your application code only needs to worry about subscribing to consume values and unsubscribing when done.</p>\n<p><a href=\"guide/rx-library#operators\">RxJS <em>Operators</em></a> enable transformations of observable values. An <em>Operator</em> takes an observable source, manipulates the values from that source in some useful way, and returns a new observable of the transformed values. When you subscribe to that new observable, you get the results of the intermediate transformations.</p>\n<p>This ability to progressively transform observable values - and even combine multiple observable sources into a consolidated observable - is one of the most powerful and appealing of RxJS features.</p>\n<p>Accordingly, observables are used extensively within Angular applications and within Angular itself. </p>\n<div class=\"alert is-helpful\">\n<p>To be fair, RxJS has a steep learning curve and sometimes bewildering behavior. Use them judiciously.</p>\n</div>\n<h2 id=\"observable\">Observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables#observable\"><i class=\"material-icons\">link</i></a></h2>\n<p>An observable is an object that can emit one or more values over time.</p>\n<p>Here's a simple observable that will emit <code>1</code>, then <code>2</code>, then <code>3</code>, and then completes.</p>\n<code-example header=\"An observable emitting 3 integers\" path=\"observables/src/subscribing.ts\" region=\"observable\">\nimport { of } from 'rxjs';\n\nconst numbers$ = of(1, 2, 3); // simple observable that emits three values\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The RxJS method, <code>of(...values)</code>, creates an <code>Observable</code> instance that synchronously delivers each of the values provided as arguments. </p>\n</div>\n<h3 id=\"naming-conventions-for-observables\">Naming conventions for observables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables#naming-conventions-for-observables\"><i class=\"material-icons\">link</i></a></h3>\n<p>Notice the \"$\" on the end of the observable name. The \"$\" signifies that the variable is an observable \"$tream\" of values.</p>\n<p>This is a widely adopted naming convention for observables. </p>\n<p>Not everyone likes it. Because Angular applications are written in TypeScript and code editors are good at revealing an object's type, you can usually tell  when a variable is an observable. Many feel the \"$\" suffix is unnecessary and potentially misleading.</p>\n<p>On the other hand, the trailing \"$\" can help you quickly identify observables when scanning the code. Also, if you want a property to hold the most recent value emitted from an observable, it can be convenient to use the source observable's root name without the \"$\".</p>\n<p>The Angular framework and tooling do not enforce this convention. Feel free to use it or not.</p>\n<h2 id=\"subscribing\">Subscribing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables#subscribing\"><i class=\"material-icons\">link</i></a></h2>\n<p>An observable begins publishing values only when someone subscribes to it. That \"1-2-3\" observable won't emit any numbers until you subscribe by calling the observable's <code>subscribe()</code> method.</p>\n<p>If you want to begin publishing but don't care about the values or when it completes, you can call subscribe with no arguments at all</p>\n<code-example header=\"Start publishing\" path=\"observables/src/subscribing.ts\" region=\"no-params\">\nnumbers$.subscribe();\n\n</code-example>\n<p>You're more likely interested in doing something with the values. Pass in a method - called a \"next\" handler - that does something every time the observable emits a value.</p>\n<code-example header=\"Subscribe to emitted values\" path=\"observables/src/subscribing.ts\" region=\"next-param\">\nnumbers$.subscribe(\n  value => console.log('Observable emitted the next value: ' + value)\n);\n\n</code-example>\n<p>Passing a <code>next()</code> function into <code>subscribe</code> is a convenient syntax for this most typical case. If you also need to know when the observable emits an error or completes, you'll have to pass in an <code>Observer</code> instead.</p>\n<h2 id=\"defining-observers\">Defining observers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables#defining-observers\"><i class=\"material-icons\">link</i></a></h2>\n<p>An observable has three types of notifications: \"next\", \"error\", and \"complete\".</p>\n<p>An <code>Observer</code> is an object whose properties contain handlers for these notifications.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Notification type</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>next</code></td>\n<td align=\"left\">A handler for each delivered value. Called zero or more times after execution starts.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>error</code></td>\n<td align=\"left\">A handler for an error notification. An error halts execution of the observable instance and unsubscribes.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>complete</code></td>\n<td align=\"left\">A handler for the execution-complete notification. Do not expect <code>next</code> or <code>error</code> to be called again. Automatically unsubscribes.</td>\n</tr>\n</tbody>\n</table>\n<p>Here is an example of passing an observer object to <code>subscribe</code>:</p>\n<code-example header=\"Subscribe with full observer object\" path=\"observables/src/subscribing.ts\" region=\"object-param\">\nnumbers$.subscribe({\n  next: value => console.log('Observable emitted the next value: ' + value),\n  error: err => console.error('Observable emitted an error: ' + err),\n  complete: () => console.log('Observable emitted the complete notification')\n});\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Alternatively, you can create the <code>Observer</code> object with functions named <code>next()</code>, <code>error()</code> and <code>complete()</code>. </p>\n<code-example path=\"observables/src/subscribing.ts\" region=\"object-with-fns\">\nnumbers$.subscribe({\n  next(value) { console.log('Observable emitted the next value: ' + value); },\n  error(err)  { console.error('Observable emitted an error: ' + err); },\n  complete()  { console.log('Observable emitted the complete notification'); }\n});\n\n</code-example>\n<p>This works because JavaScript turns the function names into the property names.</p>\n</div>\n<p>All of the handler properties are optional.\nIf you omit a handler for one of these properties, the observer ignores notifications of that type.</p>\n<h2 id=\"error-handling\">Error handling<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables#error-handling\"><i class=\"material-icons\">link</i></a></h2>\n<p>Because observables can produce values asynchronously, try/catch will not effectively catch errors.\nInstead, you handle errors by specifying an <code>error</code> function on the observer.</p>\n<p>Producing an error also causes the observable to clean up subscriptions and stop producing values.</p>\n<code-example path=\"observables/src/subscribing.ts\" region=\"next-or-error\">\nnumbers$.subscribe({\n  next: value => console.log('Observable emitted the next value: ' + value),\n  error: err => console.error('Observable emitted an error: ' + err),\n});\n\n</code-example>\n<p>Error handling (and specifically recovering from an error) is <a href=\"guide/rx-library#error-handling\">covered in more detail in a later section</a>.</p>\n<h2 id=\"creating-observables\">Creating observables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables#creating-observables\"><i class=\"material-icons\">link</i></a></h2>\n<p>The RxJS library contains a number of functions for creating observables. Some of the most useful are <a href=\"guide/rx-library#observable-creation-functions\">covered later</a>.</p>\n<p>You can also use the <code>Observable</code> constructor to create an observable stream of any type.\nThe constructor takes as its argument the <em>subscriber function</em> to run when the observable's <code>subscribe()</code> method executes.</p>\n<p>A subscriber function receives an <code>Observer</code> object, and can publish values to the observer's <code>next()</code>, <code>error</code>, and <code>complete</code> handlers.</p>\n<p>For example, to create an observable equivalent to the <code>of(1, 2, 3)</code> above, you could write something like this:</p>\n<code-example header=\"Create observable with constructor\" path=\"observables/src/creating.ts\" region=\"subscriber\">\n// This function runs when subscribe() is called\nfunction sequenceSubscriber(observer: Observer&#x3C;number>) {\n  // synchronously deliver 1, 2, and 3, then completes\n  observer.next(1);\n  observer.next(2);\n  observer.next(3);\n  observer.complete();\n\n  // Return the unsubscribe function.\n  // This one doesn't do anything\n  // because values are delivered synchronously\n  // and there is nothing to clean up.\n  return {unsubscribe() {}};\n}\n\n// Create a new Observable that will deliver the above <a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>\nconst <a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a> = new Observable(sequenceSubscriber);\n\n// Execute the Observable and print the result of each notification\nsequence.subscribe({\n  next(num) { console.log(num); },\n  complete() { console.log('Finished <a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>'); }\n});\n\n// Logs:\n// 1\n// 2\n// 3\n// Finished <a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>\n\n</code-example>\n<h2 id=\"geolocation-example\">Geolocation example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observables#geolocation-example\"><i class=\"material-icons\">link</i></a></h2>\n<p>The following example demonstrates the concepts above by showing how to create and consume an observable that reports geolocation updates.</p>\n<code-example header=\"Observe geolocation updates\" class=\"no-auto-link\" path=\"observables/src/geolocation.ts\">\n\n// Create an Observable that will start listening to browser geolocation updates\n// when a consumer subscribes.\nconst locations = new Observable((observer) => {\n  let watchId: number;\n\n  // The geolocation API (if it exists) provides values to publish\n  if ('geolocation' in navigator) {\n    watchId = navigator.geolocation.watchPosition(\n      (position: GeolocationPosition) => observer.next(position),\n      (error: GeolocationPositionError) => observer.error(error)\n    );\n  } else {\n    observer.error('Geolocation not available');\n  }\n\n  // When the consumer unsubscribes, stop listening to geolocation changes.\n  return {\n    unsubscribe() {\n      navigator.geolocation.clearWatch(watchId);\n    }\n  };\n});\n\n// Call subscribe() to start listening for geolocation updates.\nconst locationsSubscription = locations.subscribe({\n  next(position) {\n    console.log('Current Position: ', position);\n  },\n  error(msg) {\n    console.log('Error Getting Location: ', msg);\n  }\n});\n\n// Stop listening for location after 10 seconds\nsetTimeout(() => {\n  locationsSubscription.unsubscribe();\n}, 10000);\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Fri Aug 25 2023</div>\n</div>\n\n<!-- links to this doc:\n - api/service-worker/SwRegistrationOptions\n - guide/architecture-next-steps\n - guide/glossary\n - guide/http-interceptor-use-cases\n - guide/pipes\n - guide/understanding-communicating-with-http\n-->\n<!-- links from this doc:\n - api/animations/sequence\n - guide/observables#basic-usage-and-terms\n - guide/observables#creating-observables\n - guide/observables#defining-observers\n - guide/observables#error-handling\n - guide/observables#geolocation-example\n - guide/observables#naming-conventions-for-observables\n - guide/observables#observable\n - guide/observables#subscribing\n - guide/observables#using-observables-for-streams-of-values\n - guide/rx-library#error-handling\n - guide/rx-library#observable-creation-functions\n - guide/rx-library#operators\n - https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern\n - https://rxjs.dev/\n-->"
}