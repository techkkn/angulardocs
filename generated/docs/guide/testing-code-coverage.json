{
  "id": "guide/testing-code-coverage",
  "title": "Find out how much code you're testing",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <p><a id=\"code-coverage\"></a></p>\n<h1 id=\"find-out-how-much-code-youre-testing\">Find out how much code you're testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-code-coverage#find-out-how-much-code-youre-testing\"><i class=\"material-icons\">link</i></a></h1>\n<p>The Angular CLI can run unit tests and create code coverage reports.\nCode coverage reports show you any parts of your code base that might not be properly tested by your unit tests.</p>\n<div class=\"alert is-helpful\">\n<p>If you'd like to experiment with the application that this guide describes, <live-example name=\"testing\" nodownload=\"\">run it in your browser</live-example> or <live-example name=\"testing\" downloadonly=\"\">download and run it locally</live-example>.</p>\n</div>\n<p>To generate a coverage report run the following command in the root of your project.</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng test --no-watch --code-coverage\n\n</code-example>\n<p>When the tests are complete, the command creates a new <code>/coverage</code> directory in the project.\nOpen the <code>index.html</code> file to see a report with your source code and code coverage values.</p>\n<p>If you want to create code-coverage reports every time you test, set the following option in the Angular CLI configuration file, <code>angular.json</code>:</p>\n<code-example format=\"json\" language=\"json\">\n\n\"test\": {\n  \"options\": {\n    \"codeCoverage\": true\n  }\n}\n\n</code-example>\n<h2 id=\"code-coverage-enforcement\">Code coverage enforcement<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-code-coverage#code-coverage-enforcement\"><i class=\"material-icons\">link</i></a></h2>\n<p>The code coverage percentages let you estimate how much of your code is tested.\nIf your team decides on a set minimum amount to be unit tested, enforce this minimum with the Angular CLI.</p>\n<p>For example, suppose you want the code base to have a minimum of 80% code coverage.\nTo enable this, open the <a href=\"https://karma-runner.github.io\">Karma</a> test platform configuration file, <code>karma.conf.js</code>, and add the <code>check</code> property in the <code>coverageReporter:</code> key.</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\ncoverageReporter: {\n  dir: require('path').join(__dirname, './coverage/&#x3C;project-name>'),\n  subdir: '.',\n  reporters: [\n    { type: 'html' },\n    { type: 'text-summary' }\n  ],\n  check: {\n    global: {\n      statements: 80,\n      branches: 80,\n      functions: 80,\n      lines: 80\n    }\n  }\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Read more about creating and fine tunning Karma configuration in the <a href=\"guide/testing#configuration\">testing guide</a>.</p>\n</div>\n<p>The <code>check</code> property causes the tool to enforce a minimum of 80% code coverage when the unit tests are run in the project.</p>\n<p>Read more on coverage configuration options in the <a href=\"https://github.com/karma-runner/karma-coverage/blob/master/docs/configuration.md\">karma coverage documentation</a>.</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Tue Jan 17 2023</div>\n</div>\n\n<!-- links to this doc:\n - guide/testing\n-->\n<!-- links from this doc:\n - guide/testing#configuration\n - guide/testing-code-coverage#code-coverage-enforcement\n - guide/testing-code-coverage#find-out-how-much-code-youre-testing\n - https://github.com/karma-runner/karma-coverage/blob/master/docs/configuration.md\n - https://karma-runner.github.io\n-->"
}