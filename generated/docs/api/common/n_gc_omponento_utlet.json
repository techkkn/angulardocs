{
  "id": "api/common/NgComponentOutlet",
  "title": "NgComponentOutlet",
  "contents": "<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/common\", \"name\": \"@angular/common\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/common/NgComponentOutlet\", \"name\": \"NgComponentOutlet\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> > <a href=\"api/common\">@angular/common</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular/tree/17.3.12/packages/common/src/directives/ng_component_outlet.ts#L24-L212\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"ngcomponentoutlet\">NgComponentOutlet<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#ngcomponentoutlet\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label directive\">directive</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section class=\"short-description\">\n    <p>Instantiates a <a href=\"api/core/Component\"><code>Component</code></a> type and inserts its Host View into the current View.\n<code><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">NgComponentOutlet</a></code> provides a declarative approach for dynamic component creation.</p>\n\n    <p><a href=\"api/common/NgComponentOutlet#description\">See more...</a></p>\n  </section>\n<h2 id=\"exported-from\">Exported from<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#exported-from\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n  <li>\n    <a href=\"api/common/CommonModule\">\n      <code>CommonModule</code>\n    </a>\n  </li>\n</ul>\n  \n<section class=\"selector-list\">\n  <h2 id=\"selectors\">Selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#selectors\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n    <li><code>[<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>]</code></li>\n  </ul>\n</section>\n\n  \n<section class=\"instance-properties\">\n  <h2 id=\"properties\">Properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>Property</th>\n        <th>Description</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutlet\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\"><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a></span>: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;any> | null</code>\n        </td>\n        <td>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutletInputs\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngComponentOutletInputs</span>?: Record&#x3C;string, unknown></code>\n        </td>\n        <td>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutletInjector\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngComponentOutletInjector</span>?: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>\n        </td>\n        <td>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutletContent\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngComponentOutletContent</span>?: any[][]</code>\n        </td>\n        <td>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutletNgModule\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngComponentOutletNgModule</span>?: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&#x3C;any></code>\n        </td>\n        <td>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutletNgModuleFactory\"></a>\n          <code class=\"deprecated-api-item\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngComponentOutletNgModuleFactory</span>?: <a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a>&#x3C;any></code>\n        </td>\n        <td>\n          <label class=\"api-status-label deprecated\" title=\"This API is deprecated\">Deprecated</label>\n          \n          \n          <p><strong>Deprecated</strong> This input is deprecated, use <code>ngComponentOutletNgModule</code> instead.</p>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n\n  \n  <section class=\"description\">\n    <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p><code><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">NgComponentOutlet</a></code> requires a component type, if a falsy value is set the view will clear and\nany existing component will be destroyed.</p>\n\n    <h3 id=\"fine-tune-control\">Fine tune control<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#fine-tune-control\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can control the component creation process by using the following optional attributes:</p>\n<ul>\n<li>\n<p><code>ngComponentOutletInputs</code>: Optional component inputs object, which will be bind to the\ncomponent.</p>\n</li>\n<li>\n<p><code>ngComponentOutletInjector</code>: Optional custom <a href=\"api/core/Injector\"><code>Injector</code></a> that will be used as parent for\nthe Component. Defaults to the injector of the current view container.</p>\n</li>\n<li>\n<p><code>ngComponentOutletContent</code>: Optional list of projectable nodes to insert into the content\nsection of the component, if it exists.</p>\n</li>\n<li>\n<p><code>ngComponentOutletNgModule</code>: Optional NgModule class reference to allow loading another\nmodule dynamically, then loading a component from that module.</p>\n</li>\n<li>\n<p><code>ngComponentOutletNgModuleFactory</code>: Deprecated config option that allows providing optional\nNgModule factory to allow loading another module dynamically, then loading a component from that\nmodule. Use <code>ngComponentOutletNgModule</code> instead.</p>\n</li>\n</ul>\n<h3 id=\"syntax\">Syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#syntax\"><i class=\"material-icons\">link</i></a></h3>\n<p>Simple</p>\n<code-example>\n&#x3C;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"componentTypeExpression\">&#x3C;/ng-container>\n</code-example>\n<p>With inputs</p>\n<code-example>\n&#x3C;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"componentTypeExpression;\n                                  inputs: inputsExpression;\">\n&#x3C;/ng-container>\n</code-example>\n<p>Customized injector/content</p>\n<code-example>\n&#x3C;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"componentTypeExpression;\n                                  injector: injectorExpression;\n                                  content: contentNodesExpression;\">\n&#x3C;/ng-container>\n</code-example>\n<p>Customized NgModule reference</p>\n<code-example>\n&#x3C;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"componentTypeExpression;\n                                  ngModule: ngModuleClass;\">\n&#x3C;/ng-container>\n</code-example>\n<h3 id=\"a-simple-example\">A simple example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#a-simple-example\"><i class=\"material-icons\">link</i></a></h3>\n<code-example path=\"common/ngComponentOutlet/ts/module.ts\" region=\"SimpleExample\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: 'hello-world', template: 'Hello World!'})\nexport class HelloWorld {}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-component-outlet-simple-example',\n  template: `&#x3C;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"HelloWorld\">&#x3C;/ng-container>`,\n})\nexport class NgComponentOutletSimpleExample {\n  // This field is necessary to expose HelloWorld to the template.\n  HelloWorld = HelloWorld;\n}\n\n</code-example>\n<p>A more complete example with additional options:</p>\n<code-example path=\"common/ngComponentOutlet/ts/module.ts\" region=\"CompleteExample\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class Greeter {\n  suffix = '!';\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'complete-component',\n  template: `{{ label }}: &#x3C;ng-content>&#x3C;/ng-content> &#x3C;ng-content>&#x3C;/ng-content>{{ greeter.suffix }}`,\n})\nexport class CompleteComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() label!: string;\n\n  constructor(public greeter: Greeter) {}\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-component-outlet-complete-example',\n  template: ` &#x3C;ng-template #ahoj>Ahoj&#x3C;/ng-template>\n    &#x3C;ng-template #svet>Svet&#x3C;/ng-template>\n    &#x3C;ng-container\n      *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"\n        CompleteComponent;\n        inputs: myInputs;\n        injector: myInjector;\n        content: myContent\n      \"\n    >&#x3C;/ng-container>`,\n})\nexport class NgComponentOutletCompleteExample implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  // This field is necessary to expose CompleteComponent to the template.\n  CompleteComponent = CompleteComponent;\n\n  myInputs = {'label': 'Complete'};\n\n  myInjector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>;\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('ahoj', {<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>: true}) ahojTemplateRef!: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;any>;\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('svet', {<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>: true}) svetTemplateRef!: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&#x3C;any>;\n  myContent?: any[][];\n\n  constructor(\n    injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>,\n    private vcr: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>,\n  ) {\n    this.myInjector = Injector.create({\n      providers: [{provide: Greeter, deps: []}],\n      parent: injector,\n    });\n  }\n\n  ngOnInit() {\n    // Create the projectable content from the templates\n    this.myContent = [\n      this.vcr.createEmbeddedView(this.ahojTemplateRef).rootNodes,\n      this.vcr.createEmbeddedView(this.svetTemplateRef).rootNodes,\n    ];\n  }\n}\n\n</code-example>\n\n  </section>\n\n  \n  \n  \n  </div>\n</article>\n\n<!-- links to this doc:\n - api/common\n - api/common/CommonModule\n - api/core/DoCheck\n - api/core/OnChanges\n - api/core/OnDestroy\n - guide/deprecations\n - guide/dynamic-component-loader\n-->\n<!-- links from this doc:\n - /api\n - api/common\n - api/common/CommonModule\n - api/common/NgComponentOutlet#a-simple-example\n - api/common/NgComponentOutlet#description\n - api/common/NgComponentOutlet#exported-from\n - api/common/NgComponentOutlet#fine-tune-control\n - api/common/NgComponentOutlet#ngcomponentoutlet\n - api/common/NgComponentOutlet#properties\n - api/common/NgComponentOutlet#selectors\n - api/common/NgComponentOutlet#syntax\n - api/core/Component\n - api/core/Injectable\n - api/core/Injector\n - api/core/Input\n - api/core/NgModuleFactory\n - api/core/OnInit\n - api/core/TemplateRef\n - api/core/Type\n - api/core/ViewChild\n - api/core/ViewContainerRef\n - api/upgrade/static\n - https://github.com/angular/angular/tree/17.3.12/packages/common/src/directives/ng_component_outlet.ts#L24-L212\n-->"
}