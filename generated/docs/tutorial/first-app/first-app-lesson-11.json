{
  "id": "tutorial/first-app/first-app-lesson-11",
  "title": "Lesson 11 - Integrate details page into application",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"lesson-11---integrate-details-page-into-application\">Lesson 11 - Integrate details page into application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-11#lesson-11---integrate-details-page-into-application\"><i class=\"material-icons\">link</i></a></h1>\n<p>This tutorial lesson demonstrates how to connect the details page to your app.</p>\n<p><strong>Estimated time</strong>: ~15 minutes</p>\n<p><strong>Starting code:</strong> <live-example name=\"first-app-lesson-10\"></live-example></p>\n<p><strong>Completed code:</strong> <live-example name=\"first-app-lesson-11\"></live-example></p>\n<h2 id=\"what-youll-learn\">What you'll learn<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-11#what-youll-learn\"><i class=\"material-icons\">link</i></a></h2>\n<p>At the end of this lesson your application will have support for routing to the details page.</p>\n<h2 id=\"conceptual-preview-of-routing-with-route-parameters\">Conceptual preview of routing with route parameters<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-11#conceptual-preview-of-routing-with-route-parameters\"><i class=\"material-icons\">link</i></a></h2>\n<p>Each housing location has specific details that should be displayed when a user navigates to the details page for that item. To accomplish this goal, you will need to use route parameters.</p>\n<p>Route parameters enable you to include dynamic information as a part of your route URL. To identify which housing location a user has clicked on you will use the <code>id</code> property of the <code>HousingLocation</code> type.</p>\n<h2 id=\"step-1---create-a-new-service-for-your-app\">Step 1 - Create a new service for your app<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-11#step-1---create-a-new-service-for-your-app\"><i class=\"material-icons\">link</i></a></h2>\n<p>In lesson 10, you added a second route to <code>src/app/routes.ts</code> which includes a special segment that identifies the route parameter, <code>id</code>:</p>\n    <code-example format=\"javascript\" language=\"javascript\">\n    'details/:id'\n    </code-example>\n<p>In this case, <code>:id</code> is dynamic and will change based on how the route is requested by the code.</p>\n<ol>\n<li>\n<p>In <code>src/app/housing-location/housing-location.component.ts</code>, add an anchor tag to the <code>section</code> element and include the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> directive:</p>\n<code-example header=\"Add anchor with a routerLink directive to housing-location.component.ts\" path=\"first-app-lesson-11/src/app/housing-location/housing-location.component.ts\" region=\"add-router-link\">\ntemplate: `\n  &#x3C;section class=\"listing\">\n    &#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> class=\"listing-photo\" [src]=\"housingLocation.photo\" alt=\"Exterior photo of {{housingLocation.name}}\">\n    &#x3C;h2 class=\"listing-heading\">{{ housingLocation.name }}&#x3C;/h2>\n    &#x3C;p class=\"listing-location\">{{ housingLocation.city}}, {{housingLocation.state }}&#x3C;/p>\n    &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/details', housingLocation.id]\">Learn More&#x3C;/a>\n  &#x3C;/section>\n`,\n\n</code-example>\n<p>The <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> directive enables Angular's router to create dynamic links in the application. The value assigned to the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> is an array with two entries: the static portion of the path and the dynamic data.</p>\n<p>For the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> to work in the template, add a file level import of <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> and <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> from '@angular/router', then update the component <code>imports</code> array to include both <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> and <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>.</p>\n</li>\n<li>\n<p>At this point you can confirm that the routing is working in your app. In the browser, refresh the home page and click the \"Learn More\" button for a housing location.</p>\n<section class=\"lightbox\">\n<img alt=\"details page displaying the text &#x27;details works!&#x27;\" src=\"generated/images/guide/faa/homes-app-lesson-11-step-1.png\" width=\"1920\" height=\"231\">\n</section>\n</li>\n</ol>\n<h2 id=\"step-2---get-route-parameters\">Step 2 - Get route parameters<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-11#step-2---get-route-parameters\"><i class=\"material-icons\">link</i></a></h2>\n<p>In this step, you will get the route parameter in the <code>DetailsComponent</code>. Currently, the app displays <code>details works!</code>. Next you'll update the code to display the <code>id</code> value passed using the route parameters.</p>\n<ol>\n<li>\n<p>In <code>src/app/details/details.component.ts</code> update the template to import the functions, classes and services that you'll need to use in the <code>DetailsComponent</code>:</p>\n<code-example header=\"Update file level imports\" path=\"first-app-lesson-11/src/app/details/details.component.ts\" region=\"import-resources-for-details\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, inject } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { HousingService } from '../housing.service';\nimport { HousingLocation } from '../housinglocation';\n\n</code-example>\n</li>\n<li>\n<p>Update the <code>template</code> property of the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator to display the value <code>housingLocationId</code>:</p>\n<code-example format=\"javascript\" language=\"javascript\">\n  template: `&#x3C;p>details works! {{ housingLocationId }}&#x3C;/p>`,\n</code-example>\n</li>\n<li>\n<p>Update the body of the <code>DetailsComponent</code> with the following code:</p>\n<code-example format=\"javascript\" language=\"javascript\">\n    export class DetailsComponent {\n        route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> = inject(<a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>);\n        housingLocationId = -1;\n        constructor() {\n            this.housingLocationId = Number(this.route.snapshot.params['id']);\n        }\n    }\n</code-example>\n<p>This code gives the <code>DetailsComponent</code> access to the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> router feature that enables you to have access to the data about the current route. In the <code>constructor</code>, the code converts the <code>id</code> parameter acquired from the route from a string to a number.</p>\n</li>\n<li>\n<p>Save all changes.</p>\n</li>\n<li>\n<p>In the browser, click on one of the housing location's \"Learn More\" links and confirm that the numeric value displayed on the page matches the <code>id</code> property for that location in the data.</p>\n</li>\n</ol>\n<h2 id=\"step-3---customize-the-detailcomponent\">Step 3 - Customize the <code>DetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-11#step-3---customize-the-detailcomponent\"><i class=\"material-icons\">link</i></a></h2>\n<p>Now that routing is working properly in the application this is a great time to update the template of the <code>DetailsComponent</code> to display the specific data represented by the housing location for the route parameter.</p>\n<p>To access the data you will add a call to the <code>HousingService</code>.</p>\n<ol>\n<li>\n<p>Update the template code to match the following code:</p>\n<code-example header=\"Update the DetailsComponent template in src/app/details/details.component.ts\" path=\"first-app-lesson-11/src/app/details/details.component.ts\" region=\"update-details-template\">\ntemplate: `\n  &#x3C;article>\n    &#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> class=\"listing-photo\" [src]=\"housingLocation?.photo\"\n      alt=\"Exterior photo of {{housingLocation?.name}}\"/>\n    &#x3C;section class=\"listing-description\">\n      &#x3C;h2 class=\"listing-heading\">{{housingLocation?.name}}&#x3C;/h2>\n      &#x3C;p class=\"listing-location\">{{housingLocation?.city}}, {{housingLocation?.state}}&#x3C;/p>\n    &#x3C;/section>\n    &#x3C;section class=\"listing-features\">\n      &#x3C;h2 class=\"section-heading\">About this housing location&#x3C;/h2>\n      &#x3C;ul>\n        &#x3C;li>Units available: {{housingLocation?.availableUnits}}&#x3C;/li>\n        &#x3C;li>Does this location have wifi: {{housingLocation?.wifi}}&#x3C;/li>\n        &#x3C;li>Does this location have laundry: {{housingLocation?.laundry}}&#x3C;/li>\n      &#x3C;/ul>\n    &#x3C;/section>\n  &#x3C;/article>\n`,\n\n</code-example>\n<p>Notice that the <code>housingLocation</code> properties are being accessed with the optional chaining operator <code>?</code>. This ensures that if the <code>housingLocation</code> value is null or undefined the application doesn't crash.</p>\n</li>\n<li>\n<p>Update the body of the <code>DetailsComponent</code> class to match the following code:</p>\n<code-example header=\"Update the DetailsComponent class in src/app/details/details.component.ts\" path=\"first-app-lesson-11/src/app/details/details.component.ts\" region=\"get-housing-details\">\nexport class DetailsComponent {\n\n  route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> = inject(<a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>);\n  housingService = inject(HousingService);\n  housingLocation: HousingLocation | undefined;\n\n  constructor() {\n    const housingLocationId = Number(this.route.snapshot.params['id']);\n    this.housingLocation = this.housingService.getHousingLocationById(housingLocationId);\n  }\n\n}\n\n</code-example>\n<p>Now the component has the code to display the correct information based on the selected housing location. The <code>constructor</code> now includes a call to the <code>HousingService</code> to pass the route parameter as an argument to the <code>getHousingLocationById</code> service function.</p>\n</li>\n<li>\n<p>Copy the following styles into the <code>src/app/details/details.component.css</code> file:</p>\n<code-example header=\"Add styles for the DetailsComponent\" path=\"first-app-lesson-11/src/app/details/details.component.css\" region=\"add-details-styles\">\n.listing-photo {\n  height: 600px;\n  width: 50%;\n  object-fit: cover;\n  border-radius: 30px;\n  float: right;\n}\n\n.listing-heading {\n  font-size: 48pt;\n  font-weight: bold;\n  margin-bottom: 15px;\n}\n\n.listing-location::before {\n  content: url('/assets/location-pin.svg') / '';\n}\n\n.listing-location {\n  font-size: 24pt;\n  margin-bottom: 15px;\n}\n\n.listing-features > .section-heading {\n  color: var(--secondary-color);\n  font-size: 24pt;\n  margin-bottom: 15px;\n}\n\n.listing-features {\n  margin-bottom: 20px;\n}\n\n.listing-features li {\n  font-size: 14pt;\n}\n\nli {\n  list-style-type: none;\n}\n\n.listing-apply .section-heading {\n  font-size: 18pt;\n  margin-bottom: 15px;\n}\n\nlabel, input {\n  display: block;\n}\nlabel {\n  color: var(--secondary-color);\n  font-weight: bold;\n  text-transform: uppercase;\n  font-size: 12pt;\n}\ninput {\n  font-size: 16pt;\n  margin-bottom: 15px;\n  padding: 10px;\n  width: 400px;\n  border-top: none;\n  border-right: none;\n  border-left: none;\n  border-bottom: solid .3px;\n}\n@media (max-width: 1024px) {\n  .listing-photo {\n    width: 100%;\n    height: 400px;\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p>Save your changes.</p>\n</li>\n<li>\n<p>In the browser refresh the page and confirm that when you click on the \"Learn More\" link for a given housing location the details page displays the correct information based on the data for that selected item.</p>\n<section class=\"lightbox\">\n<img alt=\"Details page listing home info\" src=\"generated/images/guide/faa/homes-app-lesson-11-step-3.png\" width=\"1920\" height=\"1159\">\n</section>\n</li>\n</ol>\n<h2 id=\"step-4---add-navigation-to-the-homecomponent\">Step 4 - Add navigation to the <code>HomeComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-11#step-4---add-navigation-to-the-homecomponent\"><i class=\"material-icons\">link</i></a></h2>\n<p>In a previous lesson you updated the <code>AppComponent</code> template to include a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>. Adding that code updated your app to enable navigation back to the <code>HomeComponent</code> whenever the logo is clicked.</p>\n<ol>\n<li>\n<p>Confirm that your code matches the following:</p>\n<code-example header=\"Add routerLink to AppComponent\" path=\"first-app-lesson-11/src/app/app.component.ts\" region=\"add-router-link-to-header\">\ntemplate: `\n  &#x3C;main>\n    &#x3C;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/']\">\n      &#x3C;header class=\"brand-name\">\n        &#x3C;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> class=\"brand-logo\" src=\"/assets/logo.svg\" alt=\"logo\" aria-hidden=\"true\">\n      &#x3C;/header>\n    &#x3C;/a>\n    &#x3C;section class=\"content\">\n      &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n    &#x3C;/section>\n  &#x3C;/main>\n`,\n\n</code-example>\n<p>Your code may already be up-to-date but confirm to be sure.</p>\n</li>\n</ol>\n<h2 id=\"lesson-review\">Lesson Review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-11#lesson-review\"><i class=\"material-icons\">link</i></a></h2>\n<p>In this lesson you updated your app to:</p>\n<ul>\n<li>use route parameters to pass data to a route</li>\n<li>use the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> directive to use dynamic data to create a route</li>\n<li>use route parameter to retrieve data from the <code>HousingService</code> to display specific housing location information.</li>\n</ul>\n<p>Really great work so far. </p>\n<p>If you are having any trouble with this lesson, you can review the completed code for it in the <live-example></live-example>.</p>\n<h2 id=\"next-steps\">Next Steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-11#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li><a href=\"tutorial/first-app/first-app-lesson-12\">Lesson 12 - Adding forms to your Angular application</a></li>\n</ul>\n<h2 id=\"more-information\">More information<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-11#more-information\"><i class=\"material-icons\">link</i></a></h2>\n<p>For more information about the topics covered in this lesson, visit:</p>\n<!-- vale Angular.Google_WordListSuggestions = NO -->\n<ul>\n<li><a href=\"guide/router#accessing-query-parameters-and-fragments\">Route Parameters</a></li>\n<li><a href=\"guide/routing-overview\">Routing in Angular Overview</a></li>\n<li><a href=\"guide/router\">Common Routing Tasks</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional Chaining Operator</a></li>\n</ul>\n\n  <div class=\"reviewed\">Last reviewed on Sat Jul 15 2023</div>\n</div>\n\n<!-- links to this doc:\n - tutorial/first-app/first-app-lesson-10\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgOptimizedImage\n - api/core/Component\n - api/router/ActivatedRoute\n - api/router/RouterLink\n - api/router/RouterOutlet\n - guide/router\n - guide/router#accessing-query-parameters-and-fragments\n - guide/routing-overview\n - tutorial/first-app/first-app-lesson-11#conceptual-preview-of-routing-with-route-parameters\n - tutorial/first-app/first-app-lesson-11#lesson-11---integrate-details-page-into-application\n - tutorial/first-app/first-app-lesson-11#lesson-review\n - tutorial/first-app/first-app-lesson-11#more-information\n - tutorial/first-app/first-app-lesson-11#next-steps\n - tutorial/first-app/first-app-lesson-11#step-1---create-a-new-service-for-your-app\n - tutorial/first-app/first-app-lesson-11#step-2---get-route-parameters\n - tutorial/first-app/first-app-lesson-11#step-3---customize-the-detailcomponent\n - tutorial/first-app/first-app-lesson-11#step-4---add-navigation-to-the-homecomponent\n - tutorial/first-app/first-app-lesson-11#what-youll-learn\n - tutorial/first-app/first-app-lesson-12\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\n-->"
}