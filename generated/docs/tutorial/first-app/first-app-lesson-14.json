{
  "id": "tutorial/first-app/first-app-lesson-14",
  "title": "Lesson 14: Add HTTP communication to your app",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"lesson-14-add-http-communication-to-your-app\">Lesson 14: Add HTTP communication to your app<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-14#lesson-14-add-http-communication-to-your-app\"><i class=\"material-icons\">link</i></a></h1>\n<p>This tutorial demonstrates how to integrate HTTP and an API into your app. </p>\n<p>Up until this point your app has read data from a static array in an Angular service. The next step is to use a JSON server that your app will communicate with over HTTP. The HTTP request will simulate the experience of working with data from a server.</p>\n<p><strong>Estimated time</strong>: ~15 minutes</p>\n<p><strong>Starting code:</strong> <live-example name=\"first-app-lesson-13\"></live-example></p>\n<p><strong>Completed code:</strong> <live-example name=\"first-app-lesson-14\"></live-example></p>\n<h2 id=\"what-youll-learn\">What you'll learn<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-14#what-youll-learn\"><i class=\"material-icons\">link</i></a></h2>\n<p>Your app will use data from a JSON server</p>\n<h2 id=\"step-1---configure-the-json-server\">Step 1 - Configure the JSON server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-14#step-1---configure-the-json-server\"><i class=\"material-icons\">link</i></a></h2>\n<p>JSON Server is an open source tool used to create mock REST APIs. You'll use it to serve the housing location data that is currently stored in the housing service.</p>\n<ol>\n<li>\n<p>Install <code>json-server</code> from npm by using the following command.\n<code-example language=\"bash\" format=\"bash\">\nnpm install -g json-server\n</code-example></p>\n</li>\n<li>\n<p>In the root directory of your project, create a file called <code>db.json</code>. This is where you will store the data for the <code>json-server</code>.</p>\n</li>\n<li>\n<p>Open <code>db.json</code> and copy the following code into the file\n<code-example language=\"json\" format=\"json\">\n{\n\"locations\": [\n{\n\"id\": 0,\n\"name\": \"Acme Fresh Start Housing\",\n\"city\": \"Chicago\",\n\"state\": \"IL\",\n\"photo\": \"https://angular.io/assets/images/tutorials/faa/bernard-hermant-CLKGGwIBTaY-unsplash.jpg\",\n\"availableUnits\": 4,\n\"wifi\": true,\n\"laundry\": true\n},\n{\n\"id\": 1,\n\"name\": \"A113 Transitional Housing\",\n\"city\": \"Santa Monica\",\n\"state\": \"CA\",\n\"photo\": \"https://angular.io/assets/images/tutorials/faa/brandon-griggs-wR11KBaB86U-unsplash.jpg\",\n\"availableUnits\": 0,\n\"wifi\": false,\n\"laundry\": true\n},\n{\n\"id\": 2,\n\"name\": \"Warm Beds Housing Support\",\n\"city\": \"Juneau\",\n\"state\": \"AK\",\n\"photo\": \"https://angular.io/assets/images/tutorials/faa/i-do-nothing-but-love-lAyXdl1-Wmc-unsplash.jpg\",\n\"availableUnits\": 1,\n\"wifi\": false,\n\"laundry\": false\n},\n{\n\"id\": 3,\n\"name\": \"Homesteady Housing\",\n\"city\": \"Chicago\",\n\"state\": \"IL\",\n\"photo\": \"https://angular.io/assets/images/tutorials/faa/ian-macdonald-W8z6aiwfi1E-unsplash.jpg\",\n\"availableUnits\": 1,\n\"wifi\": true,\n\"laundry\": false\n},\n{\n\"id\": 4,\n\"name\": \"Happy Homes Group\",\n\"city\": \"Gary\",\n\"state\": \"IN\",\n\"photo\": \"https://angular.io/assets/images/tutorials/faa/krzysztof-hepner-978RAXoXnH4-unsplash.jpg\",\n\"availableUnits\": 1,\n\"wifi\": true,\n\"laundry\": false\n},\n{\n\"id\": 5,\n\"name\": \"Hopeful Apartment Group\",\n\"city\": \"Oakland\",\n\"state\": \"CA\",\n\"photo\": \"https://angular.io/assets/images/tutorials/faa/r-architecture-JvQ0Q5IkeMM-unsplash.jpg\",\n\"availableUnits\": 2,\n\"wifi\": true,\n\"laundry\": true\n},\n{\n\"id\": 6,\n\"name\": \"Seriously Safe Towns\",\n\"city\": \"Oakland\",\n\"state\": \"CA\",\n\"photo\": \"https://angular.io/assets/images/tutorials/faa/phil-hearing-IYfp2Ixe9nM-unsplash.jpg\",\n\"availableUnits\": 5,\n\"wifi\": true,\n\"laundry\": true\n},\n{\n\"id\": 7,\n\"name\": \"Hopeful Housing Solutions\",\n\"city\": \"Oakland\",\n\"state\": \"CA\",\n\"photo\": \"https://angular.io/assets/images/tutorials/faa/r-architecture-GGupkreKwxA-unsplash.jpg\",\n\"availableUnits\": 2,\n\"wifi\": true,\n\"laundry\": true\n},\n{\n\"id\": 8,\n\"name\": \"Seriously Safe Towns\",\n\"city\": \"Oakland\",\n\"state\": \"CA\",\n\"photo\": \"https://angular.io/assets/images/tutorials/faa/saru-robert-9rP3mxf8qWI-unsplash.jpg\",\n\"availableUnits\": 10,\n\"wifi\": false,\n\"laundry\": false\n},\n{\n\"id\": 9,\n\"name\": \"Capital Safe Towns\",\n\"city\": \"Portland\",\n\"state\": \"OR\",\n\"photo\": \"https://angular.io/assets/images/tutorials/faa/webaliser-_TPTXZd9mOo-unsplash.jpg\",\n\"availableUnits\": 6,\n\"wifi\": true,\n\"laundry\": true\n}\n]\n}\n</code-example></p>\n</li>\n<li>\n<p>Save this file.</p>\n</li>\n<li>\n<p>Time to test your configuration. From the command line, at the root of your project run the following commands.</p>\n<code-example language=\"bash\" format=\"bash\">\n    json-server --watch db.json\n</code-example>\n</li>\n<li>\n<p>In your web browser, navigate to the <code>http://localhost:3000/locations</code> and confirm that the response includes the data stored in <code>db.json</code>.</p>\n</li>\n</ol>\n<p>If you have any trouble with your configuration, you can find more details in the <a href=\"https://www.npmjs.com/package/json-server\">official documentation</a>.</p>\n<h2 id=\"step-2---update-service-to-use-web-server-instead-of-local-array\">Step 2 - Update service to use web server instead of local array<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-14#step-2---update-service-to-use-web-server-instead-of-local-array\"><i class=\"material-icons\">link</i></a></h2>\n<p>The data source has been configured, the next step is to update your web app to connect to it use the data.</p>\n<ol>\n<li>\n<p>In <code>src/app/housing.service.ts</code>, make the following changes:</p>\n<ol>\n<li>\n<p>Update the code to remove <code>housingLocationList</code> property and the array containing the data.</p>\n</li>\n<li>\n<p>Add a string property called <code>url</code> and set its value to <code>'http://localhost:3000/locations'</code></p>\n<code-example language=\"javascript\" format=\"javascript\">\nurl = 'http://localhost:3000/locations';\n</code-example>\n<p>This code will result in errors in the rest of the file because it depends on the <code>housingLocationList</code> property. We're going to update the service methods next.</p>\n</li>\n<li>\n<p>Update the <code>getAllHousingLocations</code> function to make a call to the web server you configured.</p>\n<code-example header=\"\" path=\"first-app-lesson-14/src/app/housing.service.ts\" region=\"update-getAllHousingLocations\">\n<a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> getAllHousingLocations(): Promise&#x3C;HousingLocation[]> {\n  const data = await fetch(this.url);\n  return await data.json() ?? [];\n}\n\n</code-example>\n<p>The code now uses asynchronous code to make a <strong>GET</strong> request over HTTP.</p>\n<div class=\"callout is-helpful\">\nFor this example, the code uses `fetch`. For more advanced use cases consider using `HttpClient` provided by Angular.\n</div>\n</li>\n<li>\n<p>Update the <code>getHousingLocationsById</code> function to make a call to the web server you configured.</p>\n<code-example header=\"\" path=\"first-app-lesson-14/src/app/housing.service.ts\" region=\"update-getHousingLocationById\">\n<a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> getHousingLocationById(id: number): Promise&#x3C;HousingLocation | undefined> {\n  const data = await fetch(`${this.url}/${id}`);\n  return await data.json() ?? {};\n}\n\n</code-example>\n</li>\n<li>\n<p>Once all the updates are complete, your updated service should match the following code.</p>\n<code-example header=\"Final version of housing.service.ts\" path=\"first-app-lesson-14/src/app/housing.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HousingLocation } from './housinglocation';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class HousingService {\n\n  url = 'http://localhost:3000/locations';\n\n  <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> getAllHousingLocations(): Promise&#x3C;HousingLocation[]> {\n    const data = await fetch(this.url);\n    return await data.json() ?? [];\n  }\n\n  <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> getHousingLocationById(id: number): Promise&#x3C;HousingLocation | undefined> {\n    const data = await fetch(`${this.url}/${id}`);\n    return await data.json() ?? {};\n  }\n\n  submitApplication(firstName: string, lastName: string, <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: string) {\n    console.log(firstName, lastName, <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>);\n  }\n}\n\n\n</code-example>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"step-3---update-the-components-to-use-asynchronous-calls-to-the-housing-service\">Step 3 - Update the components to use asynchronous calls to the housing service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-14#step-3---update-the-components-to-use-asynchronous-calls-to-the-housing-service\"><i class=\"material-icons\">link</i></a></h2>\n<p>The server is now reading data from the HTTP request but the components that rely on the service now have errors because they were programmed to use the synchronous version of the service.</p>\n<ol>\n<li>\n<p>In <code>src/app/home/home.component.ts</code>, update the <code>constructor</code> to use the new asynchronous version of the <code>getAllHousingLocations</code> method.</p>\n<code-example header=\"\" path=\"first-app-lesson-14/src/app/home/home.component.ts\" region=\"update-home-component-constructor\">\nconstructor() {\n  this.housingService.getAllHousingLocations().then((housingLocationList: HousingLocation[]) => {\n    this.housingLocationList = housingLocationList;\n    this.filteredLocationList = housingLocationList;\n  });\n}\n\n</code-example>\n</li>\n<li>\n<p>In <code>src/app/details/details.component.ts</code>, update the <code>constructor</code> to use the new asynchronous version of the <code>getHousingLocationById</code> method.</p>\n<code-example header=\"\" path=\"first-app-lesson-14/src/app/details/details.component.ts\" region=\"update-details-component-constructor\">\nconstructor() {\n  const housingLocationId = parseInt(this.route.snapshot.params['id'], 10);\n  this.housingService.getHousingLocationById(housingLocationId).then(housingLocation => {\n    this.housingLocation = housingLocation;\n  });\n}\n\n</code-example>\n</li>\n<li>\n<p>Save your code.</p>\n</li>\n<li>\n<p>Open the application in the browser and confirm that it runs without any errors.</p>\n</li>\n</ol>\n<h2 id=\"lesson-review\">Lesson review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/first-app/first-app-lesson-14#lesson-review\"><i class=\"material-icons\">link</i></a></h2>\n<p>In this lesson, you updated your app to:</p>\n<ul>\n<li>use a local web server (<code>json-server</code>)</li>\n<li>use asynchronous service methods to retrieve data.</li>\n</ul>\n<p>Congratulations! You've successfully completed this tutorial and are ready to continue your journey with building even more complex Angular Apps. If you would like to learn more, please consider completing some of Angular's other developer <a href=\"tutorial\">tutorials</a> and <a href=\"/guide/developer-guide-overview\">guides</a>.</p>\n\n  <div class=\"reviewed\">Last reviewed on Wed Jul 12 2023</div>\n</div>\n\n<!-- links to this doc:\n - tutorial/first-app/first-app-lesson-13\n-->\n<!-- links from this doc:\n - /guide/developer-guide-overview\n - api/core/Injectable\n - api/forms/EmailValidator\n - api/platform-browser/animations/async\n - tutorial\n - tutorial/first-app/first-app-lesson-14#lesson-14-add-http-communication-to-your-app\n - tutorial/first-app/first-app-lesson-14#lesson-review\n - tutorial/first-app/first-app-lesson-14#step-1---configure-the-json-server\n - tutorial/first-app/first-app-lesson-14#step-2---update-service-to-use-web-server-instead-of-local-array\n - tutorial/first-app/first-app-lesson-14#step-3---update-the-components-to-use-asynchronous-calls-to-the-housing-service\n - tutorial/first-app/first-app-lesson-14#what-youll-learn\n - https://www.npmjs.com/package/json-server\n-->"
}