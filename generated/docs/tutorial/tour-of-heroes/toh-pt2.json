{
  "id": "tutorial/tour-of-heroes/toh-pt2",
  "title": "Display a selection list",
  "contents": "\n\n\n\n\n<div class=\"content\">\n  <h1 id=\"display-a-selection-list\">Display a selection list<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt2#display-a-selection-list\"><i class=\"material-icons\">link</i></a></h1>\n<p>This tutorial shows you how to:</p>\n<ul>\n<li>Expand the Tour of Heroes application to display a list of heroes.</li>\n<li>Allow users to select a hero and display the hero's details.</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>For the sample application that this page describes, see the <live-example></live-example>.</p>\n</div>\n<h2 id=\"create-mock-heroes\">Create mock heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt2#create-mock-heroes\"><i class=\"material-icons\">link</i></a></h2>\n<p>The first step is to create some heroes to display.</p>\n<p>Create a file called <code>mock-heroes.ts</code> in the <code>src/app/</code> directory.\nDefine a <code>HEROES</code> constant as an array of ten heroes and export it.\nThe file should look like this.</p>\n<code-example header=\"src/app/mock-heroes.ts\" path=\"toh-pt2/src/app/mock-heroes.ts\">\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  { id: 12, name: 'Dr. Nice' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr. IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n\n</code-example>\n<h2 id=\"displaying-heroes\">Displaying heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt2#displaying-heroes\"><i class=\"material-icons\">link</i></a></h2>\n<p>Open the <code>HeroesComponent</code> class file and import the mock <code>HEROES</code>.</p>\n<code-example header=\"src/app/heroes/heroes.component.ts (import HEROES)\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"import-heroes\">\nimport {HEROES} from '../mock-heroes';\n\n</code-example>\n<p>In <code>HeroesComponent</code> class, define a component property called <code>heroes</code> to expose the <code>HEROES</code> array for binding.</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"component\">\nexport class HeroesComponent {\n  heroes = HEROES;\n}\n\n</code-example>\n<h3 id=\"list-heroes-with-ngfor\">List heroes with <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt2#list-heroes-with-ngfor\"><i class=\"material-icons\">link</i></a></h3>\n<p>In the <code>HeroesComponent</code> component file, import the <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> directive and add it to the imports array.</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"import-ngfor\">\nimport {\n  /* . . . */\n  <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>,\n  /* . . . */\n} from '@angular/common';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  imports: [\n    <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>,\n  ],\n})\n\n</code-example>\n<p>Open the <code>HeroesComponent</code> template file and make the following changes:</p>\n<ol>\n<li>Add an <code>&#x3C;h2></code> at the top.</li>\n<li>Below the <code>&#x3C;h2></code>, add a <code>&#x3C;ul></code> element.</li>\n<li>In the <code>&#x3C;ul></code> element, insert an <code>&#x3C;li></code>.</li>\n<li>Place a <code>&#x3C;button></code> inside the <code>&#x3C;li></code> that displays properties of a <code>hero</code> inside <code>&#x3C;span></code> elements.</li>\n<li>Add CSS classes to style the component.</li>\n</ol>\n<p>It should look similar to the following:</p>\n<code-example header=\"heroes.component.html (heroes template)\" path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"list\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li>\n    &#x3C;button type=\"button\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span>\n      &#x3C;span class=\"name\">{{hero.name}}&#x3C;/span>\n    &#x3C;/button>\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p>That displays an error since the <code>hero</code> property doesn't exist.\nTo have access to each individual hero and list them all, add an <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> to the <code>&#x3C;li></code> to iterate through the list of heroes:</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"li\">\n&#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n\n</code-example>\n<p>The <a href=\"guide/built-in-directives#ngFor\"><code>*ngFor</code></a> is Angular's <em>repeater</em> directive.\nIt repeats the host element for each element in a list.</p>\n<p>The syntax in this example is as follows:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Syntax</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>&#x3C;li></code></td>\n<td align=\"left\">The host element.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>heroes</code></td>\n<td align=\"left\">Holds the mock heroes list from the <code>HeroesComponent</code> class, the mock heroes list.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>hero</code></td>\n<td align=\"left\">Holds the current hero object for each iteration through the list.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"alert is-important\">\n<p>Don't forget to put the asterisk <code>*</code> in front of <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>.\nIt's a critical part of the syntax.</p>\n</div>\n<p>After the browser refreshes, the list of heroes appears.</p>\n<div class=\"callout is-helpful\">\n<header>Interactive elements</header>\n<p>Inside the <code>&#x3C;li></code> element, add a <code>&#x3C;button></code> element to wrap the hero's details, and then make the hero clickable. To improve accessibility, use HTML elements that are inherently interactive instead of adding an event listener to a non-interactive element. In this case, the interactive <code>&#x3C;button></code> element is used instead of adding an event to the <code>&#x3C;li></code> element.</p>\n<p>For more details on accessibility, see <a href=\"guide/accessibility\">Accessibility in Angular</a>.</p>\n</div>\n<p><a id=\"styles\"></a></p>\n<h3 id=\"style-the-heroes\">Style the heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt2#style-the-heroes\"><i class=\"material-icons\">link</i></a></h3>\n<p>The heroes list should be attractive and should respond visually when users\nhover over and select a hero from the list.</p>\n<p>In the <a href=\"tutorial/tour-of-heroes/toh-pt0#app-wide-styles\">first tutorial</a>, you set the basic styles for the entire application in <code>styles.css</code>.\nThat style sheet didn't include styles for this list of heroes.</p>\n<p>You could add more styles to <code>styles.css</code> and keep growing that style sheet as you add components.</p>\n<p>You may prefer instead to define private styles for a specific component. This keeps everything a component needs, such as the code, the HTML, and the CSS, together in one place.</p>\n<p>This approach makes it easier to re-use the component somewhere else and deliver the component's intended appearance even if the global styles are different.</p>\n<p>You define private styles either inline in the <code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code> array or as style sheet files identified in the <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> array.</p>\n<p>When the <code>ng generate</code> created the <code>HeroesComponent</code>, it created an empty <code>heroes.component.css</code> style sheet for the <code>HeroesComponent</code> and pointed to it in <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> like this.</p>\n<code-example header=\"src/app/heroes/heroes.component.ts (@Component)\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"metadata\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css'],\n  imports: [\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>,\n    <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>,\n    <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>,\n  ],\n})\n\n</code-example>\n<p>Open the <code>heroes.component.css</code> file and paste in the private CSS styles for the <code>HeroesComponent</code> from the <a href=\"tutorial/tour-of-heroes/toh-pt2#final-code-review\">final code review</a>.</p>\n<div class=\"alert is-important\">\n<p>Styles and style sheets identified in <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata are scoped to that specific component.\nThe <code>heroes.component.css</code> styles apply only to the <code>HeroesComponent</code> and don't affect the outer HTML or the HTML in any other component.</p>\n</div>\n<h2 id=\"viewing-details\">Viewing details<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt2#viewing-details\"><i class=\"material-icons\">link</i></a></h2>\n<p>When the user clicks a hero in the list, the component should display the selected hero's details at the bottom of the page.</p>\n<p>The code in this section listens for the hero item click event and display/update the hero details.</p>\n<h3 id=\"add-a-click-event-binding\">Add a click event binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt2#add-a-click-event-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p>Add a click event binding to the <code>&#x3C;button></code> in the <code>&#x3C;li></code> like this:</p>\n<code-example header=\"heroes.component.html (template excerpt)\" path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"selectedHero-click\">\n&#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n  &#x3C;button type=\"button\" (click)=\"onSelect(hero)\">\n  &#x3C;!-- ... -->\n\n</code-example>\n<p>This is an example of Angular's <a href=\"guide/event-binding\">event binding</a> syntax.</p>\n<p>The parentheses around <code>click</code> tell Angular to listen for the <code>&#x3C;button></code> element's <code>click</code> event.\nWhen the user clicks in the <code>&#x3C;button></code>, Angular executes the <code>onSelect(hero)</code> expression.</p>\n<p>In the next section, define an <code>onSelect()</code> method in <code>HeroesComponent</code> to display the hero that was defined in the <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> expression.</p>\n<h3 id=\"add-the-click-event-handler\">Add the click event handler<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt2#add-the-click-event-handler\"><i class=\"material-icons\">link</i></a></h3>\n<p>Rename the component's <code>hero</code> property to <code>selectedHero</code> but don't assign any value to it since there is no <em>selected hero</em> when the application starts.</p>\n<p>Add the following <code>onSelect()</code> method, which assigns the clicked hero from the template to the component's <code>selectedHero</code>.</p>\n<code-example header=\"src/app/heroes/heroes.component.ts (onSelect)\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"on-select\">\nselectedHero?: Hero;\nonSelect(hero: Hero): void {\n  this.selectedHero = hero;\n}\n\n</code-example>\n<h3 id=\"add-a-details-section\">Add a details section<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt2#add-a-details-section\"><i class=\"material-icons\">link</i></a></h3>\n<p>Currently, you have a list in the component template.\nTo show details about a hero when you click their name in the list, add a section\nin the template that displays their details.\nAdd the following to <code>heroes.component.html</code> beneath the list section:</p>\n<code-example header=\"heroes.component.html (selected hero details)\" path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"selectedHero-details\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n  &#x3C;h2>{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>id: {{selectedHero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label for=\"hero-name\">Hero name: &#x3C;/label>\n    &#x3C;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\">\n  &#x3C;/div>\n&#x3C;/div>\n\n</code-example>\n<p>The hero details should only be displayed when a hero is selected. When a component is created initially, there is no selected hero. Import the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> directive in your component (similar to <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code>) and add the <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive to the <code>&#x3C;div></code> that wraps the hero details. This directive tells Angular to render the section only when the <code>selectedHero</code> is defined after it has been selected by clicking on a hero.</p>\n<div class=\"alert is-important\">\n<p>Don't forget the asterisk <code>*</code> character in front of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>.\nIt's a critical part of the syntax.</p>\n</div>\n<h3 id=\"style-the-selected-hero\">Style the selected hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt2#style-the-selected-hero\"><i class=\"material-icons\">link</i></a></h3>\n<p>To help identify the selected hero, you can use the <code>.selected</code> CSS class in the <a href=\"tutorial/tour-of-heroes/toh-pt2#styles\">styles you added earlier</a>.\nTo apply the <code>.selected</code> class to the <code>&#x3C;li></code> when the user clicks it, use class binding.</p>\n<div class=\"lightbox\">\n<img alt=\"Selected hero with dark background and light text that differentiates it from unselected list items\" src=\"generated/images/guide/toh/heroes-list-selected.png\" width=\"594\" height=\"290\">\n</div>\n<p>Angular's <a href=\"guide/class-binding\">class binding</a> can add and remove a CSS class conditionally.\nAdd <code>[class.some-css-class]=\"some-condition\"</code> to the element you want to style.</p>\n<p>Add the following <code>[class.selected]</code> binding to the <code>&#x3C;button></code> in the <code>HeroesComponent</code> template:</p>\n<code-example header=\"heroes.component.html (toggle the &#x27;selected&#x27; CSS class)\" path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"class-selected\">\n[class.selected]=\"hero === selectedHero\"\n\n</code-example>\n<p>When the current row hero is the same as the <code>selectedHero</code>, Angular adds the <code>selected</code> CSS class.\nWhen the two heroes are different, Angular removes the class.</p>\n<p>The finished <code>&#x3C;li></code> looks like this:</p>\n<code-example header=\"heroes.component.html (list item hero)\" path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"li\">\n&#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n  &#x3C;button [class.selected]=\"hero === selectedHero\" type=\"button\" (click)=\"onSelect(hero)\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span>\n    &#x3C;span class=\"name\">{{hero.name}}&#x3C;/span>\n  &#x3C;/button>\n&#x3C;/li>\n\n</code-example>\n<p><a id=\"final-code-review\"></a></p>\n<h2 id=\"final-code-review\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt2#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<p>Here are the code files discussed on this page, including the <code>HeroesComponent</code> styles.</p>\n<code-tabs>\n    <code-pane header=\"src/app/mock-heroes.ts\" path=\"toh-pt2/src/app/mock-heroes.ts\">\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  { id: 12, name: 'Dr. Nice' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr. IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\nimport {\n  <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>,\n  <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>,\n  <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>,\n} from '@angular/common';\nimport {<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>} from '@angular/forms';\n\nimport {Hero} from '../hero';\nimport {HEROES} from '../mock-heroes';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css'],\n  imports: [\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>,\n    <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>,\n    <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>,\n  ],\n})\n\nexport class HeroesComponent {\n  heroes = HEROES;\n  selectedHero?: Hero;\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt2/src/app/heroes/heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    &#x3C;button [class.selected]=\"hero === selectedHero\" type=\"button\" (click)=\"onSelect(hero)\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span>\n      &#x3C;span class=\"name\">{{hero.name}}&#x3C;/span>\n    &#x3C;/button>\n  &#x3C;/li>\n&#x3C;/ul>\n\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n  &#x3C;h2>{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>id: {{selectedHero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label for=\"hero-name\">Hero name: &#x3C;/label>\n    &#x3C;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\">\n  &#x3C;/div>\n&#x3C;/div>\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.css\" path=\"toh-pt2/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n\n.heroes li {\n  display: flex;\n}\n\n.heroes button {\n  flex: 1;\n  cursor: pointer;\n  position: relative;\n  left: 0;\n  background-color: #EEE;\n  margin: .5em;\n  padding: 0;\n  border-radius: 4px;\n  display: flex;\n  align-items: stretch;\n  height: 1.8em;\n}\n\n.heroes button:hover {\n  color: #2c3a41;\n  background-color: #e6e6e6;\n  left: .1em;\n}\n\n.heroes button:active {\n  background-color: #525252;\n  color: #fafafa;\n}\n\n.heroes button.selected {\n  background-color: black;\n  color: white;\n}\n\n.heroes button.selected:hover {\n  background-color: #505050;\n  color: white;\n}\n\n.heroes button.selected:active {\n  background-color: black;\n  color: white;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #405061;\n  line-height: 1em;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n.heroes .name {\n  align-self: center;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt2#summary\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>The Tour of Heroes application displays a list of heroes with a detail view.</li>\n<li>The user can select a hero and see that hero's details.</li>\n<li>You used <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> to display a list.</li>\n<li>You used <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> to conditionally include or exclude a block of HTML.</li>\n<li>You can toggle a CSS style class with a <code>class</code> binding.</li>\n</ul>\n<h2 id=\"next-steps\">Next steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt2#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li><a href=\"tutorial/tour-of-heroes/toh-pt3\">3. Create a feature component</a></li>\n</ul>\n\n  <div class=\"reviewed\">Last reviewed on Wed Aug 30 2023</div>\n</div>\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/localizing-angular\n - tutorial/tour-of-heroes/toh-pt1\n - tutorial/tour-of-heroes/toh-pt3\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#styles\n - api/forms/FormsModule\n - api/forms/NgModel\n - guide/accessibility\n - guide/built-in-directives#ngFor\n - guide/class-binding\n - guide/event-binding\n - tutorial/tour-of-heroes/toh-pt0#app-wide-styles\n - tutorial/tour-of-heroes/toh-pt2#add-a-click-event-binding\n - tutorial/tour-of-heroes/toh-pt2#add-a-details-section\n - tutorial/tour-of-heroes/toh-pt2#add-the-click-event-handler\n - tutorial/tour-of-heroes/toh-pt2#create-mock-heroes\n - tutorial/tour-of-heroes/toh-pt2#display-a-selection-list\n - tutorial/tour-of-heroes/toh-pt2#displaying-heroes\n - tutorial/tour-of-heroes/toh-pt2#final-code-review\n - tutorial/tour-of-heroes/toh-pt2#list-heroes-with-ngfor\n - tutorial/tour-of-heroes/toh-pt2#next-steps\n - tutorial/tour-of-heroes/toh-pt2#style-the-heroes\n - tutorial/tour-of-heroes/toh-pt2#style-the-selected-hero\n - tutorial/tour-of-heroes/toh-pt2#styles\n - tutorial/tour-of-heroes/toh-pt2#summary\n - tutorial/tour-of-heroes/toh-pt2#viewing-details\n - tutorial/tour-of-heroes/toh-pt3\n-->"
}