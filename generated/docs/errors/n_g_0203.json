{
  "id": "errors/NG0203",
  "title": "NG0203: `inject()` must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`.",
  "contents": "<div class=\"content\">\n\n  <h1 id=\"ng0203-inject-must-be-called-from-an-injection-context-such-as-a-constructor-a-factory-function-a-field-initializer-or-a-function-used-with-runininjectioncontext\">NG0203: `inject()` must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0203#ng0203-inject-must-be-called-from-an-injection-context-such-as-a-constructor-a-factory-function-a-field-initializer-or-a-function-used-with-runininjectioncontext\"><i class=\"material-icons\">link</i></a></h1>\n\n  \n  \n\n  <div class=\"error-description\">\n    <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0203#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p>You see this error when you try to use the <a href=\"api/core/inject\"><code>inject</code></a> function outside of the allowed <a href=\"guide/dependency-injection-context\">injection context</a>. The injection context is available during the class creation and initialization. It is also available to functions\nused with <code><a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a></code>.</p>\n<p>In practice the <code>inject()</code> calls are allowed in a constructor, a constructor parameter and a field initializer:</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({providedIn: 'root'})\nexport class Car {\n  radio: Radio|undefined;\n\n  // OK: field initializer\n  spareTyre = inject(Tyre);\n  \n  constructor() {\n    // OK: constructor body\n    this.radio = inject(Radio);\n  }\n}\n</code-example>\n<p>It is also legal to call <a href=\"api/core/inject\"><code>inject</code></a> from a provider's factory:</p>\n<code-example language=\"typescript\">\nproviders: [\n  {provide: Car, useFactory: () => {\n    // OK: a class factory\n    const engine = inject(Engine);\n    return new Car(engine);\n  }}\n]\n</code-example>\n<p>Calls to the <a href=\"api/core/inject\"><code>inject</code></a> function outside of the class creation or <code><a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a></code> will result in error. Most notably, calls to <code>inject()</code> are disallowed after a class instance was created, in methods (including lifecycle hooks):</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ ... })\nexport class CarComponent {\n  ngOnInit() {\n    // ERROR: too late, the component instance was already created\n    const engine = inject(Engine);\n    engine.start();\n  }\n}\n</code-example>\n\n  </div>\n\n\n  \n  <br>\n\n  <div class=\"debugging\">\n    <h2 id=\"debugging-the-error\">Debugging the error<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0203#debugging-the-error\"><i class=\"material-icons\">link</i></a></h2>\n    <p>Work backwards from the stack trace of the error to identify a place where the disallowed call to <code>inject()</code> is located. </p>\n<p>To fix the error move the <a href=\"api/core/inject\"><code>inject</code></a> call to an allowed place (usually a class constructor or a field initializer).</p>\n<p><strong>Note:</strong> If you are running in a test context, <code>TestBed.runInInjectionContext</code> will enable <code>inject()</code> to succeed.</p>\n<code-example language=\"typescript\">\nTestBed.runInInjectionContext(() => {\n   // ...\n});\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  </div>\n  \n</div>\n\n<!-- links to this doc:\n - errors\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Injectable\n - api/core/inject\n - api/core/runInInjectionContext\n - errors/NG0203#debugging-the-error\n - errors/NG0203#description\n - errors/NG0203#ng0203-inject-must-be-called-from-an-injection-context-such-as-a-constructor-a-factory-function-a-field-initializer-or-a-function-used-with-runininjectioncontext\n - guide/dependency-injection-context\n-->"
}