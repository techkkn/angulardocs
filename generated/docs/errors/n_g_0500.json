{
  "id": "errors/NG0500",
  "title": "NG0500: During hydration, Angular expected a DOM node, but either the actual DOM was different or was not found.",
  "contents": "<div class=\"content\">\n\n  <h1 id=\"ng0500-during-hydration-angular-expected-a-dom-node-but-either-the-actual-dom-was-different-or-was-not-found\">NG0500: During hydration, Angular expected a DOM node, but either the actual DOM was different or was not found.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0500#ng0500-during-hydration-angular-expected-a-dom-node-but-either-the-actual-dom-was-different-or-was-not-found\"><i class=\"material-icons\">link</i></a></h1>\n\n  \n  \n\n  <div class=\"error-description\">\n    <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0500#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p>This error means that during the hydration process, Angular expected a DOM structure as rendered and annotated during server side rendering. However, on the client, the DOM tree was different than the server rendered DOM tree.</p>\n<p>This error typically happens due to direct DOM manipulation using native browser APIs that alter the DOM structure outside of what Angular produced. It will also occur if you use <code>innerHTML</code> or <code>outerHTML</code> to set HTML content, which similarly alters the DOM structure outside of what Angular produced. You can resolve this by refactoring the component to use native Angular APIs instead of native APIs. If that's not possible, you can add the <code>ngSkipHydration</code> attribute to your component's host node, which will disable hydration for the component and its children. <code>ngSkipHydration</code> should only be used as a last resort and should be considered a bug that needs to be fixed.</p>\n<p>More information about hydration can be found in <a href=\"guide/hydration\">this guide</a>.</p>\n<p>The following example will trigger the error.</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'example-cmp',\n  template: '&#x3C;div>&#x3C;span>world&#x3C;/span>&#x3C;/div>',\n})\nexport class ExampleCmp {\n  hostElement = inject(<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>).nativeElement;\n\n  ngOnInit() {\n    // Create a new &#x3C;p> element with the `Hello` text inside\n    const newNode = document.createElement('p');\n    newNode.innerHTML = 'Hello';\n\n    // Insert the &#x3C;p> before the first element. Since Angular has no information\n\t  // about the &#x3C;p> element, it will be looking for the &#x3C;div> element at the first\n\t  // element position instead. As a result, a hydration mismatch error would be\n\t  // thrown. Instead, update component's template to create the &#x3C;p> element.\n\t  this.hostElement.insertBefore(newNode, this.hostElement.firstChild);\n\t}\n}\n</code-example>\n\n  </div>\n\n\n  \n  <br>\n\n  <div class=\"debugging\">\n    <h2 id=\"debugging-the-error\">Debugging the error<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0500#debugging-the-error\"><i class=\"material-icons\">link</i></a></h2>\n    <p>The error message in the developer console should contain information on a specific part of the application's DOM structure that is causing the problem. Review that part of the application for hydration-related errors, such as direct DOM manipulation using native APIs.</p>\n<p>Check that your template has valid HTML structure. See more information in the <a href=\"guide/hydration#valid-html-structure\">hydration guide</a>.</p>\n<p>You can add the <code>ngSkipHydration</code> attribute to your component host node as a possible workaround.</p>\n<p>If your application works in development environment, but you see hydration errors in production builds, make sure that the generated HTML that is delivered to a browser contains comment nodes produced by Angular during the rendering on the server. Those comment nodes are used by Angular runtime as anchors for view containers (with and without hydration) and hydration process expects them to be present at their original locations. If you have a custom logic to remove comment nodes from the HTML generated by the server-side rendering or you've configured your CDN to remove them before serving the content - disable the comment nodes removal and check if hydration errors are gone.</p>\n\n  </div>\n  \n</div>\n\n<!-- links to this doc:\n - errors\n - errors/NG0501\n - errors/NG0502\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/ElementRef\n - errors/NG0500#debugging-the-error\n - errors/NG0500#description\n - errors/NG0500#ng0500-during-hydration-angular-expected-a-dom-node-but-either-the-actual-dom-was-different-or-was-not-found\n - guide/hydration\n - guide/hydration#valid-html-structure\n-->"
}