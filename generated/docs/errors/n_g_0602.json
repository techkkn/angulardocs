{
  "id": "errors/NG0602",
  "title": "NG0602: A disallowed function is called inside a reactive context",
  "contents": "<div class=\"content\">\n\n  <h1 id=\"ng0602-a-disallowed-function-is-called-inside-a-reactive-context\">NG0602: A disallowed function is called inside a reactive context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0602#ng0602-a-disallowed-function-is-called-inside-a-reactive-context\"><i class=\"material-icons\">link</i></a></h1>\n\n  \n  \n\n  <div class=\"error-description\">\n    <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0602#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p>A function that is not allowed to run inside a reactive context was called from within a reactive context.</p>\n<p>For example, an <code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code> cannot be scheduled from within a <code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code> or an actively executing effect.\nAvoid calling functions like <code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code> as part of template expressions, as those execute in their own reactive context.</p>\n<p>Computed expressions are expected to be pure.\nPure means that expression do not trigger any side effects.\nSide effects are operations like scheduling <code><a href=\"api/core/afterRender\" class=\"code-anchor\">afterRender</a></code>, creating a new <code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code>, or subscribing to observables.</p>\n<p>Some operations are explicitly banned inside reactive contexts in order to avoid common pitfalls.\nAs an example, using <code><a href=\"api/core/afterRender\" class=\"code-anchor\">afterRender</a></code> inside a <code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code> will schedule new render hooks every time the computed expression evaluates.\nThis is likely not intended and could degrade application performance.</p>\n<h3 id=\"fixing-the-error\">Fixing the error<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0602#fixing-the-error\"><i class=\"material-icons\">link</i></a></h3>\n<p>This error guide is non-exhaustive.\nIt captures a few common scenarios and how to address the error.</p>\n<h4 id=\"afterrender\"><code><a href=\"api/core/afterRender\" class=\"code-anchor\">afterRender</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0602#afterrender\"><i class=\"material-icons\">link</i></a></h4>\n<p>Move the call for <code><a href=\"api/core/afterRender\" class=\"code-anchor\">afterRender</a></code> outside of the reactive context.</p>\n<p>A good place to schedule the after render hook is in the component's class constructor.\nAlternatively, use <code><a href=\"api/core/untracked\" class=\"code-anchor\">untracked</a></code> to leave the reactive context and explicitly opt-out of this error.</p>\n<h4 id=\"effect\"><code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0602#effect\"><i class=\"material-icons\">link</i></a></h4>\n<p>Move the call for <code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code> outside of the reactive context.</p>\n<p>A good place to schedule an effect is in a <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>'s class constructor.</p>\n<h4 id=\"tosignal\"><code><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0602#tosignal\"><i class=\"material-icons\">link</i></a></h4>\n<p>Move the call for <code><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></code> outside of the reactive context.</p>\n<code-example language=\"typescript\">\nresult = <a href=\"api/core/computed\" class=\"code-anchor\">computed</a>(() => {\n  const dataSignal = <a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a>(dataObservable$);\n  return doSomething(dataSignal());\n});\n</code-example>\n<p>can be refactored into:</p>\n<code-example language=\"typescript\">\ndataSignal = <a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a>(dataObservable$);\nresult = <a href=\"api/core/computed\" class=\"code-anchor\">computed</a>(() => doSomething(dataSignal()));\n</code-example>\n<p>Alternatively, if this is not possible, consider manually subscribing to the observable.</p>\n<p>As a last resort, use <code><a href=\"api/core/untracked\" class=\"code-anchor\">untracked</a></code> to leave the reactive context.\nBe careful as leaving the reactive context can result in signal reads to be ignored inside <code><a href=\"api/core/untracked\" class=\"code-anchor\">untracked</a></code>.</p>\n\n  </div>\n\n\n  \n  <br>\n\n  <div class=\"debugging\">\n    <h2 id=\"debugging-the-error\">Debugging the error<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0602#debugging-the-error\"><i class=\"material-icons\">link</i></a></h2>\n    <p>The error message mentions the function that was unexpectedly called.\nLook for this function call in your application code.</p>\n<p>Alternatively, the stack trace in your browser will show where the function was invoked and where it's located.</p>\n\n  </div>\n  \n</div>\n\n<!-- links to this doc:\n - errors\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/afterRender\n - api/core/computed\n - api/core/effect\n - api/core/rxjs-interop/toSignal\n - api/core/untracked\n - errors/NG0602#afterrender\n - errors/NG0602#debugging-the-error\n - errors/NG0602#description\n - errors/NG0602#effect\n - errors/NG0602#fixing-the-error\n - errors/NG0602#ng0602-a-disallowed-function-is-called-inside-a-reactive-context\n - errors/NG0602#tosignal\n-->"
}