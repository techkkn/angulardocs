{
  "id": "errors/NG0506",
  "title": "NG0506: NgZone remains unstable after a long period of time",
  "contents": "<div class=\"content\">\n\n  <h1 id=\"ng0506-ngzone-remains-unstable-after-a-long-period-of-time\">NG0506: NgZone remains unstable after a long period of time<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0506#ng0506-ngzone-remains-unstable-after-a-long-period-of-time\"><i class=\"material-icons\">link</i></a></h1>\n\n  \n  \n\n  <div class=\"error-description\">\n    <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0506#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p>This warning occurs when hydration is enabled on the client but the NgZone remains unstable for a long period of time.</p>\n<p>The <a href=\"api/core/ApplicationRef#isStable\"><code>ApplicationRef#isStable</code></a> API uses NgZone to report when an application becomes <code>stable</code> and <code>unstable</code>. An application is considered stable when there are no pending microtasks or macrotasks.</p>\n<p>Angular Hydration relies on a signal from Zone.js when it becomes stable inside an application:</p>\n<ul>\n<li>during the server-side rendering (SSR) to start the serialization process</li>\n<li>in a browser this signal is used to start the post-hydration cleanup to remove DOM nodes that remained unclaimed</li>\n</ul>\n<p>This warning is displayed when the <code><a href=\"api/core/ApplicationRef#isStable\" class=\"code-anchor\">ApplicationRef.isStable</a>()</code> doesn't emit <code>true</code> within 10 seconds. If this is intentional and your application becomes stable later, you can ignore this warning. </p>\n<p><strong>Macrotasks</strong></p>\n<p>Macrotasks include functions like <code>setInterval</code>, <code>setTimeout</code>, <code>requestAnimationFrame</code> etc.\nIf one of these functions is called in the initialization phase of the app or the bootstrapped components, the application will remain unstable. </p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app',\n  template: ``,\n})\nclass SimpleComponent {\n    constructor() {\n        setInterval(() => { ... }, 1000)\n\n        // or \n\n        setTimeout(() => { ... }, 10_000)\n    }\n}\n</code-example>\n<p>If these functions need to be called in the initialization phase, invoking them outside the angular zone solves the issue.  </p>\n<code-example language=\"typescript\">\nclass SimpleComponent {\n    constructor() {\n      inject(<a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>).runOutsideAngular(() => {\n        setInterval(() => {}, 1000);\n      })\n    }\n}\n</code-example>\n\n  </div>\n\n\n  \n  <br>\n\n  <div class=\"debugging\">\n    <h2 id=\"debugging-the-error\">Debugging the error<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0506#debugging-the-error\"><i class=\"material-icons\">link</i></a></h2>\n    <p>Verify that you don't have any long standing microtask or macrotasks.</p>\n\n  </div>\n  \n</div>\n\n<!-- links to this doc:\n - errors\n-->\n<!-- links from this doc:\n - api/core/ApplicationRef#isStable\n - api/core/Component\n - api/core/NgZone\n - errors/NG0506#debugging-the-error\n - errors/NG0506#description\n - errors/NG0506#ng0506-ngzone-remains-unstable-after-a-long-period-of-time\n-->"
}