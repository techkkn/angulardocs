{
  "id": "errors/NG6100",
  "title": "NG6100: Setting NgModule.id to module.id is a common anti-pattern",
  "contents": "<div class=\"content\">\n\n  <h1 id=\"ng6100-setting-ngmoduleid-to-moduleid-is-a-common-anti-pattern\">NG6100: Setting NgModule.id to module.id is a common anti-pattern<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG6100#ng6100-setting-ngmoduleid-to-moduleid-is-a-common-anti-pattern\"><i class=\"material-icons\">link</i></a></h1>\n\n  \n  \n\n  <div class=\"error-description\">\n    <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG6100#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p>Using <code>module.id</code> as an NgModule <code>id</code> is a common anti-pattern and is likely not serving a useful purpose in your code.</p>\n<p>NgModules can be declared with an <code>id</code>:</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  id: 'my_module'\n})\nexport class MyModule {}\n</code-example>\n<p>Declaring an <code>id</code> makes the NgModule available for lookup via the <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a>()</code> operation. This functionality is rarely used, mainly in very specific bundling scenarios when lazily loading NgModules without obtaining direct references to them. In most Angular code, ES dynamic <code>import()</code> (<code>import('./path/to/module')</code>) should be used instead, as this provides a direct reference to the NgModule being loaded without the need for a global registration side effect.</p>\n<p>If you are not using <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a></code>, you do not need to provide <code>id</code>s for your NgModules. Providing one has a significant drawback: it makes the NgModule non-tree-shakable, which can have an impact on your bundle size.</p>\n<p>In particular, the pattern of specifying <code>id: module.id</code> results from a misunderstanding of <code>@<a href=\"api/core/NgModule#id\" class=\"code-anchor\">NgModule.id</a></code>. In earlier versions of Angular, it was sometimes necessary to include the property <code>moduleId: module.id</code> in <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata.</p>\n<p>Using <code>module.id</code> for <code>@<a href=\"api/core/NgModule#id\" class=\"code-anchor\">NgModule.id</a></code> likely results from confusion between <code>@<a href=\"api/core/Component#moduleId\" class=\"code-anchor\">Component.moduleId</a></code> and <code>@<a href=\"api/core/NgModule#id\" class=\"code-anchor\">NgModule.id</a></code>. <code>module.id</code> would not typically be useful for <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a>()</code> operations as the <code>id</code> needs to be a well-known string, and <code>module.id</code> is usually opaque to consumers.</p>\n\n  </div>\n\n\n  \n  <br>\n\n  <div class=\"debugging\">\n    <h2 id=\"debugging-the-error\">Debugging the error<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG6100#debugging-the-error\"><i class=\"material-icons\">link</i></a></h2>\n    <p>You can remove the <code>id: module.id</code> declaration from your NgModules. The compiler ignores this declaration and issues this warning instead.</p>\n\n  </div>\n  \n</div>\n\n<!-- links to this doc:\n - errors\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Component#moduleId\n - api/core/NgModule\n - api/core/NgModule#id\n - api/core/getNgModuleById\n - errors/NG6100#debugging-the-error\n - errors/NG6100#description\n - errors/NG6100#ng6100-setting-ngmoduleid-to-moduleid-is-a-common-anti-pattern\n-->"
}