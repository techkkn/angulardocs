{
  "id": "errors/NG3003",
  "title": "NG3003: Import cycles would need to be created to compile this component",
  "contents": "<div class=\"content\">\n\n  <h1 id=\"ng3003-import-cycles-would-need-to-be-created-to-compile-this-component\">NG3003: Import cycles would need to be created to compile this component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#ng3003-import-cycles-would-need-to-be-created-to-compile-this-component\"><i class=\"material-icons\">link</i></a></h1>\n\n  \n  \n\n  <div class=\"error-description\">\n    <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p>A component, directive, or pipe that is referenced by this component would require the compiler to add an import that would lead to a cycle of imports.\nFor example, consider a scenario where a <code>ParentComponent</code> references a <code>ChildComponent</code> in its template:</p>\n<code-example header=\"parent.component.ts\" path=\"errors/cyclic-imports/parent.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-parent',\n  template: '&#x3C;app-child>&#x3C;/app-child>',\n})\nexport class ParentComponent {}\n\n\n</code-example>\n<code-example header=\"child.component.ts\" path=\"errors/cyclic-imports/child.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\nimport {ParentComponent} from './parent.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-child',\n  template: 'The child!',\n})\nexport class ChildComponent {\n  constructor(private parent: ParentComponent) {}\n}\n\n\n</code-example>\n<p>There is already an import from <code>child.component.ts</code> to <code>parent.component.ts</code> since the <code>ChildComponent</code> references the <code>ParentComponent</code> in its constructor.</p>\n<div class=\"alert is-helpful\">\n<p><strong>NOTE</strong>: <br>\nThe parent component's template contains <code>&#x3C;child>&#x3C;/child></code>.\nThe generated code for this template must therefore contain a reference to the <code>ChildComponent</code> class.\nIn order to make this reference, the compiler would have to add an import from <code>parent.component.ts</code> to <code>child.component.ts</code>, which would cause an import cycle:</p>\n<code-example format=\"none\" language=\"none\">\n\nparent.component.ts -> child.component.ts -> parent.component.ts\n\n</code-example>\n</div>\n<h3 id=\"remote-scoping\">Remote Scoping<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#remote-scoping\"><i class=\"material-icons\">link</i></a></h3>\n<p>If you are using NgModules, to avoid adding imports that create cycles, additional code is added to the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> class where the component that wires up the dependencies is declared.</p>\n<p>This is known as \"remote scoping\".</p>\n<h3 id=\"libraries\">Libraries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#libraries\"><i class=\"material-icons\">link</i></a></h3>\n<p>Unfortunately, \"remote scoping\" code is side-effectful —which prevents tree shaking— and cannot be used in libraries.\nSo when building libraries using the <code>\"compilationMode\": \"partial\"</code> setting, any component that would require a cyclic import will cause this <code>NG3003</code> compiler error to be raised.</p>\n\n  </div>\n\n\n  \n  <br>\n\n  <div class=\"debugging\">\n    <h2 id=\"debugging-the-error\">Debugging the error<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#debugging-the-error\"><i class=\"material-icons\">link</i></a></h2>\n    <p>The cycle that would be generated is shown as part of the error message.\nFor example:</p>\n<code-example hidecopy=\"true\">\n\nThe component ChildComponent is used in the template but importing it would create a cycle:\n/parent.component.ts -> /child.component.ts -> /parent.component.ts\n\n</code-example>\n<p>Use this to identify how the referenced component, pipe, or directive has a dependency back to the component being compiled.\nHere are some ideas for fixing the problem:</p>\n<ul>\n<li>Try to rearrange your dependencies to avoid the cycle.\nFor example, using an intermediate interface that is stored in an independent file that can be imported to both dependent files without causing an import cycle.</li>\n<li>Move the classes that reference each other into the same file, to avoid any imports between them.</li>\n<li>Convert import statements to type-only imports (using <code>import type</code> syntax) if the imported declarations are only used as types, as type-only imports do not contribute to cycles.</li>\n</ul>\n\n  </div>\n  \n</div>\n\n<!-- links to this doc:\n - errors\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/NgModule\n - errors/NG3003#debugging-the-error\n - errors/NG3003#description\n - errors/NG3003#libraries\n - errors/NG3003#ng3003-import-cycles-would-need-to-be-created-to-compile-this-component\n - errors/NG3003#remote-scoping\n-->"
}